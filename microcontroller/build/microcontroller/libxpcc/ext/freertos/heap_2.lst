   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"heap_2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.pvPortMalloc,"ax",%progbits
  20              		.align	2
  21              		.global	pvPortMalloc
  22              		.thumb
  23              		.thumb_func
  25              	pvPortMalloc:
  26              	.LFB2:
  27              		.file 1 "/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c"
   1:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*
   2:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     FreeRTOS V7.0.1 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	
   4:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
   5:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     ***************************************************************************
   6:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *                                                                       *
   7:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    available.                                                         *
  10:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *                                                                       *
  11:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    for microcontrollers - completely free of charge!                  *
  17:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *                                                                       *
  18:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *                                                                       *
  20:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****      *                                                                       *
  22:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     ***************************************************************************
  23:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  24:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  25:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     This file is part of the FreeRTOS distribution.
  26:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  27:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     more details. You should have received a copy of the GNU General Public
  37:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     FreeRTOS WEB site.
  41:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  42:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     1 tab == 4 spaces!
  43:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  44:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     contact details.
  46:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  47:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     critical systems.
  49:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  50:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****     licensing and training services.
  52:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** */
  53:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  54:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*
  55:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that permits
  56:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * allocated blocks to be freed, but does not combine adjacent free blocks
  57:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * into a single larger block.
  58:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  *
  59:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * See heap_1.c and heap_3.c for alternative implementations, and the memory
  60:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * management pages of http://www.FreeRTOS.org for more information.
  61:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  */
  62:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #include <stdlib.h>
  63:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  64:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  65:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** all the API functions to use the MPU wrappers.  That should only be done when
  66:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** task.h is included from an application file. */
  67:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  68:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  69:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #include "FreeRTOS.h"
  70:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #include "task.h"
  71:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  72:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  73:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  74:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* Allocate the memory for the heap.  The struct is used to force byte
  75:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** alignment without using any non-portable code. */
  76:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** static union xRTOS_HEAP
  77:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
  78:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	#if portBYTE_ALIGNMENT == 8
  79:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		volatile portDOUBLE dDummy;
  80:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	#else
  81:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		volatile unsigned long ulDummy;
  82:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	#endif
  83:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];
  84:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** } xHeap;
  85:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  86:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* Define the linked list structure.  This is used to link free blocks in order
  87:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** of their size. */
  88:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** typedef struct A_BLOCK_LINK
  89:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
  90:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  91:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  92:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** } xBlockLink;
  93:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  94:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  95:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** static const unsigned short  heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( size
  96:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
  97:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
  98:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* Create a couple of list links to mark the start and end of the list. */
  99:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** static xBlockLink xStart, xEnd;
 100:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 101:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 102:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** fragmentation. */
 103:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** static size_t xFreeBytesRemaining = configTOTAL_HEAP_SIZE;
 104:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 105:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
 106:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 107:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*
 108:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * Insert a block into the list of free blocks - which is ordered by size of
 109:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * the block.  Small blocks at the start of the list and large blocks at the end
 110:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  * of the list.
 111:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c ****  */
 112:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
 113:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {																					\
 114:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** xBlockLink *pxIterator;																\
 115:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** size_t xBlockSize;																	\
 116:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 117:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xBlockSize = pxBlockToInsert->xBlockSize;										\
 118:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 119:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* Iterate through the list until a block is found that has a larger size */	\
 120:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* than the block we are inserting. */											\
 121:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIt
 122:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	{																				\
 123:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		/* There is nothing to do here - just iterate to the correct position. */	\
 124:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	}																				\
 125:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 126:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* Update the list to include the block being inserted in the correct */		\
 127:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* position. */																	\
 128:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
 129:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
 130:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** }
 131:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*-----------------------------------------------------------*/
 132:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 133:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** #define prvHeapInit()																\
 134:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {																					\
 135:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** xBlockLink *pxFirstFreeBlock;														\
 136:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 137:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* xStart is used to hold a pointer to the first item in the list of free */	\
 138:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* blocks.  The void cast is used to prevent compiler warnings. */				\
 139:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;								\
 140:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xStart.xBlockSize = ( size_t ) 0;												\
 141:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 142:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* xEnd is used to mark the end of the list of free blocks. */					\
 143:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xEnd.xBlockSize = configTOTAL_HEAP_SIZE;										\
 144:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xEnd.pxNextFreeBlock = NULL;													\
 145:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 																					\
 146:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	/* To start with there is a single free block that is sized to take up the		\
 147:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	entire heap space. */															\
 148:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;										\
 149:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	pxFirstFreeBlock->xBlockSize = configTOTAL_HEAP_SIZE;							\
 150:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
 151:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** }
 152:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*-----------------------------------------------------------*/
 153:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 154:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** void *pvPortMalloc( size_t xWantedSize )
 155:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
  28              		.loc 1 155 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
 156:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 157:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
 158:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** void *pvReturn = NULL;
 159:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 160:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	vTaskSuspendAll();
  40              		.loc 1 160 0
  41 0002 274B     		ldr	r3, .L19
 155:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
  42              		.loc 1 155 0
  43 0004 0446     		mov	r4, r0
  44              		.loc 1 160 0
  45 0006 9847     		blx	r3
  46              	.LVL1:
 161:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	{
 162:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		/* If this is the first call to malloc then the heap will require
 163:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		initialisation to setup the list of free blocks. */
 164:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		if( xHeapHasBeenInitialised == pdFALSE )
  47              		.loc 1 164 0
  48 0008 264A     		ldr	r2, .L19+4
  49 000a 1368     		ldr	r3, [r2, #0]
  50 000c 63B9     		cbnz	r3, .L2
  51              	.LBB2:
 165:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		{
 166:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			prvHeapInit();
  52              		.loc 1 166 0
  53 000e 2648     		ldr	r0, .L19+8
  54 0010 2649     		ldr	r1, .L19+12
  55 0012 274E     		ldr	r6, .L19+16
  56 0014 0360     		str	r3, [r0, #0]
  57              	.LVL2:
  58 0016 4FF40055 		mov	r5, #8192
  59 001a 81E82100 		stmia	r1, {r0, r5}
  60 001e 86E80A00 		stmia	r6, {r1, r3}
  61              	.LBE2:
 167:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			xHeapHasBeenInitialised = pdTRUE;
  62              		.loc 1 167 0
  63 0022 0123     		movs	r3, #1
  64              	.LBB3:
 166:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			prvHeapInit();
  65              		.loc 1 166 0
  66 0024 4560     		str	r5, [r0, #4]
  67              	.LBE3:
  68              		.loc 1 167 0
  69 0026 1360     		str	r3, [r2, #0]
  70              	.LVL3:
  71              	.L2:
 168:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		}
 169:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 170:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		/* The wanted size is increased so it can contain a xBlockLink
 171:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		structure in addition to the requested amount of bytes. */
 172:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		if( xWantedSize > 0 )
  72              		.loc 1 172 0
  73 0028 002C     		cmp	r4, #0
  74 002a 35D0     		beq	.L9
 173:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		{
 174:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			xWantedSize += heapSTRUCT_SIZE;
  75              		.loc 1 174 0
  76 002c 1034     		adds	r4, r4, #16
  77              	.LVL4:
 175:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 176:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			/* Ensure that blocks are always aligned to the required number of bytes. */
 177:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  78              		.loc 1 177 0
  79 002e 6307     		lsls	r3, r4, #29
 178:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			{
 179:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				/* Byte alignment required. */
 180:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  80              		.loc 1 180 0
  81 0030 1CBF     		itt	ne
  82 0032 24F00704 		bicne	r4, r4, #7
  83              	.LVL5:
  84 0036 0834     		addne	r4, r4, #8
  85              	.LVL6:
 181:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			}
 182:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		}
 183:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 184:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
  86              		.loc 1 184 0
  87 0038 621E     		subs	r2, r4, #1
  88 003a 41F6FE73 		movw	r3, #8190
  89 003e 9A42     		cmp	r2, r3
  90 0040 2CD8     		bhi	.L13
  91              	.LVL7:
 185:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		{
 186:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			/* Blocks are stored in byte order - traverse the list from the start
 187:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			(smallest) block until one of adequate size is found. */
 188:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			pxPreviousBlock = &xStart;
 189:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			pxBlock = xStart.pxNextFreeBlock;
  92              		.loc 1 189 0
  93 0042 1B48     		ldr	r0, .L19+16
  94 0044 0368     		ldr	r3, [r0, #0]
  95              	.LVL8:
 190:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
  96              		.loc 1 190 0
  97 0046 01E0     		b	.L6
  98              	.LVL9:
  99              	.L12:
 100 0048 1846     		mov	r0, r3
 191:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			{
 192:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pxPreviousBlock = pxBlock;
 193:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 101              		.loc 1 193 0
 102 004a 1346     		mov	r3, r2
 103              	.LVL10:
 104              	.L6:
 190:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 105              		.loc 1 190 0 discriminator 1
 106 004c 5968     		ldr	r1, [r3, #4]
 107 004e 8C42     		cmp	r4, r1
 108 0050 02D9     		bls	.L5
 190:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 109              		.loc 1 190 0 is_stmt 0 discriminator 2
 110 0052 1A68     		ldr	r2, [r3, #0]
 111 0054 002A     		cmp	r2, #0
 112 0056 F7D1     		bne	.L12
 113              	.L5:
 194:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			}
 195:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 196:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			/* If we found the end marker then a block of adequate size was not found. */
 197:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			if( pxBlock != &xEnd )
 114              		.loc 1 197 0 is_stmt 1
 115 0058 134A     		ldr	r2, .L19+8
 116 005a 9342     		cmp	r3, r2
 117 005c 1ED0     		beq	.L13
 198:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			{
 199:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				/* Return the memory space - jumping over the xBlockLink structure
 200:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				at its start. */
 201:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_S
 202:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 203:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				/* This block is being returned for use so must be taken our of the
 204:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				list of free blocks. */
 205:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 118              		.loc 1 205 0
 119 005e 1A68     		ldr	r2, [r3, #0]
 206:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 207:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				/* If the block is larger than required it can be split into two. */
 208:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 120              		.loc 1 208 0
 121 0060 0D1B     		subs	r5, r1, r4
 122 0062 202D     		cmp	r5, #32
 205:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 123              		.loc 1 205 0
 124 0064 0260     		str	r2, [r0, #0]
 201:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_S
 125              		.loc 1 201 0
 126 0066 03F11006 		add	r6, r3, #16
 127              	.LVL11:
 128              		.loc 1 208 0
 129 006a 0DD9     		bls	.L7
 209:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				{
 210:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					/* This block is to be split into two.  Create a new block
 211:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					following the number of bytes requested. The void cast is
 212:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					used to prevent byte alignment warnings from the compiler. */
 213:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 130              		.loc 1 213 0
 131 006c 1819     		adds	r0, r3, r4
 132              	.LVL12:
 133              	.LBB4:
 214:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 215:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					/* Calculate the sizes of two blocks split from the single
 216:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					block. */
 217:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 218:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 219:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 220:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					/* Insert the new block into the list of free blocks. */
 221:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 134              		.loc 1 221 0
 135 006e 104A     		ldr	r2, .L19+16
 136              	.LBE4:
 217:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 137              		.loc 1 217 0
 138 0070 4560     		str	r5, [r0, #4]
 218:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 139              		.loc 1 218 0
 140 0072 5C60     		str	r4, [r3, #4]
 141              	.LBB5:
 142              		.loc 1 221 0
 143 0074 4568     		ldr	r5, [r0, #4]
 144              	.LVL13:
 145 0076 00E0     		b	.L8
 146              	.LVL14:
 147              	.L14:
 148 0078 1A46     		mov	r2, r3
 149              	.LVL15:
 150              	.L8:
 151              		.loc 1 221 0 is_stmt 0 discriminator 1
 152 007a 1368     		ldr	r3, [r2, #0]
 153 007c 5968     		ldr	r1, [r3, #4]
 154 007e 8D42     		cmp	r5, r1
 155 0080 FAD8     		bhi	.L14
 156              		.loc 1 221 0 discriminator 3
 157 0082 0360     		str	r3, [r0, #0]
 158 0084 2146     		mov	r1, r4
 159 0086 1060     		str	r0, [r2, #0]
 160              	.LVL16:
 161              	.L7:
 162              	.LBE5:
 222:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				}
 223:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				
 224:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 				xFreeBytesRemaining -= pxBlock->xBlockSize;
 163              		.loc 1 224 0 is_stmt 1
 164 0088 0A4B     		ldr	r3, .L19+20
 165 008a 1A68     		ldr	r2, [r3, #0]
 166 008c 511A     		subs	r1, r2, r1
 167 008e 1960     		str	r1, [r3, #0]
 168              	.LVL17:
 169              	.L3:
 225:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			}
 226:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		}
 227:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	}
 228:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	xTaskResumeAll();
 170              		.loc 1 228 0
 171 0090 094B     		ldr	r3, .L19+24
 172 0092 9847     		blx	r3
 173              	.LVL18:
 229:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 230:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 231:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	{
 232:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		if( pvReturn == NULL )
 233:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		{
 234:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			extern void vApplicationMallocFailedHook( void );
 235:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			vApplicationMallocFailedHook();
 236:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		}
 237:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	}
 238:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	#endif
 239:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 240:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	return pvReturn;
 241:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** }
 174              		.loc 1 241 0
 175 0094 3046     		mov	r0, r6
 176 0096 70BD     		pop	{r4, r5, r6, pc}
 177              	.LVL19:
 178              	.L9:
 158:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** void *pvReturn = NULL;
 179              		.loc 1 158 0
 180 0098 2646     		mov	r6, r4
 181 009a F9E7     		b	.L3
 182              	.L13:
 183 009c 0026     		movs	r6, #0
 184 009e F7E7     		b	.L3
 185              	.L20:
 186              		.align	2
 187              	.L19:
 188 00a0 00000000 		.word	vTaskSuspendAll
 189 00a4 00000000 		.word	.LANCHOR1
 190 00a8 00000000 		.word	.LANCHOR3
 191 00ac 00000000 		.word	.LANCHOR2
 192 00b0 00000000 		.word	.LANCHOR0
 193 00b4 00000000 		.word	.LANCHOR4
 194 00b8 00000000 		.word	xTaskResumeAll
 195              		.cfi_endproc
 196              	.LFE2:
 198              		.section	.text.vPortFree,"ax",%progbits
 199              		.align	2
 200              		.global	vPortFree
 201              		.thumb
 202              		.thumb_func
 204              	vPortFree:
 205              	.LFB3:
 242:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*-----------------------------------------------------------*/
 243:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 244:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** void vPortFree( void *pv )
 245:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
 206              		.loc 1 245 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL20:
 211 0000 38B5     		push	{r3, r4, r5, lr}
 212              	.LCFI1:
 213              		.cfi_def_cfa_offset 16
 214              		.cfi_offset 3, -16
 215              		.cfi_offset 4, -12
 216              		.cfi_offset 5, -8
 217              		.cfi_offset 14, -4
 246:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** unsigned char *puc = ( unsigned char * ) pv;
 247:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** xBlockLink *pxLink;
 248:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 249:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	if( pv )
 218              		.loc 1 249 0
 219 0002 0546     		mov	r5, r0
 220 0004 A8B1     		cbz	r0, .L21
 221              	.LVL21:
 250:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	{
 251:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		/* The memory being freed will have an xBlockLink structure immediately
 252:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		before it. */
 253:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		puc -= heapSTRUCT_SIZE;
 254:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 255:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 256:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		pxLink = ( void * ) puc;
 257:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 258:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		vTaskSuspendAll();
 222              		.loc 1 258 0
 223 0006 0B4B     		ldr	r3, .L28
 224 0008 9847     		blx	r3
 225              	.LVL22:
 256:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		pxLink = ( void * ) puc;
 226              		.loc 1 256 0
 227 000a A5F11000 		sub	r0, r5, #16
 228              	.LVL23:
 229              	.LBB6:
 259:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		{
 260:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			/* Add this block to the list of free blocks. */
 261:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 230              		.loc 1 261 0
 231 000e 55F80C4C 		ldr	r4, [r5, #-12]
 232              	.LVL24:
 233 0012 094A     		ldr	r2, .L28+4
 234 0014 00E0     		b	.L23
 235              	.LVL25:
 236              	.L24:
 237 0016 1A46     		mov	r2, r3
 238              	.LVL26:
 239              	.L23:
 240              		.loc 1 261 0 is_stmt 0 discriminator 1
 241 0018 1368     		ldr	r3, [r2, #0]
 242 001a 5968     		ldr	r1, [r3, #4]
 243 001c 8C42     		cmp	r4, r1
 244 001e FAD8     		bhi	.L24
 245              	.LBE6:
 262:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 246              		.loc 1 262 0 is_stmt 1 discriminator 3
 247 0020 0649     		ldr	r1, .L28+8
 248              	.LBB7:
 261:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 249              		.loc 1 261 0 discriminator 3
 250 0022 45F8103C 		str	r3, [r5, #-16]
 251              	.LBE7:
 252              		.loc 1 262 0 discriminator 3
 253 0026 0B68     		ldr	r3, [r1, #0]
 254              	.LBB8:
 261:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 255              		.loc 1 261 0 discriminator 3
 256 0028 1060     		str	r0, [r2, #0]
 257              	.LBE8:
 258              		.loc 1 262 0 discriminator 3
 259 002a 1C19     		adds	r4, r3, r4
 260              	.LVL27:
 263:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		}
 264:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 		xTaskResumeAll();
 261              		.loc 1 264 0 discriminator 3
 262 002c 044B     		ldr	r3, .L28+12
 262:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 263              		.loc 1 262 0 discriminator 3
 264 002e 0C60     		str	r4, [r1, #0]
 265              		.loc 1 264 0 discriminator 3
 266 0030 9847     		blx	r3
 267              	.LVL28:
 268              	.L21:
 269 0032 38BD     		pop	{r3, r4, r5, pc}
 270              	.L29:
 271              		.align	2
 272              	.L28:
 273 0034 00000000 		.word	vTaskSuspendAll
 274 0038 00000000 		.word	.LANCHOR0
 275 003c 00000000 		.word	.LANCHOR4
 276 0040 00000000 		.word	xTaskResumeAll
 277              		.cfi_endproc
 278              	.LFE3:
 280              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 281              		.align	2
 282              		.global	xPortGetFreeHeapSize
 283              		.thumb
 284              		.thumb_func
 286              	xPortGetFreeHeapSize:
 287              	.LFB4:
 265:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	}
 266:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** }
 267:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*-----------------------------------------------------------*/
 268:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 269:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** size_t xPortGetFreeHeapSize( void )
 270:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
 288              		.loc 1 270 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 271:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 	return xFreeBytesRemaining;
 293              		.loc 1 271 0
 294 0000 014B     		ldr	r3, .L31
 272:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** }
 295              		.loc 1 272 0
 296 0002 1868     		ldr	r0, [r3, #0]
 297 0004 7047     		bx	lr
 298              	.L32:
 299 0006 00BF     		.align	2
 300              	.L31:
 301 0008 00000000 		.word	.LANCHOR4
 302              		.cfi_endproc
 303              	.LFE4:
 305              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 306              		.align	2
 307              		.global	vPortInitialiseBlocks
 308              		.thumb
 309              		.thumb_func
 311              	vPortInitialiseBlocks:
 312              	.LFB5:
 273:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** /*-----------------------------------------------------------*/
 274:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** 
 275:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** void vPortInitialiseBlocks( void )
 276:/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/heap_2.c **** {
 313              		.loc 1 276 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318 0000 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE5:
 322 0002 00BF     		.section	.bss.xHeapHasBeenInitialised.4857,"aw",%nobits
 323              		.align	2
 324              		.set	.LANCHOR1,. + 0
 327              	xHeapHasBeenInitialised.4857:
 328 0000 00000000 		.space	4
 329              		.section	.bss.xHeap,"aw",%nobits
 330              		.align	3
 331              		.set	.LANCHOR2,. + 0
 334              	xHeap:
 335 0000 00000000 		.space	8192
 335      00000000 
 335      00000000 
 335      00000000 
 335      00000000 
 336              		.section	.bss.xStart,"aw",%nobits
 337              		.align	2
 338              		.set	.LANCHOR0,. + 0
 341              	xStart:
 342 0000 00000000 		.space	8
 342      00000000 
 343              		.section	.data.xFreeBytesRemaining,"aw",%progbits
 344              		.align	2
 345              		.set	.LANCHOR4,. + 0
 348              	xFreeBytesRemaining:
 349 0000 00200000 		.word	8192
 350              		.section	.bss.xEnd,"aw",%nobits
 351              		.align	2
 352              		.set	.LANCHOR3,. + 0
 355              	xEnd:
 356 0000 00000000 		.space	8
 356      00000000 
 357              		.text
 358              	.Letext0:
 359              		.file 2 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/include/stddef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 heap_2.c
     /tmp/ccWaW2jU.s:20     .text.pvPortMalloc:00000000 $t
     /tmp/ccWaW2jU.s:25     .text.pvPortMalloc:00000000 pvPortMalloc
     /tmp/ccWaW2jU.s:188    .text.pvPortMalloc:000000a0 $d
     /tmp/ccWaW2jU.s:199    .text.vPortFree:00000000 $t
     /tmp/ccWaW2jU.s:204    .text.vPortFree:00000000 vPortFree
     /tmp/ccWaW2jU.s:273    .text.vPortFree:00000034 $d
     /tmp/ccWaW2jU.s:281    .text.xPortGetFreeHeapSize:00000000 $t
     /tmp/ccWaW2jU.s:286    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
     /tmp/ccWaW2jU.s:301    .text.xPortGetFreeHeapSize:00000008 $d
     /tmp/ccWaW2jU.s:306    .text.vPortInitialiseBlocks:00000000 $t
     /tmp/ccWaW2jU.s:311    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
     /tmp/ccWaW2jU.s:323    .bss.xHeapHasBeenInitialised.4857:00000000 $d
     /tmp/ccWaW2jU.s:327    .bss.xHeapHasBeenInitialised.4857:00000000 xHeapHasBeenInitialised.4857
     /tmp/ccWaW2jU.s:330    .bss.xHeap:00000000 $d
     /tmp/ccWaW2jU.s:334    .bss.xHeap:00000000 xHeap
     /tmp/ccWaW2jU.s:337    .bss.xStart:00000000 $d
     /tmp/ccWaW2jU.s:341    .bss.xStart:00000000 xStart
     /tmp/ccWaW2jU.s:344    .data.xFreeBytesRemaining:00000000 $d
     /tmp/ccWaW2jU.s:348    .data.xFreeBytesRemaining:00000000 xFreeBytesRemaining
     /tmp/ccWaW2jU.s:351    .bss.xEnd:00000000 $d
     /tmp/ccWaW2jU.s:355    .bss.xEnd:00000000 xEnd
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
