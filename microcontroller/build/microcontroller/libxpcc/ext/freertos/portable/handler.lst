   1              	# 1 "/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx"
   1              	/*
   1              	...
   0              	
   2              	    FreeRTOS V7.0.1 - Copyright (C) 2011 Real Time Engineers Ltd.
   3              		
   4              	
   5              	    ***************************************************************************
   6              	     *                                                                       *
   7              	     *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8              	     *    Complete, revised, and edited pdf reference manuals are also       *
   9              	     *    available.                                                         *
  10              	     *                                                                       *
  11              	     *    Purchasing FreeRTOS documentation will not only help you, by       *
  12              	     *    ensuring you get running as quickly as possible and with an        *
  13              	     *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14              	     *    the FreeRTOS project to continue with its mission of providing     *
  15              	     *    professional grade, cross platform, de facto standard solutions    *
  16              	     *    for microcontrollers - completely free of charge!                  *
  17              	     *                                                                       *
  18              	     *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19              	     *                                                                       *
  20              	     *    Thank you for using FreeRTOS, and thank you for your support!      *
  21              	     *                                                                       *
  22              	    ***************************************************************************
  23              	
  24              	
  25              	    This file is part of the FreeRTOS distribution.
  26              	
  27              	    FreeRTOS is free software; you can redistribute it and/or modify it under
  28              	    the terms of the GNU General Public License (version 2) as published by the
  29              	    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30              	    >>>NOTE<<< The modification to the GPL is included to allow you to
  31              	    distribute a combined work that includes FreeRTOS without being obliged to
  32              	    provide the source code for proprietary components outside of the FreeRTOS
  33              	    kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34              	    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35              	    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36              	    more details. You should have received a copy of the GNU General Public
  37              	    License and the FreeRTOS license exception along with FreeRTOS; if not it
  38              	    can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39              	    by writing to Richard Barry, contact details for whom are available on the
  40              	    FreeRTOS WEB site.
  41              	
  42              	    1 tab == 4 spaces!
  43              	
  44              	    http://www.FreeRTOS.org - Documentation, latest information, license and
  45              	    contact details.
  46              	
  47              	    http://www.SafeRTOS.com - A version that is certified for use in safety
  48              	    critical systems.
  49              	
  50              	    http://www.OpenRTOS.com - Commercial support, development, porting,
  51              	    licensing and training services.
  52              	*/
  53              	
  54              	#include "FreeRTOSConfig.h"
   1              	/*
  55              	
  56              		.section .text
  57              		.syntax	unified
  58              		.align	4
  59              		.thumb
  60              		
  61              		// ------------------------------------------------------------------------
  62              		.global	SVC_Handler
  64              		.thumb_func
  65              		.func	SVC_Handler
  66              	SVC_Handler:
  67 0000 224B     		ldr		r3, =pxCurrentTCB	/* Load address of pxCurrentTCB */
  68 0002 1968     		ldr		r1, [r3]
  69 0004 0868     		ldr		r0, [r1]			/* The first item in pxCurrentTCB is the task top of stack. */
  70              	#if defined(STM32F4XX)
  71 0006 50F804EB 		ldmia	r0!, {r14}			/* Pop the EXC_RETURN value */
  72              	#endif
  73 000a B0E8F00F 		ldmia	r0!, {r4-r11}		/* Pop the registers that are not automatically
  74              									   saved on exception entry and the critical nesting count. */
  75 000e 80F30988 		msr		psp, r0				/* Restore the task stack pointer. */
  76 0012 4FF00000 		mov		r0, #0
  77 0016 80F31188 		msr		basepri, r0
  78              	#if !defined(STM32F4XX)
  79              		orr		r14, #0xd			/* TODO why not needed here? */
  80              	#endif
  81 001a 7047     		bx		r14
  82              		.endfunc
  83              	
  84              		// ------------------------------------------------------------------------
  85              		.global	vPortStartFirstTask
  87              		.thumb_func
  88              		.func	vPortStartFirstTask
  89              	vPortStartFirstTask:
  90              	@	ldr		r0, =0xE000ED08		/* Use the NVIC offset register to locate the stack. */
  91              	@	ldr		r0, [r0]
  92              	@	ldr		r0, [r0]
  93              	@	msr		msp, r0				/* Set the msp back to the start of the stack. */
  94 001c 1C48     		ldr		r0, =__handler_stack_top
  95 001e 80F30888 		msr		msp, r0
  96 0022 1C48     		ldr		r0, =__thread_stack_top
  97 0024 80F30988 		msr		psp, r0
  98 0028 4FF00200 		mov		r0, #2				/* enable process stack pointer */
  99 002c 80F31488 		msr		control, r0
 100 0030 62B6     		cpsie	i					/* Globally enable interrupts. */
 101 0032 00DF     		svc		0					/* System call to start first task. */
 102 0034 00BF     		nop
 103              		.endfunc
 104              	
 105              	// ------------------------------------------------------------------------
 106              		.global	PendSV_Handler
 108              		.thumb_func
 109              		.func	PendSV_Handler
 110              	PendSV_Handler:
 111 0036 EFF30980 		mrs		r0, psp
 112              		
 113 003a 144B     		ldr		r3, =pxCurrentTCB	/* Get the location of the current TCB. */
 114 003c 1A68     		ldr		r2, [r3]
 115              		
 116 003e 20E9F00F 		stmdb	r0!, {r4-r11}		/* Save the remaining registers. */
 117              	#if defined(STM32F4XX)
 118 0042 1EF0100F 		tst		r14, #0x10			/* Check for extended frame.. */
 119 0046 08BF     		it		eq
 120 0048 20ED108A 		vstmdbeq r0!, {s16-s31}		/* Save the high FPU registers (will also trigger a lazy-save) */
 121 004c 40F804ED 		stmdb	r0!, {r14}			/* Save the EXC_RETURN value */
 122              	#endif
 123 0050 1060     		str		r0, [r2]			/* Save the new top of stack into the first member of the TCB. */
 124              		
 125 0052 2DE90840 		stmdb	sp!, {r3, r14}
 126 0056 4FF0B000 		mov		r0, configMAX_SYSCALL_INTERRUPT_PRIORITY
 127 005a 80F31188 		msr		basepri, r0
 128 005e FFF7FEFF 		bl		vTaskSwitchContext
 129 0062 4FF00000 		mov		r0, #0
 130 0066 80F31188 		msr		basepri, r0
 131 006a BDE80840 		ldmia	sp!, {r3, r14}		/* Restore the context, including the critical nesting count. */
 132              		
 133 006e 1968     		ldr		r1, [r3]
 134 0070 0868     		ldr		r0, [r1]			/* The first item in pxCurrentTCB is the task top of stack. */
 135              	#if defined(STM32F4XX)
 136 0072 50F804EB 		ldmia	r0!, {r14}			/* Pop the EXC_RETURN value */
 137 0076 1EF0100F 		tst		r14, #0x10			/* Check for extended frame.. */
 138 007a 08BF     		it		eq
 139 007c B0EC108A 		vldmiaeq r0!, {s16-s31}		/* Pop the high FPU registers.*/
 140              	#endif
 141 0080 B0E8F00F 		ldmia	r0!, {r4-r11}		/* Pop the registers. */
 142 0084 80F30988 		msr		psp, r0
 143 0088 7047     		bx		r14
 144 008a 00000000 		.endfunc
 144      00000000 
 144      00000000 
 144      0000AFF3 
 144      0080AFF3 
DEFINED SYMBOLS
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:58     .text:00000000 $t
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:66     .text:00000000 SVC_Handler
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:89     .text:0000001c vPortStartFirstTask
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:110    .text:00000036 PendSV_Handler
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:144    .text:0000008a $d
                   .debug_aranges:0000000c $d
/home/jonas/warwick/3dProfilometer/xpcc/ext/freertos/portable/handler.sx:144    .text:00000098 $t

UNDEFINED SYMBOLS
pxCurrentTCB
__handler_stack_top
__thread_stack_top
vTaskSwitchContext
