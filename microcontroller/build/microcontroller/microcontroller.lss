
build/microcontroller/microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000188  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .fastcode     00000030  20000000  08000190  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008ed0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008e0  08009090  08009090  00019090  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000634  20000030  08009970  00020030  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001234  20000664  08009fa4  00020664  2**2
                  ALLOC
  6 .stack        00000800  20001898  08009fa4  00021898  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001328  00000000  00000000  00020698  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000372c0  00000000  00000000  000219c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008af8  00000000  00000000  00058c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ebdd  00000000  00000000  00061778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000301c  00000000  00000000  00070358  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000b423  00000000  00000000  00073374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001337f  00000000  00000000  0007e797  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .ARM.attributes 00000035  00000000  00000000  00091b16  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00007630  00000000  00000000  00091b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .fastcode:

20000000 <_delay_us>:
	.func	_delay_us
_delay_us:
	// Example:
	// F_CPU / 1000000 = cycles per us => 72,000,000 / 1,000,000 = 72
	// 72 / 6 cycles per loop = 12
	mov		r1, #(F_CPU / 1000000 / 6)
20000000:	f04f 011c 	mov.w	r1, #28
	muls	r1, r0, r1
20000004:	4341      	muls	r1, r0
1:
	itt		ne
20000006:	bf1c      	itt	ne
	subsne	r1, r1, #1
20000008:	f1b1 0101 	subsne.w	r1, r1, #1
	bne		1b
2000000c:	e7fb      	bne.n	20000006 <_delay_us+0x6>
	bx		lr
2000000e:	4770      	bx	lr

20000010 <_delay_ms>:
	.type	_delay_ms, %function
	.thumb_func
	.func	_delay_ms
_delay_ms:
	// see _delay_us
	ldr		r1, =(F_CPU / 1000 / 6)
20000010:	4903      	ldr	r1, [pc, #12]	; (20000020 <_delay_ms+0x10>)
	muls	r1, r0, r1
20000012:	4341      	muls	r1, r0
1:
	itt		ne
20000014:	bf1c      	itt	ne
	subsne	r1, r1, #1
20000016:	f1b1 0101 	subsne.w	r1, r1, #1
	bne		1b
2000001a:	e7fb      	bne.n	20000014 <_delay_ms+0x4>
	bx		lr
2000001c:	4770      	bx	lr
2000001e:	0000      	.short	0x0000
	.type	_delay_ms, %function
	.thumb_func
	.func	_delay_ms
_delay_ms:
	// see _delay_us
	ldr		r1, =(F_CPU / 1000 / 6)
20000020:	00006d60 	.word	0x00006d60
20000024:	f3af 8000 	nop.w
20000028:	f3af 8000 	nop.w
2000002c:	f3af 8000 	nop.w

Disassembly of section .text:

080001c0 <_ZN7Trigger6sampleEv>:
int lastYPos = 0;
bool enabled = true;
}


void Trigger::sample(){
 80001c0:	4b50b5f8 	.word	0x4b50b5f8
	if(!enabled)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	b903      	cbnz	r3, 80001ca <_ZN7Trigger6sampleEv+0xa>
 80001c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return;

	int xnow = Control<X>::getIsPosition();
 80001ca:	4b4f      	ldr	r3, [pc, #316]	; (8000308 <_ZN7Trigger6sampleEv+0x148>)
 80001cc:	4798      	blx	r3
	int ynow = Control<Y>::getIsPosition();
 80001ce:	4b4f      	ldr	r3, [pc, #316]	; (800030c <_ZN7Trigger6sampleEv+0x14c>)

void Trigger::sample(){
	if(!enabled)
		return;

	int xnow = Control<X>::getIsPosition();
 80001d0:	4604      	mov	r4, r0
	int ynow = Control<Y>::getIsPosition();
 80001d2:	4798      	blx	r3

	if(abs(xnow - lastXPos) >= thresholdX ||
 80001d4:	4b4e      	ldr	r3, [pc, #312]	; (8000310 <_ZN7Trigger6sampleEv+0x150>)
 80001d6:	494f      	ldr	r1, [pc, #316]	; (8000314 <_ZN7Trigger6sampleEv+0x154>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	6809      	ldr	r1, [r1, #0]
 80001dc:	1aa2      	subs	r2, r4, r2
 80001de:	2a00      	cmp	r2, #0
 80001e0:	bfb8      	it	lt
 80001e2:	4252      	neglt	r2, r2
 80001e4:	4605428a 	.word	0x4605428a
void Trigger::sample(){
	if(!enabled)
		return;

	int xnow = Control<X>::getIsPosition();
	int ynow = Control<Y>::getIsPosition();
 80001e8:	4a4b      	ldr	r2, [pc, #300]	; (8000318 <_ZN7Trigger6sampleEv+0x158>)

	if(abs(xnow - lastXPos) >= thresholdX ||
 80001ea:	da08      	.short	0xda08
	   abs(ynow - lastYPos) >= thresholdY){
 80001ec:	6811      	ldr	r1, [r2, #0]
		return;

	int xnow = Control<X>::getIsPosition();
	int ynow = Control<Y>::getIsPosition();

	if(abs(xnow - lastXPos) >= thresholdX ||
 80001ee:	484b      	ldr	r0, [pc, #300]	; (800031c <_ZN7Trigger6sampleEv+0x15c>)
	   abs(ynow - lastYPos) >= thresholdY){
 80001f0:	1a69      	subs	r1, r5, r1
		return;

	int xnow = Control<X>::getIsPosition();
	int ynow = Control<Y>::getIsPosition();

	if(abs(xnow - lastXPos) >= thresholdX ||
 80001f2:	6800      	ldr	r0, [r0, #0]
	   abs(ynow - lastYPos) >= thresholdY){
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bfb8      	.short	0xbfb8
 80001f8:	4249      	neglt	r1, r1
		return;

	int xnow = Control<X>::getIsPosition();
	int ynow = Control<Y>::getIsPosition();

	if(abs(xnow - lastXPos) >= thresholdX ||
 80001fa:	4281      	cmp	r1, r0
 80001fc:	601cdbe4 	.word	0x601cdbe4
	   abs(ynow - lastYPos) >= thresholdY){
		//send output
		lastXPos = xnow;
		lastYPos = ynow;
		if(Laser::DoubleBuffer::good()){
 8000200:	4b47      	ldr	r3, [pc, #284]	; (8000320 <_ZN7Trigger6sampleEv+0x160>)

	if(abs(xnow - lastXPos) >= thresholdX ||
	   abs(ynow - lastYPos) >= thresholdY){
		//send output
		lastXPos = xnow;
		lastYPos = ynow;
 8000202:	6015      	str	r5, [r2, #0]
		if(Laser::DoubleBuffer::good()){
 8000204:	4798      	blx	r3
 8000206:	2800      	cmp	r0, #0
 8000208:	d044      	beq.n	8000294 <_ZN7Trigger6sampleEv+0xd4>
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800020a:	4f46      	.short	0x4f46
 800020c:	4e46      	ldr	r6, [pc, #280]	; (8000328 <_ZN7Trigger6sampleEv+0x168>)
 800020e:	4638      	.short	0x4638
 8000210:	4621      	mov	r1, r4
 8000212:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b00      	cmp	r3, #0
 8000218:	2b02d061 	.word	0x2b02d061
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 800021c:	4638      	mov	r0, r7
 800021e:	4943      	.short	0x4943
 8000220:	bf0c      	ite	eq
 8000222:	4b43      	ldreq	r3, [pc, #268]	; (8000330 <_ZN7Trigger6sampleEv+0x170>)
			}
			else {
				this->writeHex(s);
 8000224:	4b43      	ldrne	r3, [pc, #268]	; (8000334 <_ZN7Trigger6sampleEv+0x174>)
 8000226:	4798      	.short	0x4798
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8000228:	4c3e      	ldr	r4, [pc, #248]	; (8000324 <_ZN7Trigger6sampleEv+0x164>)
 800022a:	4629      	mov	r1, r5
 800022c:	47b04620 	.word	0x47b04620
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b00      	.short	0x2b00
 8000234:	d04d      	beq.n	80002d2 <_ZN7Trigger6sampleEv+0x112>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8000236:	2b02      	.short	0x2b02
				this->writeBin(s);
 8000238:	4620      	mov	r0, r4
 800023a:	493c      	.short	0x493c
 800023c:	bf0c      	ite	eq
 800023e:	4b3c      	.short	0x4b3c
			}
			else {
				this->writeHex(s);
 8000240:	4b3c      	ldrne	r3, [pc, #240]	; (8000334 <_ZN7Trigger6sampleEv+0x174>)
 8000242:	4798      	.short	0x4798
			mout << xnow << "," << ynow << ",";
			//measurement is exactly 8 chars long
			const char* p = Laser::DoubleBuffer::get()+3;
 8000244:	4b3c      	ldr	r3, [pc, #240]	; (8000338 <_ZN7Trigger6sampleEv+0x178>)
 8000246:	681c      	.short	0x681c
			for(int i = 0; i < 8; i++){
 8000248:	2500      	movs	r5, #0
		lastXPos = xnow;
		lastYPos = ynow;
		if(Laser::DoubleBuffer::good()){
			mout << xnow << "," << ynow << ",";
			//measurement is exactly 8 chars long
			const char* p = Laser::DoubleBuffer::get()+3;
 800024a:	3403      	.short	0x3403
 800024c:	e00a      	b.n	8000264 <_ZN7Trigger6sampleEv+0xa4>
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800024e:	2b02      	.short	0x2b02
				this->writeBin(v);
 8000250:	bf03      	ittte	eq
 8000252:	4630      	.short	0x4630
 8000254:	4611      	moveq	r1, r2
 8000256:	4b39      	.short	0x4b39
			}
			else {
				this->writeHex(v);
 8000258:	4b39      	ldrne	r3, [pc, #228]	; (8000340 <_ZN7Trigger6sampleEv+0x180>)
			for(int i = 0; i < 8; i++){
 800025a:	3501      	.short	0x3501
 800025c:	4798      	blx	r3
				mout << *p;
				p++;
 800025e:	3401      	.short	0x3401
		lastYPos = ynow;
		if(Laser::DoubleBuffer::good()){
			mout << xnow << "," << ynow << ",";
			//measurement is exactly 8 chars long
			const char* p = Laser::DoubleBuffer::get()+3;
			for(int i = 0; i < 8; i++){
 8000260:	2d08      	cmp	r5, #8
 8000262:	d00e      	.short	0xd00e
	thresholdY = threshold;
}

void Trigger::enable(bool enable){
	enabled = enable;
}
 8000264:	7822      	ldrb	r2, [r4, #0]
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8000266:	4e2f      	.short	0x4e2f
 8000268:	687b      	ldr	r3, [r7, #4]
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 800026a:	4611      	.short	0x4611
 800026c:	4630      	mov	r0, r6
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800026e:	2b00      	.short	0x2b00
 8000270:	d1ed      	bne.n	800024e <_ZN7Trigger6sampleEv+0x8e>
				this->device->write(v);
 8000272:	6830      	.short	0x6830
 8000274:	6803      	ldr	r3, [r0, #0]
		lastYPos = ynow;
		if(Laser::DoubleBuffer::good()){
			mout << xnow << "," << ynow << ",";
			//measurement is exactly 8 chars long
			const char* p = Laser::DoubleBuffer::get()+3;
			for(int i = 0; i < 8; i++){
 8000276:	3501      	.short	0x3501
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	4798      	.short	0x4798
				mout << *p;
				p++;
 800027c:	3401      	adds	r4, #1
		lastYPos = ynow;
		if(Laser::DoubleBuffer::good()){
			mout << xnow << "," << ynow << ",";
			//measurement is exactly 8 chars long
			const char* p = Laser::DoubleBuffer::get()+3;
			for(int i = 0; i < 8; i++){
 800027e:	2d08      	.short	0x2d08
 8000280:	d1f0      	bne.n	8000264 <_ZN7Trigger6sampleEv+0xa4>
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8000282:	687b      	.short	0x687b
 8000284:	4827      	ldr	r0, [pc, #156]	; (8000324 <_ZN7Trigger6sampleEv+0x164>)
 8000286:	b9db      	.short	0xb9db
				this->device->write(v);
 8000288:	6800      	ldr	r0, [r0, #0]
 800028a:	6803      	.short	0x6803
 800028c:	210a      	movs	r1, #10
 800028e:	689b      	.short	0x689b
 8000290:	4798      	blx	r3
 8000292:	bdf8      	.short	0xbdf8
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8000294:	4f2b      	ldr	r7, [pc, #172]	; (8000344 <_ZN7Trigger6sampleEv+0x184>)
 8000296:	4e24      	.short	0x4e24
 8000298:	4638      	mov	r0, r7
 800029a:	4621      	.short	0x4621
 800029c:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800029e:	687b      	.short	0x687b
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d028      	.short	0xd028
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80002a4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80002a6:	4638      	.short	0x4638
 80002a8:	4920      	ldr	r1, [pc, #128]	; (800032c <_ZN7Trigger6sampleEv+0x16c>)
 80002aa:	bf0c      	.short	0xbf0c
 80002ac:	4b20      	ldreq	r3, [pc, #128]	; (8000330 <_ZN7Trigger6sampleEv+0x170>)
			}
			else {
				this->writeHex(s);
 80002ae:	4b21      	.short	0x4b21
 80002b0:	4798      	blx	r3	; unpredictable branch in IT block

		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80002b2:	4c24      	.short	0x4c24
 80002b4:	4629      	mov	r1, r5
 80002b6:	4620      	.short	0x4620
 80002b8:	47b0      	blx	r6	; unpredictable branch in IT block

		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80002ba:	687b      	.short	0x687b
 80002bc:	b1ab      	cbz	r3, 80002ea <_ZN7Trigger6sampleEv+0x12a>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80002be:	4620      	movne	r0, r4
 80002c0:	2b02210a 	.word	0x2b02210a
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80002c4:	d002      	beq.n	80002cc <_ZN7Trigger6sampleEv+0x10c>
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 80002c6:	4b1e      	.short	0x4b1e
 80002c8:	4798      	blx	r3
 80002ca:	bdf8      	.short	0xbdf8
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <_ZN7Trigger6sampleEv+0x17c>)
 80002ce:	4798      	.short	0x4798
 80002d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80002d2:	6820      	.short	0x6820
 80002d4:	4915      	ldr	r1, [pc, #84]	; (800032c <_ZN7Trigger6sampleEv+0x16c>)
 80002d6:	6803      	.short	0x6803
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	4798      	.short	0x4798
 80002dc:	e7b2      	b.n	8000244 <_ZN7Trigger6sampleEv+0x84>
 80002de:	6838      	.short	0x6838
 80002e0:	4912      	ldr	r1, [pc, #72]	; (800032c <_ZN7Trigger6sampleEv+0x16c>)
 80002e2:	6803      	.short	0x6803
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4798      	.short	0x4798
 80002e8:	e79e      	b.n	8000228 <_ZN7Trigger6sampleEv+0x68>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80002ea:	6820      	.short	0x6820
 80002ec:	6803      	ldr	r3, [r0, #0]
 80002ee:	210a      	.short	0x210a
 80002f0:	4798689b 	.word	0x4798689b
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80002f6:	6838      	.short	0x6838
 80002f8:	490c      	ldr	r1, [pc, #48]	; (800032c <_ZN7Trigger6sampleEv+0x16c>)
 80002fa:	6803      	.short	0x6803
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4798      	.short	0x4798
 8000300:	e7d7      	b.n	80002b2 <_ZN7Trigger6sampleEv+0xf2>
 8000302:	bf00      	.short	0xbf00
 8000304:	0034      	movs	r4, r6
 8000306:	2000      	.short	0x2000
 8000308:	0e89      	lsrs	r1, r1, #26
 800030a:	0800      	.short	0x0800
 800030c:	0e81      	lsrs	r1, r0, #26
 800030e:	0800      	.short	0x0800
 8000310:	0664      	lsls	r4, r4, #25
 8000312:	2000      	.short	0x2000
 8000314:	0038      	movs	r0, r7
 8000316:	2000      	.short	0x2000
 8000318:	0668      	lsls	r0, r5, #25
 800031a:	2000      	.short	0x2000
 800031c:	0030      	movs	r0, r6
 800031e:	2000      	.short	0x2000
 8000320:	1ee5      	subs	r5, r4, #3
 8000322:	0800      	.short	0x0800
 8000324:	117c      	asrs	r4, r7, #5
 8000326:	2000      	.short	0x2000
 8000328:	78f9      	ldrb	r1, [r7, #3]
 800032a:	0800      	.short	0x0800
 800032c:	9090      	str	r0, [sp, #576]	; 0x240
 800032e:	0800      	.short	0x0800
 8000330:	79ed      	ldrb	r5, [r5, #7]
 8000332:	0800      	.short	0x0800
 8000334:	79a9      	ldrb	r1, [r5, #6]
 8000336:	0800      	.short	0x0800
 8000338:	004c      	lsls	r4, r1, #1
 800033a:	2000      	.short	0x2000
 800033c:	7af5      	ldrb	r5, [r6, #11]
 800033e:	0800      	.short	0x0800
 8000340:	7ac1      	ldrb	r1, [r0, #11]
 8000342:	0800      	.short	0x0800
 8000344:	13a4      	asrs	r4, r4, #14
 8000346:	2000      	.short	0x2000

08000348 <_ZN7Trigger12forceTriggerEv>:
			pout << xnow << "," << ynow << endl;
		}
	}
}

void Trigger::forceTrigger(){
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int xnow = Control<X>::getIsPosition();
 800034a:	4b43      	.short	0x4b43
 800034c:	4798      	blx	r3
	int ynow = Control<Y>::getIsPosition();
 800034e:	4b43      	.short	0x4b43
	}
}

void Trigger::forceTrigger(){

	int xnow = Control<X>::getIsPosition();
 8000350:	4606      	mov	r6, r0
	int ynow = Control<Y>::getIsPosition();
 8000352:	4798      	.short	0x4798
		//send output
	lastXPos = xnow;
 8000354:	4b42      	ldr	r3, [pc, #264]	; (8000460 <_ZN7Trigger12forceTriggerEv+0x118>)
 8000356:	601e      	.short	0x601e
	lastYPos = ynow;
 8000358:	4b42      	ldr	r3, [pc, #264]	; (8000464 <_ZN7Trigger12forceTriggerEv+0x11c>)
 800035a:	6018      	.short	0x6018

	if(Laser::DoubleBuffer::good()){
 800035c:	4b42      	ldr	r3, [pc, #264]	; (8000468 <_ZN7Trigger12forceTriggerEv+0x120>)
}

void Trigger::forceTrigger(){

	int xnow = Control<X>::getIsPosition();
	int ynow = Control<Y>::getIsPosition();
 800035e:	4605      	.short	0x4605
		//send output
	lastXPos = xnow;
	lastYPos = ynow;

	if(Laser::DoubleBuffer::good()){
 8000360:	4798      	blx	r3
 8000362:	2800      	.short	0x2800
 8000364:	d044      	beq.n	80003f0 <_ZN7Trigger12forceTriggerEv+0xa8>
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8000366:	4f41      	.short	0x4f41
 8000368:	4c41      	ldr	r4, [pc, #260]	; (8000470 <_ZN7Trigger12forceTriggerEv+0x128>)
 800036a:	4638      	.short	0x4638
 800036c:	4631      	mov	r1, r6
 800036e:	47a0      	.short	0x47a0
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b00      	.short	0x2b00
 8000374:	d058      	beq.n	8000428 <_ZN7Trigger12forceTriggerEv+0xe0>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8000376:	2b02      	.short	0x2b02
				this->writeBin(s);
 8000378:	4638      	mov	r0, r7
 800037a:	493e      	.short	0x493e
 800037c:	bf0c      	ite	eq
 800037e:	4b3e      	.short	0x4b3e
			}
			else {
				this->writeHex(s);
 8000380:	4b3e      	ldrne	r3, [pc, #248]	; (800047c <_ZN7Trigger12forceTriggerEv+0x134>)
 8000382:	4798      	.short	0x4798
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8000384:	4e39      	ldr	r6, [pc, #228]	; (800046c <_ZN7Trigger12forceTriggerEv+0x124>)
 8000386:	4629      	.short	0x4629
 8000388:	4630      	mov	r0, r6
 800038a:	47a0      	.short	0x47a0
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	.short	0x2b00
 8000390:	d056      	beq.n	8000440 <_ZN7Trigger12forceTriggerEv+0xf8>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8000392:	2b02      	.short	0x2b02
				this->writeBin(s);
 8000394:	4630      	mov	r0, r6
 8000396:	4937      	.short	0x4937
 8000398:	bf0c      	ite	eq
 800039a:	4b37      	.short	0x4b37
			}
			else {
				this->writeHex(s);
 800039c:	4b37      	ldrne	r3, [pc, #220]	; (800047c <_ZN7Trigger12forceTriggerEv+0x134>)
 800039e:	4798      	.short	0x4798
		mout << xnow << "," << ynow << ",";
		//measurement is exactly 8 chars long
		const char* p = Laser::DoubleBuffer::get()+3;
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <_ZN7Trigger12forceTriggerEv+0x138>)
 80003a2:	681c      	.short	0x681c
		for(int i = 0; i < 8; i++){
 80003a4:	2500      	movs	r5, #0
	lastYPos = ynow;

	if(Laser::DoubleBuffer::good()){
		mout << xnow << "," << ynow << ",";
		//measurement is exactly 8 chars long
		const char* p = Laser::DoubleBuffer::get()+3;
 80003a6:	3403      	.short	0x3403
 80003a8:	e00a      	b.n	80003c0 <_ZN7Trigger12forceTriggerEv+0x78>
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80003aa:	2b02      	.short	0x2b02
				this->writeBin(v);
 80003ac:	bf03      	ittte	eq
 80003ae:	4630      	.short	0x4630
 80003b0:	4611      	moveq	r1, r2
 80003b2:	4b34      	.short	0x4b34
			}
			else {
				this->writeHex(v);
 80003b4:	4b34      	ldrne	r3, [pc, #208]	; (8000488 <_ZN7Trigger12forceTriggerEv+0x140>)
		for(int i = 0; i < 8; i++){
 80003b6:	3501      	.short	0x3501
 80003b8:	4798      	blx	r3
			mout << *p;
			p++;
 80003ba:	3401      	.short	0x3401

	if(Laser::DoubleBuffer::good()){
		mout << xnow << "," << ynow << ",";
		//measurement is exactly 8 chars long
		const char* p = Laser::DoubleBuffer::get()+3;
		for(int i = 0; i < 8; i++){
 80003bc:	2d08      	cmp	r5, #8
 80003be:	d00e      	.short	0xd00e
	thresholdY = threshold;
}

void Trigger::enable(bool enable){
	enabled = enable;
}
 80003c0:	7822      	ldrb	r2, [r4, #0]
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80003c2:	4e2a      	.short	0x4e2a
 80003c4:	687b      	ldr	r3, [r7, #4]
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 80003c6:	4611      	.short	0x4611
 80003c8:	4630      	mov	r0, r6
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80003ca:	2b00      	.short	0x2b00
 80003cc:	d1ed      	bne.n	80003aa <_ZN7Trigger12forceTriggerEv+0x62>
				this->device->write(v);
 80003ce:	6830      	.short	0x6830
 80003d0:	6803      	ldr	r3, [r0, #0]

	if(Laser::DoubleBuffer::good()){
		mout << xnow << "," << ynow << ",";
		//measurement is exactly 8 chars long
		const char* p = Laser::DoubleBuffer::get()+3;
		for(int i = 0; i < 8; i++){
 80003d2:	3501      	.short	0x3501
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4798      	.short	0x4798
			mout << *p;
			p++;
 80003d8:	3401      	adds	r4, #1

	if(Laser::DoubleBuffer::good()){
		mout << xnow << "," << ynow << ",";
		//measurement is exactly 8 chars long
		const char* p = Laser::DoubleBuffer::get()+3;
		for(int i = 0; i < 8; i++){
 80003da:	2d08      	.short	0x2d08
 80003dc:	d1f0      	bne.n	80003c0 <_ZN7Trigger12forceTriggerEv+0x78>
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80003de:	687b      	.short	0x687b
 80003e0:	4822      	ldr	r0, [pc, #136]	; (800046c <_ZN7Trigger12forceTriggerEv+0x124>)
 80003e2:	b9d3      	.short	0xb9d3
				this->device->write(v);
 80003e4:	6800      	ldr	r0, [r0, #0]
 80003e6:	6803      	.short	0x6803
 80003e8:	210a      	movs	r1, #10
 80003ea:	689b      	.short	0x689b
 80003ec:	4798      	blx	r3
 80003ee:	bdf8      	.short	0xbdf8
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80003f0:	4f26      	ldr	r7, [pc, #152]	; (800048c <_ZN7Trigger12forceTriggerEv+0x144>)
 80003f2:	4c1f      	.short	0x4c1f
 80003f4:	4638      	mov	r0, r7
 80003f6:	4631      	.short	0x4631
 80003f8:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80003fa:	687b      	.short	0x687b
 80003fc:	b1d3      	cbz	r3, 8000434 <_ZN7Trigger12forceTriggerEv+0xec>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80003fe:	2b02      	.short	0x2b02
				this->writeBin(s);
 8000400:	4638      	mov	r0, r7
 8000402:	491c      	.short	0x491c
 8000404:	bf0c      	ite	eq
 8000406:	4b1c      	.short	0x4b1c
			}
			else {
				this->writeHex(s);
 8000408:	4b1c      	ldrne	r3, [pc, #112]	; (800047c <_ZN7Trigger12forceTriggerEv+0x134>)
 800040a:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800040c:	4e1f      	ldr	r6, [pc, #124]	; (800048c <_ZN7Trigger12forceTriggerEv+0x144>)
 800040e:	4629      	mov	r1, r5
 8000410:	4630      	mov	r0, r6
 8000412:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	b1cb      	cbz	r3, 800044c <_ZN7Trigger12forceTriggerEv+0x104>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8000418:	4630      	mov	r0, r6
 800041a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800041c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800041e:	bf0c      	ite	eq
 8000420:	4b18      	ldreq	r3, [pc, #96]	; (8000484 <_ZN7Trigger12forceTriggerEv+0x13c>)
			}
			else {
				this->writeHex(v);
 8000422:	4b19      	ldrne	r3, [pc, #100]	; (8000488 <_ZN7Trigger12forceTriggerEv+0x140>)
 8000424:	4798      	blx	r3
 8000426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8000428:	49126838 	.word	0x49126838
 800042c:	6803      	ldr	r3, [r0, #0]
 800042e:	68db      	.short	0x68db
 8000430:	4798      	blx	r3
 8000432:	e7a7      	.short	0xe7a7
 8000434:	6838      	ldr	r0, [r7, #0]
 8000436:	490f      	.short	0x490f
 8000438:	6803      	ldr	r3, [r0, #0]
 800043a:	68db      	.short	0x68db
 800043c:	4798      	blx	r3
 800043e:	e7e5      	.short	0xe7e5
 8000440:	6830      	ldr	r0, [r6, #0]
 8000442:	490c      	.short	0x490c
 8000444:	6803      	ldr	r3, [r0, #0]
 8000446:	68db      	.short	0x68db
 8000448:	4798      	blx	r3
 800044a:	e7a9      	.short	0xe7a9

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800044c:	6830      	ldr	r0, [r6, #0]
 800044e:	6803      	.short	0x6803
 8000450:	210a      	movs	r1, #10
 8000452:	689b      	.short	0x689b
 8000454:	4798      	blx	r3
 8000456:	bdf8      	.short	0xbdf8
 8000458:	0e89      	lsrs	r1, r1, #26
 800045a:	0800      	.short	0x0800
 800045c:	0e81      	lsrs	r1, r0, #26
 800045e:	0800      	.short	0x0800
 8000460:	0664      	lsls	r4, r4, #25
 8000462:	2000      	.short	0x2000
 8000464:	0668      	lsls	r0, r5, #25
 8000466:	2000      	.short	0x2000
 8000468:	1ee5      	subs	r5, r4, #3
 800046a:	0800      	.short	0x0800
 800046c:	117c      	asrs	r4, r7, #5
 800046e:	2000      	.short	0x2000
 8000470:	78f9      	ldrb	r1, [r7, #3]
 8000472:	0800      	.short	0x0800
 8000474:	9090      	str	r0, [sp, #576]	; 0x240
 8000476:	0800      	.short	0x0800
 8000478:	79ed      	ldrb	r5, [r5, #7]
 800047a:	0800      	.short	0x0800
 800047c:	79a9      	ldrb	r1, [r5, #6]
 800047e:	0800      	.short	0x0800
 8000480:	004c      	lsls	r4, r1, #1
 8000482:	2000      	.short	0x2000
 8000484:	7af5      	ldrb	r5, [r6, #11]
 8000486:	0800      	.short	0x0800
 8000488:	7ac1      	ldrb	r1, [r0, #11]
 800048a:	0800      	.short	0x0800
 800048c:	13a4      	asrs	r4, r4, #14
 800048e:	2000      	.short	0x2000

08000490 <_ZN7Trigger12setThresholdEi>:
	}

}

void Trigger::setThreshold(int threshold){
	thresholdX = threshold;
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <_ZN7Trigger12setThresholdEi+0xc>)
 8000492:	6018      	.short	0x6018
	thresholdY = threshold;
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <_ZN7Trigger12setThresholdEi+0x10>)
 8000496:	6018      	.short	0x6018
 8000498:	4770      	bx	lr
 800049a:	bf00      	.short	0xbf00
 800049c:	0038      	movs	r0, r7
 800049e:	2000      	.short	0x2000
 80004a0:	0030      	movs	r0, r6
 80004a2:	2000      	.short	0x2000

080004a4 <_ZN7Trigger6enableEb>:
}

void Trigger::enable(bool enable){
	enabled = enable;
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <_ZN7Trigger6enableEb+0x8>)
 80004a6:	7018      	.short	0x7018
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	.short	0xbf00
 80004ac:	0034      	movs	r4, r6
 80004ae:	2000      	.short	0x2000

080004b0 <_Z5atoi2PKcPS0_>:
*/

#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
#define valid_char(c) (((c) >= '0' && (c) <= '9') || c == '+' || c == '-')
int atoi2 (const char *p, const char** stopPosition){
 80004b0:	b430      	push	{r4, r5}
    int value = 0;
    const char* const start = p;

    // Skip leading garbage

    while (!valid_char(*p) ) {
 80004b2:	7803      	.short	0x7803
 80004b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80004b8:	2c09b2d4 	.word	0x2c09b2d4
 80004bc:	d820      	bhi.n	8000500 <_Z5atoi2PKcPS0_+0x50>
        p += 1;
    }

    // Get sign, if any.

    sign = 1.0;
 80004be:	4604      	.short	0x4604
 80004c0:	2001      	movs	r0, #1
 80004c2:	eddf      	.short	0xeddf
 80004c4:	7a2f      	ldrb	r7, [r5, #8]
    	p++;*/

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
        value = value * 10.0 + (*p - '0');
 80004c6:	ee07      	.short	0xee07
 80004c8:	2a10      	cmp	r2, #16
 80004ca:	eef8      	.short	0xeef8
 80004cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    /*while(*p == '0')
    	p++;*/

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80004ce:	f814      	.short	0xf814
 80004d0:	3f01      	subs	r7, #1
        value = value * 10.0 + (*p - '0');
 80004d2:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80004d6:	eeb2      	.short	0xeeb2
 80004d8:	7a04      	ldrb	r4, [r0, #8]
 80004da:	ee46 7a87 	vmla.f32	s15, s13, s14
    /*while(*p == '0')
    	p++;*/

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80004de:	f1a3      	.short	0xf1a3
 80004e0:	0230      	lsls	r0, r6, #8
 80004e2:	b2d5      	.short	0xb2d5
 80004e4:	2d09      	cmp	r5, #9
        value = value * 10.0 + (*p - '0');
 80004e6:	eefd      	.short	0xeefd
 80004e8:	7ae7      	ldrb	r7, [r4, #11]
    /*while(*p == '0')
    	p++;*/

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80004ea:	d9ec      	.short	0xd9ec
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
 80004ec:	2b2e      	cmp	r3, #46	; 0x2e
 80004ee:	d027      	.short	0xd027
        }
    }*/

    // Return signed and scaled floating point result.
    exit: ;
    if(stopPosition != 0){
 80004f0:	b101      	cbz	r1, 80004f4 <_Z5atoi2PKcPS0_+0x44>
    	*stopPosition = p;
 80004f2:	600c      	.short	0x600c
    }
    return sign * value;
 80004f4:	ee17 3a90 	vmov	r3, s15
 80004f8:	f000fb03 	.word	0xf000fb03
}
 80004fc:	bc30      	pop	{r4, r5}
 80004fe:	4770      	.short	0x4770
    int value = 0;
    const char* const start = p;

    // Skip leading garbage

    while (!valid_char(*p) ) {
 8000500:	2b2b      	cmp	r3, #43	; 0x2b
 8000502:	d00a      	.short	0xd00a
 8000504:	2b2d      	cmp	r3, #45	; 0x2d
 8000506:	d013      	.short	0xd013
 8000508:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800050c:	0230f1a3 	.word	0x0230f1a3
 8000510:	b2d4      	uxtb	r4, r2
 8000512:	2c09      	.short	0x2c09
 8000514:	d9d3      	bls.n	80004be <_Z5atoi2PKcPS0_+0xe>
 8000516:	2b2b      	cmp	r3, #43	; 0x2b
 8000518:	7843d1f4 	.word	0x7843d1f4
 800051c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    if (*p == '-') {
        sign = -1.0;
        p += 1;

    } else if (*p == '+') {
        p += 1;
 8000520:	b2d51c44 	.word	0xb2d51c44
        p += 1;
    }

    // Get sign, if any.

    sign = 1.0;
 8000524:	2001      	movs	r0, #1
    /*while(*p == '0')
    	p++;*/

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 8000526:	2d09      	.short	0x2d09
 8000528:	d9cb      	bls.n	80004c2 <_Z5atoi2PKcPS0_+0x12>
 800052a:	eddf      	.short	0xeddf
 800052c:	7a15      	ldrb	r5, [r2, #8]
 800052e:	e7dd      	.short	0xe7dd
 8000530:	7843      	ldrb	r3, [r0, #1]
 8000532:	f1a3      	.short	0xf1a3
 8000534:	0230      	lsls	r0, r6, #8
    // Get sign, if any.

    sign = 1.0;
    if (*p == '-') {
        sign = -1.0;
        p += 1;
 8000536:	1c44      	.short	0x1c44
 8000538:	b2d5      	uxtb	r5, r2

    // Get sign, if any.

    sign = 1.0;
    if (*p == '-') {
        sign = -1.0;
 800053a:	f04f      	.short	0xf04f
 800053c:	30ff      	adds	r0, #255	; 0xff
 800053e:	e7f2      	.short	0xe7f2
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 8000540:	7863      	ldrb	r3, [r4, #1]
 8000542:	3b30      	.short	0x3b30
 8000544:	b2da      	uxtb	r2, r3
    for (value = 0.0; valid_digit(*p); p += 1){
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
    	p++;
 8000546:	3401      	adds	r4, #1
		for (; valid_digit(*p); p += 1){
 8000548:	d8112a09 	.word	0xd8112a09
			value = value * 10.0 + (*p - '0');
 800054c:	ee07 3a10 	vmov	s14, r3
 8000550:	6ae7eef8 	.word	0x6ae7eef8
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 8000554:	f814 3f01 	ldrb.w	r3, [r4, #1]!
			value = value * 10.0 + (*p - '0');
 8000558:	7ac7eef8 	.word	0x7ac7eef8
 800055c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8000560:	7a87ee46 	.word	0x7a87ee46
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 8000564:	3b30      	subs	r3, #48	; 0x30
 8000566:	b2da      	.short	0xb2da
 8000568:	2a09      	cmp	r2, #9
			value = value * 10.0 + (*p - '0');
 800056a:	eefd      	.short	0xeefd
 800056c:	7ae7      	ldrb	r7, [r4, #11]
        value = value * 10.0 + (*p - '0');
    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 800056e:	d9ed      	.short	0xd9ed
			value = value * 10.0 + (*p - '0');
		}
		value *= 10;
 8000570:	ee17 2a90 	vmov	r2, s15
 8000574:	0382eb02 	.word	0x0382eb02
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	ee07 3a90 	vmov	s15, r3
 800057e:	e7b7      	.short	0xe7b7
 8000580:	0000      	movs	r0, r0
	...

08000584 <_Z5atoi2PKcii>:
    	*stopPosition = p;
    }
    return sign * value;
}

int atoi2 (const char *p, const int maxLen, const int garbage){
 8000584:	1841b430 	.word	0x1841b430
    int sign;
    int value;
    const char* pEnd = p+maxLen;

    // Skip leading garbage
    if(p == pEnd){
 8000588:	4288      	cmp	r0, r1
 800058a:	d017      	.short	0xd017
    	return garbage;
    }

    while (!valid_char(*p) ) {
 800058c:	7803      	ldrb	r3, [r0, #0]
 800058e:	f1a3      	.short	0xf1a3
 8000590:	0430      	lsls	r0, r6, #16
 8000592:	2c09      	.short	0x2c09
 8000594:	d907      	bls.n	80005a6 <_Z5atoi2PKcii+0x22>
        p += 1;
 8000596:	3001      	.short	0x3001
    // Skip leading garbage
    if(p == pEnd){
    	return garbage;
    }

    while (!valid_char(*p) ) {
 8000598:	2b2b      	cmp	r3, #43	; 0x2b
 800059a:	d004      	beq.n	80005a6 <_Z5atoi2PKcii+0x22>
 800059c:	2b2d      	cmp	r3, #45	; 0x2d
 800059e:	d1f3      	bne.n	8000588 <_Z5atoi2PKcii+0x4>

    // Get sign, if any.

    sign = 1.0;
    if (*p == '-') {
        sign = -1.0;
 80005a0:	f04f 34ff 	mov.w	r4, #4294967295
 80005a4:	e000      	b.n	80005a8 <_Z5atoi2PKcii+0x24>
        }
    }

    // Get sign, if any.

    sign = 1.0;
 80005a6:	2401      	movs	r4, #1


        p += 1;
    }

    if(p == pEnd){
 80005a8:	4288      	cmp	r0, r1
 80005aa:	d007      	beq.n	80005bc <_Z5atoi2PKcii+0x38>
		return garbage;
	}

    //skip leading zeros
    while(*p == '0'){
 80005ac:	7803      	ldrb	r3, [r0, #0]
 80005ae:	2b30      	cmp	r3, #48	; 0x30
 80005b0:	d107      	bne.n	80005c2 <_Z5atoi2PKcii+0x3e>
    	p++;
 80005b2:	3001      	adds	r0, #1
    	if(p == pEnd){
 80005b4:	4288      	cmp	r0, r1
 80005b6:	d1f9      	bne.n	80005ac <_Z5atoi2PKcii+0x28>
			return 0; //not garbage
 80005b8:	2000      	movs	r0, #0
 80005ba:	e000      	b.n	80005be <_Z5atoi2PKcii+0x3a>
    int value;
    const char* pEnd = p+maxLen;

    // Skip leading garbage
    if(p == pEnd){
    	return garbage;
 80005bc:	4610      	mov	r0, r2
    }*/

    // Return signed and scaled floating point result.

    return sign * value;
}
 80005be:	bc30      	pop	{r4, r5}
 80005c0:	4770      	bx	lr
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80005c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005c6:	b2d5      	uxtb	r5, r2
 80005c8:	2d09      	cmp	r5, #9
 80005ca:	d820      	bhi.n	800060e <_Z5atoi2PKcii+0x8a>
    	if(p == pEnd){
 80005cc:	4288      	cmp	r0, r1
 80005ce:	d0f3      	beq.n	80005b8 <_Z5atoi2PKcii+0x34>
 80005d0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8000664 <_Z5atoi2PKcii+0xe0>
 80005d4:	e001      	b.n	80005da <_Z5atoi2PKcii+0x56>
 80005d6:	4281      	cmp	r1, r0
 80005d8:	d037      	beq.n	800064a <_Z5atoi2PKcii+0xc6>
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 80005da:	ee07 2a10 	vmov	s14, r2
 80005de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80005e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    	if(p == pEnd){
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 80005e6:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80005ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 80005ee:	ee46 7a87 	vmla.f32	s15, s13, s14
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80005f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005f6:	b2d5      	uxtb	r5, r2
 80005f8:	2d09      	cmp	r5, #9
    	if(p == pEnd){
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 80005fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80005fe:	d9ea      	bls.n	80005d6 <_Z5atoi2PKcii+0x52>
		}
        value = value * 10.0 + (*p - '0');

    }

    if (*p == '.'){
 8000600:	2b2e      	cmp	r3, #46	; 0x2e
 8000602:	d007      	beq.n	8000614 <_Z5atoi2PKcii+0x90>
        }
    }*/

    // Return signed and scaled floating point result.

    return sign * value;
 8000604:	ee17 2a90 	vmov	r2, s15
 8000608:	fb02 f004 	mul.w	r0, r2, r4
 800060c:	e7d7      	b.n	80005be <_Z5atoi2PKcii+0x3a>
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 800060e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000664 <_Z5atoi2PKcii+0xe0>
 8000612:	e7f5      	b.n	8000600 <_Z5atoi2PKcii+0x7c>

    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 8000614:	7843      	ldrb	r3, [r0, #1]
 8000616:	3b30      	subs	r3, #48	; 0x30
 8000618:	b2da      	uxtb	r2, r3
        value = value * 10.0 + (*p - '0');

    }

    if (*p == '.'){
    	p++;
 800061a:	3001      	adds	r0, #1
		for (; valid_digit(*p); p += 1){
 800061c:	2a09      	cmp	r2, #9
 800061e:	d912      	bls.n	8000646 <_Z5atoi2PKcii+0xc2>
 8000620:	e018      	b.n	8000654 <_Z5atoi2PKcii+0xd0>
			if(p == pEnd){
				return sign * value;
			}
			value = value * 10.0 + (*p - '0');
 8000622:	ee07 3a10 	vmov	s14, r3
 8000626:	eef8 6ae7 	vcvt.f32.s32	s13, s15

    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 800062a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
			if(p == pEnd){
				return sign * value;
			}
			value = value * 10.0 + (*p - '0');
 800062e:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8000632:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8000636:	ee46 7a87 	vmla.f32	s15, s13, s14

    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 800063a:	3b30      	subs	r3, #48	; 0x30
 800063c:	b2da      	uxtb	r2, r3
 800063e:	2a09      	cmp	r2, #9
			if(p == pEnd){
				return sign * value;
			}
			value = value * 10.0 + (*p - '0');
 8000640:	eefd 7ae7 	vcvt.s32.f32	s15, s15

    }

    if (*p == '.'){
    	p++;
		for (; valid_digit(*p); p += 1){
 8000644:	d806      	bhi.n	8000654 <_Z5atoi2PKcii+0xd0>
			if(p == pEnd){
 8000646:	4281      	cmp	r1, r0
 8000648:	d1eb      	bne.n	8000622 <_Z5atoi2PKcii+0x9e>
				return sign * value;
 800064a:	ee17 1a90 	vmov	r1, s15
 800064e:	fb01 f004 	mul.w	r0, r1, r4
 8000652:	e7b4      	b.n	80005be <_Z5atoi2PKcii+0x3a>
			}
			value = value * 10.0 + (*p - '0');
		}
		value *= 10;
 8000654:	ee17 1a90 	vmov	r1, s15
 8000658:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	ee07 3a90 	vmov	s15, r3
 8000662:	e7cf      	b.n	8000604 <_Z5atoi2PKcii+0x80>
 8000664:	00000000 	.word	0x00000000

08000668 <_Z5atof2PKcPS0_f>:
    // Return signed and scaled floating point result.

    return sign * value;
}

float atof2 (const char *p, const char** stopPosition, const float garbage){
 8000668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	ed2d 8b02 	vpush	{d8}
 8000670:	4606      	mov	r6, r0
 8000672:	460f      	mov	r7, r1
    int sign;
    float value;

    // Skip leading garbage

    while (!valid_char(*p) ) {
 8000674:	7833      	ldrb	r3, [r6, #0]
 8000676:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800067a:	2a09      	cmp	r2, #9
 800067c:	d915      	bls.n	80006aa <_Z5atof2PKcPS0_f+0x42>
 800067e:	2b2b      	cmp	r3, #43	; 0x2b
 8000680:	d070      	beq.n	8000764 <_Z5atof2PKcPS0_f+0xfc>
 8000682:	2b2d      	cmp	r3, #45	; 0x2d
 8000684:	d069      	beq.n	800075a <_Z5atof2PKcPS0_f+0xf2>
        p += 1;
        if(*p == '\0'){
 8000686:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f2      	bne.n	8000674 <_Z5atof2PKcPS0_f+0xc>
        }
    }

    // Return signed and scaled floating point result.
    exit: ;
	if(stopPosition != 0){
 800068e:	b107      	cbz	r7, 8000692 <_Z5atof2PKcPS0_f+0x2a>
		*stopPosition = p;
 8000690:	603e      	str	r6, [r7, #0]
	}
    return sign * value;
 8000692:	ee07 8a10 	vmov	s14, r8
 8000696:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800069a:	ee27 8a88 	vmul.f32	s16, s15, s16
}
 800069e:	ee18 0a10 	vmov	r0, s16
 80006a2:	ecbd 8b02 	vpop	{d8}
 80006a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
    }

    // Get sign, if any.

    sign = 1.0;
 80006aa:	f04f 0801 	mov.w	r8, #1
 80006ae:	e001      	b.n	80006b4 <_Z5atof2PKcPS0_f+0x4c>
    } else if (*p == '+') {
        p += 1;
    }

    //skip leading zeros
    while(*p == '0'){
 80006b0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80006b4:	2b30      	cmp	r3, #48	; 0x30
 80006b6:	d0fb      	beq.n	80006b0 <_Z5atof2PKcPS0_f+0x48>
    	p++;
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80006b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80006bc:	b2d1      	uxtb	r1, r2
 80006be:	2909      	cmp	r1, #9
 80006c0:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8000770 <_Z5atof2PKcPS0_f+0x108>
 80006c4:	d810      	bhi.n	80006e8 <_Z5atof2PKcPS0_f+0x80>
        value = value * 10.0 + (*p - '0');
 80006c6:	ee07 2a10 	vmov	s14, r2
    	p++;
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80006ca:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        value = value * 10.0 + (*p - '0');
 80006ce:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80006d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 80006d6:	ee48 7a07 	vmla.f32	s15, s16, s14
    	p++;
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80006da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80006de:	b2d1      	uxtb	r1, r2
 80006e0:	2909      	cmp	r1, #9
        value = value * 10.0 + (*p - '0');
 80006e2:	eeb0 8a67 	vmov.f32	s16, s15
    	p++;
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80006e6:	d9ee      	bls.n	80006c6 <_Z5atof2PKcPS0_f+0x5e>
        value = value * 10.0 + (*p - '0');
    }

    // Get digits after decimal point, if any.

    if (*p == '.') {
 80006e8:	2b2e      	cmp	r3, #46	; 0x2e
 80006ea:	d1d0      	bne.n	800068e <_Z5atof2PKcPS0_f+0x26>
        double pow10 = 10.0;
        p += 1;
        while (valid_digit(*p)) {
 80006ec:	7873      	ldrb	r3, [r6, #1]
 80006ee:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80006f2:	fa5f f289 	uxtb.w	r2, r9

    // Get digits after decimal point, if any.

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
 80006f6:	3601      	adds	r6, #1
        while (valid_digit(*p)) {
 80006f8:	2a09      	cmp	r2, #9
 80006fa:	d8c8      	bhi.n	800068e <_Z5atof2PKcPS0_f+0x26>
 80006fc:	f8df b080 	ldr.w	fp, [pc, #128]	; 8000780 <_Z5atof2PKcPS0_f+0x118>
 8000700:	f04f 0a00 	mov.w	sl, #0
            value += (*p - '0') / pow10;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <_Z5atof2PKcPS0_f+0x10c>)
 8000706:	ee18 0a10 	vmov	r0, s16
 800070a:	4798      	blx	r3
 800070c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8000784 <_Z5atof2PKcPS0_f+0x11c>
 8000710:	4604      	mov	r4, r0
 8000712:	4648      	mov	r0, r9
 8000714:	460d      	mov	r5, r1
 8000716:	47e0      	blx	ip
 8000718:	4652      	mov	r2, sl
 800071a:	465b      	mov	r3, fp
 800071c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8000788 <_Z5atof2PKcPS0_f+0x120>
 8000720:	47e0      	blx	ip
 8000722:	4602      	mov	r2, r0
 8000724:	460b      	mov	r3, r1
 8000726:	4620      	mov	r0, r4
 8000728:	4629      	mov	r1, r5
 800072a:	4c13      	ldr	r4, [pc, #76]	; (8000778 <_Z5atof2PKcPS0_f+0x110>)
 800072c:	47a0      	blx	r4
 800072e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800078c <_Z5atof2PKcPS0_f+0x124>
            pow10 *= 10.0;
 8000732:	4c12      	ldr	r4, [pc, #72]	; (800077c <_Z5atof2PKcPS0_f+0x114>)

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
        while (valid_digit(*p)) {
            value += (*p - '0') / pow10;
 8000734:	47e0      	blx	ip
            pow10 *= 10.0;
 8000736:	4659      	mov	r1, fp
 8000738:	2200      	movs	r2, #0
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <_Z5atof2PKcPS0_f+0x118>)

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
        while (valid_digit(*p)) {
            value += (*p - '0') / pow10;
 800073c:	ee08 0a10 	vmov	s16, r0
            pow10 *= 10.0;
 8000740:	4650      	mov	r0, sl
 8000742:	47a0      	blx	r4
    // Get digits after decimal point, if any.

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
        while (valid_digit(*p)) {
 8000744:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8000748:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800074c:	fa5f f389 	uxtb.w	r3, r9
 8000750:	2b09      	cmp	r3, #9
            value += (*p - '0') / pow10;
            pow10 *= 10.0;
 8000752:	4682      	mov	sl, r0
 8000754:	468b      	mov	fp, r1
    // Get digits after decimal point, if any.

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
        while (valid_digit(*p)) {
 8000756:	d9d5      	bls.n	8000704 <_Z5atof2PKcPS0_f+0x9c>
 8000758:	e799      	b.n	800068e <_Z5atof2PKcPS0_f+0x26>
 800075a:	7873      	ldrb	r3, [r6, #1]

    // Get sign, if any.

    sign = 1.0;
    if (*p == '-') {
        sign = -1.0;
 800075c:	f04f 38ff 	mov.w	r8, #4294967295
        p += 1;
 8000760:	3601      	adds	r6, #1
 8000762:	e7a7      	b.n	80006b4 <_Z5atof2PKcPS0_f+0x4c>
        }
    }

    // Get sign, if any.

    sign = 1.0;
 8000764:	f04f 0801 	mov.w	r8, #1
 8000768:	7873      	ldrb	r3, [r6, #1]
    if (*p == '-') {
        sign = -1.0;
        p += 1;

    } else if (*p == '+') {
        p += 1;
 800076a:	4446      	add	r6, r8
 800076c:	e7a2      	b.n	80006b4 <_Z5atof2PKcPS0_f+0x4c>
 800076e:	bf00      	nop
 8000770:	00000000 	.word	0x00000000
 8000774:	08008175 	.word	0x08008175
 8000778:	08007eb9 	.word	0x08007eb9
 800077c:	0800821d 	.word	0x0800821d
 8000780:	40240000 	.word	0x40240000
 8000784:	08008151 	.word	0x08008151
 8000788:	08008471 	.word	0x08008471
 800078c:	080087a1 	.word	0x080087a1

08000790 <_Z5atof2PKcif>:
		*stopPosition = p;
	}
    return sign * value;
}

float atof2 (const char *p, const int maxLen, const float garbage){
 8000790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000794:	ed2d 8b02 	vpush	{d8}
 8000798:	4603      	mov	r3, r0
    int sign;
    float value;
    const char* pEnd = p+maxLen;
 800079a:	eb00 0801 	add.w	r8, r0, r1

    // Skip leading garbage
    if(p == pEnd){
 800079e:	4543      	cmp	r3, r8
 80007a0:	d01b      	beq.n	80007da <_Z5atof2PKcif+0x4a>
    	return garbage;
    }

    while (!valid_char(*p) ) {
 80007a2:	7818      	ldrb	r0, [r3, #0]
 80007a4:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 80007a8:	2909      	cmp	r1, #9
 80007aa:	d909      	bls.n	80007c0 <_Z5atof2PKcif+0x30>
        p += 1;
 80007ac:	3301      	adds	r3, #1
    // Skip leading garbage
    if(p == pEnd){
    	return garbage;
    }

    while (!valid_char(*p) ) {
 80007ae:	282b      	cmp	r0, #43	; 0x2b
 80007b0:	d006      	beq.n	80007c0 <_Z5atof2PKcif+0x30>
 80007b2:	282d      	cmp	r0, #45	; 0x2d
 80007b4:	d1f3      	bne.n	800079e <_Z5atof2PKcif+0xe>
    // Get sign, if any.

    sign = 1.0;
    if (*p == '-') {
        sign = -1.0;
        p += 1;
 80007b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80007ba:	eebf 8a00 	vmov.f32	s16, #240	; 0xf0
 80007be:	e002      	b.n	80007c6 <_Z5atof2PKcif+0x36>
    // Skip leading garbage
    if(p == pEnd){
    	return garbage;
    }

    while (!valid_char(*p) ) {
 80007c0:	2000      	movs	r0, #0
 80007c2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x70

    } else if (*p == '+') {
        p += 1;
    }

    if(p == pEnd){
 80007c6:	4543      	cmp	r3, r8
 80007c8:	d007      	beq.n	80007da <_Z5atof2PKcif+0x4a>
		return garbage;
	}

    //skip leading zeros
    while(*p == '0'){
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	2a30      	cmp	r2, #48	; 0x30
 80007ce:	d109      	bne.n	80007e4 <_Z5atof2PKcif+0x54>
    	p++;
 80007d0:	3301      	adds	r3, #1
    	if(p == pEnd){
 80007d2:	4543      	cmp	r3, r8
 80007d4:	d1f9      	bne.n	80007ca <_Z5atof2PKcif+0x3a>
			return 0;
 80007d6:	2000      	movs	r0, #0
 80007d8:	e000      	b.n	80007dc <_Z5atof2PKcif+0x4c>
    float value;
    const char* pEnd = p+maxLen;

    // Skip leading garbage
    if(p == pEnd){
    	return garbage;
 80007da:	4610      	mov	r0, r2
    }

    // Return signed and scaled floating point result.

    return sign * value;
}
 80007dc:	ecbd 8b02 	vpop	{d8}
 80007e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 80007e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80007e8:	b2cc      	uxtb	r4, r1
 80007ea:	2c09      	cmp	r4, #9
 80007ec:	d81e      	bhi.n	800082c <_Z5atof2PKcif+0x9c>
    	if(p == pEnd){
 80007ee:	4543      	cmp	r3, r8
 80007f0:	d0f4      	beq.n	80007dc <_Z5atof2PKcif+0x4c>
 80007f2:	eddf 8a29 	vldr	s17, [pc, #164]	; 8000898 <_Z5atof2PKcif+0x108>
 80007f6:	e001      	b.n	80007fc <_Z5atof2PKcif+0x6c>
 80007f8:	4598      	cmp	r8, r3
 80007fa:	d012      	beq.n	8000822 <_Z5atof2PKcif+0x92>
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 80007fc:	ee07 1a10 	vmov	s14, r1
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 8000800:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    	if(p == pEnd){
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 8000804:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8000808:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800080c:	ee48 7a87 	vmla.f32	s15, s17, s14
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 8000810:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000814:	b2c8      	uxtb	r0, r1
 8000816:	2809      	cmp	r0, #9
    	if(p == pEnd){
			return sign * value;
		}
        value = value * 10.0 + (*p - '0');
 8000818:	eef0 8a67 	vmov.f32	s17, s15
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 800081c:	d9ec      	bls.n	80007f8 <_Z5atof2PKcif+0x68>
        value = value * 10.0 + (*p - '0');
    }

    // Get digits after decimal point, if any.

    if (*p == '.') {
 800081e:	2a2e      	cmp	r2, #46	; 0x2e
 8000820:	d007      	beq.n	8000832 <_Z5atof2PKcif+0xa2>
        }
    }

    // Return signed and scaled floating point result.

    return sign * value;
 8000822:	ee28 8a88 	vmul.f32	s16, s17, s16
 8000826:	ee18 0a10 	vmov	r0, s16
 800082a:	e7d7      	b.n	80007dc <_Z5atof2PKcif+0x4c>
		}
    }

    // Get digits before decimal point or exponent, if any.

    for (value = 0.0; valid_digit(*p); p += 1){
 800082c:	eddf 8a1a 	vldr	s17, [pc, #104]	; 8000898 <_Z5atof2PKcif+0x108>
 8000830:	e7f5      	b.n	800081e <_Z5atof2PKcif+0x8e>

    // Get digits after decimal point, if any.

    if (*p == '.') {
        double pow10 = 10.0;
        p += 1;
 8000832:	f103 0901 	add.w	r9, r3, #1
        if(p == pEnd){
 8000836:	45c1      	cmp	r9, r8
 8000838:	d0f3      	beq.n	8000822 <_Z5atof2PKcif+0x92>
 800083a:	4d18      	ldr	r5, [pc, #96]	; (800089c <_Z5atof2PKcif+0x10c>)
 800083c:	2400      	movs	r4, #0
			return sign * value;
		}
        while (valid_digit(*p)) {
 800083e:	f899 a000 	ldrb.w	sl, [r9]
 8000842:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8000846:	fa5f f38a 	uxtb.w	r3, sl
 800084a:	2b09      	cmp	r3, #9
            value += (*p - '0') / pow10;
 800084c:	ee18 0a90 	vmov	r0, s17
            pow10 *= 10.0;
            p += 1;
 8000850:	f109 0901 	add.w	r9, r9, #1
        double pow10 = 10.0;
        p += 1;
        if(p == pEnd){
			return sign * value;
		}
        while (valid_digit(*p)) {
 8000854:	d8e5      	bhi.n	8000822 <_Z5atof2PKcif+0x92>
            value += (*p - '0') / pow10;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <_Z5atof2PKcif+0x110>)
 8000858:	4798      	blx	r3
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <_Z5atof2PKcif+0x114>)
 800085c:	4606      	mov	r6, r0
 800085e:	4650      	mov	r0, sl
 8000860:	460f      	mov	r7, r1
 8000862:	4798      	blx	r3
 8000864:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80008b4 <_Z5atof2PKcif+0x124>
 8000868:	4622      	mov	r2, r4
 800086a:	462b      	mov	r3, r5
 800086c:	47e0      	blx	ip
 800086e:	4602      	mov	r2, r0
 8000870:	460b      	mov	r3, r1
 8000872:	4630      	mov	r0, r6
 8000874:	4639      	mov	r1, r7
 8000876:	4e0c      	ldr	r6, [pc, #48]	; (80008a8 <_Z5atof2PKcif+0x118>)
 8000878:	47b0      	blx	r6
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <_Z5atof2PKcif+0x11c>)
 800087c:	4798      	blx	r3
            pow10 *= 10.0;
 800087e:	4629      	mov	r1, r5
 8000880:	2200      	movs	r2, #0
        p += 1;
        if(p == pEnd){
			return sign * value;
		}
        while (valid_digit(*p)) {
            value += (*p - '0') / pow10;
 8000882:	ee08 0a90 	vmov	s17, r0
            pow10 *= 10.0;
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <_Z5atof2PKcif+0x10c>)
 8000888:	4620      	mov	r0, r4
 800088a:	4c09      	ldr	r4, [pc, #36]	; (80008b0 <_Z5atof2PKcif+0x120>)
 800088c:	47a0      	blx	r4
            p += 1;
            if(p == pEnd){
 800088e:	45c1      	cmp	r9, r8
        if(p == pEnd){
			return sign * value;
		}
        while (valid_digit(*p)) {
            value += (*p - '0') / pow10;
            pow10 *= 10.0;
 8000890:	4604      	mov	r4, r0
 8000892:	460d      	mov	r5, r1
            p += 1;
            if(p == pEnd){
 8000894:	d1d3      	bne.n	800083e <_Z5atof2PKcif+0xae>
 8000896:	e7c4      	b.n	8000822 <_Z5atof2PKcif+0x92>
 8000898:	00000000 	.word	0x00000000
 800089c:	40240000 	.word	0x40240000
 80008a0:	08008175 	.word	0x08008175
 80008a4:	08008151 	.word	0x08008151
 80008a8:	08007eb9 	.word	0x08007eb9
 80008ac:	080087a1 	.word	0x080087a1
 80008b0:	0800821d 	.word	0x0800821d
 80008b4:	08008471 	.word	0x08008471

080008b8 <_ZN7ControlIL4Axis5EE4initEv>:
#include "control.h"

template<> float Control<ALL>::maxSpeed = 1;

template<>
bool Control<ALL>::init(){
 80008b8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
class Motor;


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
 80008bc:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80009b8 <_ZN7ControlIL4Axis5EE4initEv+0x100>
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 80008c0:	4c32      	ldr	r4, [pc, #200]	; (800098c <_ZN7ControlIL4Axis5EE4initEv+0xd4>)
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 80008c2:	4f33      	ldr	r7, [pc, #204]	; (8000990 <_ZN7ControlIL4Axis5EE4initEv+0xd8>)
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 80008c4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80009bc <_ZN7ControlIL4Axis5EE4initEv+0x104>
 80008c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80009c0 <_ZN7ControlIL4Axis5EE4initEv+0x108>
 80008cc:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80009c4 <_ZN7ControlIL4Axis5EE4initEv+0x10c>
 80008d0:	f8c4 9000 	str.w	r9, [r4]
class Motor;


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
 80008d4:	2600      	movs	r6, #0
 80008d6:	f8cb 6000 	str.w	r6, [fp]
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
 80008da:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80009c8 <_ZN7ControlIL4Axis5EE4initEv+0x110>
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 80008de:	6067      	str	r7, [r4, #4]

template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
 80008e0:	f8cb 6000 	str.w	r6, [fp]


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
 80008e4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80009cc <_ZN7ControlIL4Axis5EE4initEv+0x114>
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 80008e8:	f8c4 800c 	str.w	r8, [r4, #12]


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
 80008ec:	f8cb 6000 	str.w	r6, [fp]
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
 80008f0:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80009d0 <_ZN7ControlIL4Axis5EE4initEv+0x118>
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 80008f4:	f8c4 c010 	str.w	ip, [r4, #16]
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 80008f8:	2300      	movs	r3, #0
template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
 80008fa:	2001      	movs	r0, #1
 80008fc:	f88b 0000 	strb.w	r0, [fp]
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 8000900:	60a3      	str	r3, [r4, #8]
 8000902:	6163      	str	r3, [r4, #20]
 8000904:	61a3      	str	r3, [r4, #24]
 8000906:	61e3      	str	r3, [r4, #28]
class Motor;


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
 8000908:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80009d4 <_ZN7ControlIL4Axis5EE4initEv+0x11c>
	Control<axis>::v_shall = 0;
 800090c:	4c21      	ldr	r4, [pc, #132]	; (8000994 <_ZN7ControlIL4Axis5EE4initEv+0xdc>)
class Motor;


template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
 800090e:	f8cb 6000 	str.w	r6, [fp]
	Control<axis>::v_shall = 0;
 8000912:	6026      	str	r6, [r4, #0]
	Control<axis>::last_pos = 0;
 8000914:	4c20      	ldr	r4, [pc, #128]	; (8000998 <_ZN7ControlIL4Axis5EE4initEv+0xe0>)
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 8000916:	4d21      	ldr	r5, [pc, #132]	; (800099c <_ZN7ControlIL4Axis5EE4initEv+0xe4>)

template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
 8000918:	6026      	str	r6, [r4, #0]
	Control<axis>::positionControlEnabled = true;
 800091a:	4c21      	ldr	r4, [pc, #132]	; (80009a0 <_ZN7ControlIL4Axis5EE4initEv+0xe8>)
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 800091c:	4921      	ldr	r1, [pc, #132]	; (80009a4 <_ZN7ControlIL4Axis5EE4initEv+0xec>)
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <_ZN7ControlIL4Axis5EE4initEv+0xf0>)
template<Axis axis>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
 8000920:	7020      	strb	r0, [r4, #0]
	Control<axis>::speedControlEnabled = true;
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 8000922:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80009ac <_ZN7ControlIL4Axis5EE4initEv+0xf4>
 8000926:	eddf 7a22 	vldr	s15, [pc, #136]	; 80009b0 <_ZN7ControlIL4Axis5EE4initEv+0xf8>
 800092a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80009d8 <_ZN7ControlIL4Axis5EE4initEv+0x120>
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
 800092e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80009dc <_ZN7ControlIL4Axis5EE4initEv+0x124>
 8000932:	4c20      	ldr	r4, [pc, #128]	; (80009b4 <_ZN7ControlIL4Axis5EE4initEv+0xfc>)
 8000934:	f88b 0000 	strb.w	r0, [fp]
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 8000938:	eef2 6a04 	vmov.f32	s13, #36	; 0x24
 800093c:	edc5 6a00 	vstr	s13, [r5]
 8000940:	606f      	str	r7, [r5, #4]
 8000942:	ed85 7a02 	vstr	s14, [r5, #8]
 8000946:	edc5 7a03 	vstr	s15, [r5, #12]
 800094a:	f8c5 a010 	str.w	sl, [r5, #16]
 800094e:	616b      	str	r3, [r5, #20]
 8000950:	61ab      	str	r3, [r5, #24]
 8000952:	61eb      	str	r3, [r5, #28]
bool Control<axis>::init(){
	Control<axis>::v_is = 0;
	Control<axis>::v_shall = 0;
	Control<axis>::last_pos = 0;
	Control<axis>::positionControlEnabled = true;
	Control<axis>::speedControlEnabled = true;
 8000954:	7020      	strb	r0, [r4, #0]
	//param order: P, I, D, maxErrorSum, maxOutput
	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
 8000956:	edc1 6a00 	vstr	s13, [r1]
 800095a:	604f      	str	r7, [r1, #4]
 800095c:	ed81 7a02 	vstr	s14, [r1, #8]
 8000960:	edc1 7a03 	vstr	s15, [r1, #12]
 8000964:	f8c1 a010 	str.w	sl, [r1, #16]
 8000968:	614b      	str	r3, [r1, #20]
 800096a:	618b      	str	r3, [r1, #24]
 800096c:	61cb      	str	r3, [r1, #28]
			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
 800096e:	f8c2 9000 	str.w	r9, [r2]
 8000972:	6057      	str	r7, [r2, #4]
 8000974:	6093      	str	r3, [r2, #8]
 8000976:	f8c2 800c 	str.w	r8, [r2, #12]
 800097a:	f8c2 c010 	str.w	ip, [r2, #16]
 800097e:	6153      	str	r3, [r2, #20]
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	61d3      	str	r3, [r2, #28]
	return Control<X>::init() && Control<Y>::init();
}
 8000984:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200006ac 	.word	0x200006ac
 8000990:	3dcccccd 	.word	0x3dcccccd
 8000994:	2000066c 	.word	0x2000066c
 8000998:	200006cc 	.word	0x200006cc
 800099c:	2000068c 	.word	0x2000068c
 80009a0:	200006d0 	.word	0x200006d0
 80009a4:	200006d4 	.word	0x200006d4
 80009a8:	200006f4 	.word	0x200006f4
 80009ac:	3e99999a 	.word	0x3e99999a
 80009b0:	457a0000 	.word	0x457a0000
 80009b4:	200006d1 	.word	0x200006d1
 80009b8:	2000067c 	.word	0x2000067c
 80009bc:	3e4ccccd 	.word	0x3e4ccccd
 80009c0:	46192000 	.word	0x46192000
 80009c4:	44960000 	.word	0x44960000
 80009c8:	20000684 	.word	0x20000684
 80009cc:	20000678 	.word	0x20000678
 80009d0:	20000688 	.word	0x20000688
 80009d4:	20000670 	.word	0x20000670
 80009d8:	473f6800 	.word	0x473f6800
 80009dc:	20000689 	.word	0x20000689

080009e0 <_ZN7ControlIL4Axis5EE6updateEb>:

template<>
void Control<ALL>::update(bool externalLimitation){
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

template<Axis axis>
void Control<axis>::update(bool externalLimitation){
	int enc = getIsPosition();

	if(positionControlEnabled){
 80009e2:	4bb1      	ldr	r3, [pc, #708]	; (8000ca8 <_ZN7ControlIL4Axis5EE6updateEb+0x2c8>)
 80009e4:	781c      	ldrb	r4, [r3, #0]
			}
			
			static inline Value
			getValue()
			{
				return TIM5->CNT;
 80009e6:	4bb1      	ldr	r3, [pc, #708]	; (8000cac <_ZN7ControlIL4Axis5EE6updateEb+0x2cc>)
 80009e8:	4606      	mov	r6, r0
 80009ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	f040 8109 	bne.w	8000c04 <_ZN7ControlIL4Axis5EE6updateEb+0x224>
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 80009f2:	4baf      	ldr	r3, [pc, #700]	; (8000cb0 <_ZN7ControlIL4Axis5EE6updateEb+0x2d0>)
	last_pos = enc;

	if(speedControlEnabled){
 80009f4:	48af      	ldr	r0, [pc, #700]	; (8000cb4 <_ZN7ControlIL4Axis5EE6updateEb+0x2d4>)
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 80009f6:	681d      	ldr	r5, [r3, #0]
 80009f8:	49af      	ldr	r1, [pc, #700]	; (8000cb8 <_ZN7ControlIL4Axis5EE6updateEb+0x2d8>)
	last_pos = enc;
 80009fa:	601a      	str	r2, [r3, #0]

	if(speedControlEnabled){
 80009fc:	7800      	ldrb	r0, [r0, #0]
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 80009fe:	1b53      	subs	r3, r2, r5
 8000a00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000a04:	fb05 f303 	mul.w	r3, r5, r3
 8000a08:	600b      	str	r3, [r1, #0]
	last_pos = enc;

	if(speedControlEnabled){
 8000a0a:	b9b0      	cbnz	r0, 8000a3a <_ZN7ControlIL4Axis5EE6updateEb+0x5a>

template<Axis axis>
void Control<axis>::update(bool externalLimitation){
	int enc = getIsPosition();

	if(positionControlEnabled){
 8000a0c:	4bab      	ldr	r3, [pc, #684]	; (8000cbc <_ZN7ControlIL4Axis5EE6updateEb+0x2dc>)
 8000a0e:	781c      	ldrb	r4, [r3, #0]
			}
			
			static inline Value
			getValue()
			{
				return TIM2->CNT;
 8000a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	f040 8178 	bne.w	8000d0c <_ZN7ControlIL4Axis5EE6updateEb+0x32c>
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 8000a1c:	4ba8      	ldr	r3, [pc, #672]	; (8000cc0 <_ZN7ControlIL4Axis5EE6updateEb+0x2e0>)
	last_pos = enc;

	if(speedControlEnabled){
 8000a1e:	48a9      	ldr	r0, [pc, #676]	; (8000cc4 <_ZN7ControlIL4Axis5EE6updateEb+0x2e4>)
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 8000a20:	681d      	ldr	r5, [r3, #0]
 8000a22:	49a9      	ldr	r1, [pc, #676]	; (8000cc8 <_ZN7ControlIL4Axis5EE6updateEb+0x2e8>)
	last_pos = enc;
 8000a24:	601a      	str	r2, [r3, #0]

	if(speedControlEnabled){
 8000a26:	7800      	ldrb	r0, [r0, #0]
		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
			v_shall = 0;
		}*/
	}

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
 8000a28:	1b53      	subs	r3, r2, r5
 8000a2a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000a2e:	fb05 f303 	mul.w	r3, r5, r3
 8000a32:	600b      	str	r3, [r1, #0]
	last_pos = enc;

	if(speedControlEnabled){
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d174      	bne.n	8000b22 <_ZN7ControlIL4Axis5EE6updateEb+0x142>
 8000a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		v_pid.update(v_shall - v_is);
 8000a3a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8000d00 <_ZN7ControlIL4Axis5EE6updateEb+0x320>
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000a3e:	4ba3      	ldr	r3, [pc, #652]	; (8000ccc <_ZN7ControlIL4Axis5EE6updateEb+0x2ec>)
 8000a40:	f8de 5000 	ldr.w	r5, [lr]
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	1a28      	subs	r0, r5, r0
 8000a48:	ee07 0a90 	vmov	s15, r0
 8000a4c:	edd3 5a05 	vldr	s11, [r3, #20]
 8000a50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000a54:	ed93 7a03 	vldr	s14, [r3, #12]
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000a58:	ee76 7a25 	vadd.f32	s15, s12, s11
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a64:	f340 81ac 	ble.w	8000dc0 <_ZN7ControlIL4Axis5EE6updateEb+0x3e0>
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000a68:	edd3 6a00 	vldr	s13, [r3]
 8000a6c:	eddf 7a98 	vldr	s15, [pc, #608]	; 8000cd0 <_ZN7ControlIL4Axis5EE6updateEb+0x2f0>
 8000a70:	ee46 7a26 	vmla.f32	s15, s12, s13
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000a74:	edd3 6a01 	vldr	s13, [r3, #4]
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000a78:	ed93 5a06 	vldr	s10, [r3, #24]
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000a7c:	ee47 7a26 	vmla.f32	s15, s14, s13
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000a80:	ee36 5a45 	vsub.f32	s10, s12, s10
 8000a84:	edd3 6a02 	vldr	s13, [r3, #8]
 8000a88:	ee45 7a26 	vmla.f32	s15, s10, s13
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000a8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000a90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000a98:	488c      	ldr	r0, [pc, #560]	; (8000ccc <_ZN7ControlIL4Axis5EE6updateEb+0x2ec>)
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000a9a:	dc2e      	bgt.n	8000afa <_ZN7ControlIL4Axis5EE6updateEb+0x11a>
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
 8000a9c:	eef1 6a66 	vneg.f32	s13, s13
 8000aa0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa8:	d427      	bmi.n	8000afa <_ZN7ControlIL4Axis5EE6updateEb+0x11a>
		this->output = -this->parameter.maxOutput;
		limitation = true;
	}
	else {
		this->output = tmp;
 8000aaa:	edc0 7a07 	vstr	s15, [r0, #28]
 8000aae:	eef0 6a67 	vmov.f32	s13, s15
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
	{
		this->errorSum = tempErrorSum;
 8000ab2:	ed83 7a05 	vstr	s14, [r3, #20]
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
	GPIO__INPUT(XEND, E, 7);
 8000ab6:	4887      	ldr	r0, [pc, #540]	; (8000cd4 <_ZN7ControlIL4Axis5EE6updateEb+0x2f4>)
		v_u = v_pid.getValue();
		v_ureal = v_u;
 8000ab8:	4f87      	ldr	r7, [pc, #540]	; (8000cd8 <_ZN7ControlIL4Axis5EE6updateEb+0x2f8>)
 8000aba:	6900      	ldr	r0, [r0, #16]
	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
	last_pos = enc;

	if(speedControlEnabled){
		v_pid.update(v_shall - v_is);
		v_u = v_pid.getValue();
 8000abc:	f8df c244 	ldr.w	ip, [pc, #580]	; 8000d04 <_ZN7ControlIL4Axis5EE6updateEb+0x324>
 8000ac0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
class SecurityController{
public:

	template<typename T>
	static void saturate(T& value){
		if((!HallSensor<axis>::getEndState()) && value > 0){
 8000ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ac8:	ee16 5a90 	vmov	r5, s13
	}
	
	this->lastError = input;
 8000acc:	ed83 6a06 	vstr	s12, [r3, #24]
 8000ad0:	edcc 6a00 	vstr	s13, [ip]
		v_ureal = v_u;
 8000ad4:	edc7 6a00 	vstr	s13, [r7]
 8000ad8:	d11b      	bne.n	8000b12 <_ZN7ControlIL4Axis5EE6updateEb+0x132>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	dd19      	ble.n	8000b12 <_ZN7ControlIL4Axis5EE6updateEb+0x132>
			value = 0;
			//bool clear = HallSensor<axis>::checkEndState();
			//State::setSecondaryState(State::MOTOR_LIMITED, !clear);
		}else if((!HallSensor<axis>::getFrontState()) && value < 0){
			value = 0;
 8000ade:	6038      	str	r0, [r7, #0]
 8000ae0:	4605      	mov	r5, r0
		SecurityController<axis>::saturate(v_ureal);
		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
 8000ae2:	487e      	ldr	r0, [pc, #504]	; (8000cdc <_ZN7ControlIL4Axis5EE6updateEb+0x2fc>)
 8000ae4:	6800      	ldr	r0, [r0, #0]
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f000 819e 	beq.w	8000e28 <_ZN7ControlIL4Axis5EE6updateEb+0x448>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	f000 819c 	beq.w	8000e2a <_ZN7ControlIL4Axis5EE6updateEb+0x44a>
				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
			v_ureal = 0;
			v_pid.reset();
			pos_pid.reset();
		}
		Motor<axis>::setSpeed(v_ureal);
 8000af2:	4628      	mov	r0, r5
 8000af4:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <_ZN7ControlIL4Axis5EE6updateEb+0x300>)
 8000af6:	4798      	blx	r3
 8000af8:	e788      	b.n	8000a0c <_ZN7ControlIL4Axis5EE6updateEb+0x2c>
#endif

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO1
  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000afa:	eef0 7ac7 	vabs.f32	s15, s14
 8000afe:	eef0 5ae5 	vabs.f32	s11, s11
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000b02:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (tmp > this->parameter.maxOutput) {
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
		this->output = -this->parameter.maxOutput;
 8000b0a:	edc0 6a07 	vstr	s13, [r0, #28]
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000b0e:	d5d2      	bpl.n	8000ab6 <_ZN7ControlIL4Axis5EE6updateEb+0xd6>
 8000b10:	e7cf      	b.n	8000ab2 <_ZN7ControlIL4Axis5EE6updateEb+0xd2>
private:
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
 8000b12:	4870      	ldr	r0, [pc, #448]	; (8000cd4 <_ZN7ControlIL4Axis5EE6updateEb+0x2f4>)
 8000b14:	6900      	ldr	r0, [r0, #16]
	static void saturate(T& value){
		if((!HallSensor<axis>::getEndState()) && value > 0){
			value = 0;
			//bool clear = HallSensor<axis>::checkEndState();
			//State::setSecondaryState(State::MOTOR_LIMITED, !clear);
		}else if((!HallSensor<axis>::getFrontState()) && value < 0){
 8000b16:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 8000b1a:	d1e2      	bne.n	8000ae2 <_ZN7ControlIL4Axis5EE6updateEb+0x102>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	dae0      	bge.n	8000ae2 <_ZN7ControlIL4Axis5EE6updateEb+0x102>
 8000b20:	e7dd      	b.n	8000ade <_ZN7ControlIL4Axis5EE6updateEb+0xfe>

	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
	last_pos = enc;

	if(speedControlEnabled){
		v_pid.update(v_shall - v_is);
 8000b22:	4f70      	ldr	r7, [pc, #448]	; (8000ce4 <_ZN7ControlIL4Axis5EE6updateEb+0x304>)
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000b24:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <_ZN7ControlIL4Axis5EE6updateEb+0x308>)
 8000b26:	683d      	ldr	r5, [r7, #0]
 8000b28:	6808      	ldr	r0, [r1, #0]
 8000b2a:	1a28      	subs	r0, r5, r0
 8000b2c:	ee07 0a90 	vmov	s15, r0
 8000b30:	edd3 5a05 	vldr	s11, [r3, #20]
 8000b34:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000b38:	ed93 7a03 	vldr	s14, [r3, #12]
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000b3c:	ee76 7a25 	vadd.f32	s15, s12, s11
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	f340 8130 	ble.w	8000dac <_ZN7ControlIL4Axis5EE6updateEb+0x3cc>
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000b4c:	edd3 6a00 	vldr	s13, [r3]
 8000b50:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8000cd0 <_ZN7ControlIL4Axis5EE6updateEb+0x2f0>
 8000b54:	ee46 7a26 	vmla.f32	s15, s12, s13
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000b58:	edd3 6a01 	vldr	s13, [r3, #4]
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000b5c:	ed93 5a06 	vldr	s10, [r3, #24]
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000b60:	ee47 7a26 	vmla.f32	s15, s14, s13
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000b64:	ee36 5a45 	vsub.f32	s10, s12, s10
 8000b68:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b6c:	ee45 7a26 	vmla.f32	s15, s10, s13
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000b70:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b74:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000b7c:	485a      	ldr	r0, [pc, #360]	; (8000ce8 <_ZN7ControlIL4Axis5EE6updateEb+0x308>)
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000b7e:	dc2d      	bgt.n	8000bdc <_ZN7ControlIL4Axis5EE6updateEb+0x1fc>
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
 8000b80:	eef1 6a66 	vneg.f32	s13, s13
 8000b84:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8c:	d426      	bmi.n	8000bdc <_ZN7ControlIL4Axis5EE6updateEb+0x1fc>
		this->output = -this->parameter.maxOutput;
		limitation = true;
	}
	else {
		this->output = tmp;
 8000b8e:	edc0 7a07 	vstr	s15, [r0, #28]
 8000b92:	eef0 6a67 	vmov.f32	s13, s15
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
	{
		this->errorSum = tempErrorSum;
 8000b96:	ed83 7a05 	vstr	s14, [r3, #20]
	GPIO__INPUT(XEND, E, 7);
	GPIO__INPUT(YFRONT, D, 8);
	GPIO__INPUT(YEND, D, 9);
 8000b9a:	4854      	ldr	r0, [pc, #336]	; (8000cec <_ZN7ControlIL4Axis5EE6updateEb+0x30c>)
		v_u = v_pid.getValue();
		v_ureal = v_u;
 8000b9c:	4e54      	ldr	r6, [pc, #336]	; (8000cf0 <_ZN7ControlIL4Axis5EE6updateEb+0x310>)
 8000b9e:	6905      	ldr	r5, [r0, #16]
	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
	last_pos = enc;

	if(speedControlEnabled){
		v_pid.update(v_shall - v_is);
		v_u = v_pid.getValue();
 8000ba0:	f8df e164 	ldr.w	lr, [pc, #356]	; 8000d08 <_ZN7ControlIL4Axis5EE6updateEb+0x328>
 8000ba4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
class SecurityController{
public:

	template<typename T>
	static void saturate(T& value){
		if((!HallSensor<axis>::getEndState()) && value > 0){
 8000ba8:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8000bac:	ee16 0a90 	vmov	r0, s13
	}
	
	this->lastError = input;
 8000bb0:	ed83 6a06 	vstr	s12, [r3, #24]
 8000bb4:	edce 6a00 	vstr	s13, [lr]
		v_ureal = v_u;
 8000bb8:	edc6 6a00 	vstr	s13, [r6]
 8000bbc:	d11a      	bne.n	8000bf4 <_ZN7ControlIL4Axis5EE6updateEb+0x214>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	dd18      	ble.n	8000bf4 <_ZN7ControlIL4Axis5EE6updateEb+0x214>
			value = 0;
			//bool clear = HallSensor<axis>::checkEndState();
			//State::setSecondaryState(State::MOTOR_LIMITED, !clear);
		}else if((!HallSensor<axis>::getFrontState()) && value < 0){
			value = 0;
 8000bc2:	6035      	str	r5, [r6, #0]
 8000bc4:	4628      	mov	r0, r5
		SecurityController<axis>::saturate(v_ureal);
		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
 8000bc6:	4d4b      	ldr	r5, [pc, #300]	; (8000cf4 <_ZN7ControlIL4Axis5EE6updateEb+0x314>)
 8000bc8:	682d      	ldr	r5, [r5, #0]
 8000bca:	42aa      	cmp	r2, r5
 8000bcc:	f000 8116 	beq.w	8000dfc <_ZN7ControlIL4Axis5EE6updateEb+0x41c>
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	f000 8114 	beq.w	8000dfe <_ZN7ControlIL4Axis5EE6updateEb+0x41e>
				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
			v_ureal = 0;
			v_pid.reset();
			pos_pid.reset();
		}
		Motor<axis>::setSpeed(v_ureal);
 8000bd6:	4b48      	ldr	r3, [pc, #288]	; (8000cf8 <_ZN7ControlIL4Axis5EE6updateEb+0x318>)
 8000bd8:	4798      	blx	r3
 8000bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bdc:	eef0 7ac7 	vabs.f32	s15, s14
 8000be0:	eef0 5ae5 	vabs.f32	s11, s11
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000be4:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (tmp > this->parameter.maxOutput) {
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
		this->output = -this->parameter.maxOutput;
 8000bec:	edc0 6a07 	vstr	s13, [r0, #28]
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000bf0:	d5d3      	bpl.n	8000b9a <_ZN7ControlIL4Axis5EE6updateEb+0x1ba>
 8000bf2:	e7d0      	b.n	8000b96 <_ZN7ControlIL4Axis5EE6updateEb+0x1b6>
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
	GPIO__INPUT(XEND, E, 7);
	GPIO__INPUT(YFRONT, D, 8);
 8000bf4:	4d3d      	ldr	r5, [pc, #244]	; (8000cec <_ZN7ControlIL4Axis5EE6updateEb+0x30c>)
 8000bf6:	692d      	ldr	r5, [r5, #16]
	static void saturate(T& value){
		if((!HallSensor<axis>::getEndState()) && value > 0){
			value = 0;
			//bool clear = HallSensor<axis>::checkEndState();
			//State::setSecondaryState(State::MOTOR_LIMITED, !clear);
		}else if((!HallSensor<axis>::getFrontState()) && value < 0){
 8000bf8:	f415 7580 	ands.w	r5, r5, #256	; 0x100
 8000bfc:	d1e3      	bne.n	8000bc6 <_ZN7ControlIL4Axis5EE6updateEb+0x1e6>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	dae1      	bge.n	8000bc6 <_ZN7ControlIL4Axis5EE6updateEb+0x1e6>
 8000c02:	e7de      	b.n	8000bc2 <_ZN7ControlIL4Axis5EE6updateEb+0x1e2>
template<Axis axis>
void Control<axis>::update(bool externalLimitation){
	int enc = getIsPosition();

	if(positionControlEnabled){
		pos_pid.update(pos_shall - enc, externalLimitation);
 8000c04:	4935      	ldr	r1, [pc, #212]	; (8000cdc <_ZN7ControlIL4Axis5EE6updateEb+0x2fc>)
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN7ControlIL4Axis5EE6updateEb+0x31c>)
 8000c08:	6809      	ldr	r1, [r1, #0]
 8000c0a:	1a89      	subs	r1, r1, r2
 8000c0c:	ee07 1a90 	vmov	s15, r1
 8000c10:	edd3 5a05 	vldr	s11, [r3, #20]
 8000c14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000c18:	ed93 7a03 	vldr	s14, [r3, #12]
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000c1c:	ee76 7aa5 	vadd.f32	s15, s13, s11
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c28:	f340 80de 	ble.w	8000de8 <_ZN7ControlIL4Axis5EE6updateEb+0x408>
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000c2c:	ed93 6a00 	vldr	s12, [r3]
 8000c30:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000cd0 <_ZN7ControlIL4Axis5EE6updateEb+0x2f0>
 8000c34:	ee46 7a86 	vmla.f32	s15, s13, s12
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000c38:	ed93 6a01 	vldr	s12, [r3, #4]
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000c3c:	ed93 5a06 	vldr	s10, [r3, #24]
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000c40:	ee47 7a06 	vmla.f32	s15, s14, s12
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000c44:	ee36 5ac5 	vsub.f32	s10, s13, s10
 8000c48:	ed93 6a02 	vldr	s12, [r3, #8]
 8000c4c:	ee45 7a06 	vmla.f32	s15, s10, s12
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000c50:	ed93 6a04 	vldr	s12, [r3, #16]
 8000c54:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000c5c:	4927      	ldr	r1, [pc, #156]	; (8000cfc <_ZN7ControlIL4Axis5EE6updateEb+0x31c>)
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000c5e:	dc15      	bgt.n	8000c8c <_ZN7ControlIL4Axis5EE6updateEb+0x2ac>
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
 8000c60:	eeb1 6a46 	vneg.f32	s12, s12
 8000c64:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	d40e      	bmi.n	8000c8c <_ZN7ControlIL4Axis5EE6updateEb+0x2ac>
		this->output = -this->parameter.maxOutput;
		limitation = true;
	}
	else {
		this->output = tmp;
 8000c6e:	edc1 7a07 	vstr	s15, [r1, #28]
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f040 80f5 	bne.w	8000e62 <_ZN7ControlIL4Axis5EE6updateEb+0x482>
	{
		this->errorSum = tempErrorSum;
 8000c78:	ed83 7a05 	vstr	s14, [r3, #20]
		v_shall = pos_pid.getValue();
 8000c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	}
	
	this->lastError = input;
 8000c80:	edc3 6a06 	vstr	s13, [r3, #24]
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <_ZN7ControlIL4Axis5EE6updateEb+0x320>)
 8000c86:	edc3 7a00 	vstr	s15, [r3]
 8000c8a:	e6b2      	b.n	80009f2 <_ZN7ControlIL4Axis5EE6updateEb+0x12>
	if (tmp > this->parameter.maxOutput) {
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
		this->output = -this->parameter.maxOutput;
 8000c8c:	ed81 6a07 	vstr	s12, [r1, #28]
 8000c90:	eef0 7ac7 	vabs.f32	s15, s14
 8000c94:	eef0 5ae5 	vabs.f32	s11, s11
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000c98:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	eef0 7a46 	vmov.f32	s15, s12
 8000ca4:	d4e8      	bmi.n	8000c78 <_ZN7ControlIL4Axis5EE6updateEb+0x298>
 8000ca6:	e7e9      	b.n	8000c7c <_ZN7ControlIL4Axis5EE6updateEb+0x29c>
 8000ca8:	20000688 	.word	0x20000688
 8000cac:	40000c00 	.word	0x40000c00
 8000cb0:	20000684 	.word	0x20000684
 8000cb4:	20000689 	.word	0x20000689
 8000cb8:	2000067c 	.word	0x2000067c
 8000cbc:	200006d0 	.word	0x200006d0
 8000cc0:	200006cc 	.word	0x200006cc
 8000cc4:	200006d1 	.word	0x200006d1
 8000cc8:	20000670 	.word	0x20000670
 8000ccc:	200006ac 	.word	0x200006ac
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	20000718 	.word	0x20000718
 8000cdc:	20000680 	.word	0x20000680
 8000ce0:	080025ed 	.word	0x080025ed
 8000ce4:	2000066c 	.word	0x2000066c
 8000ce8:	200006f4 	.word	0x200006f4
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	20000720 	.word	0x20000720
 8000cf4:	20000674 	.word	0x20000674
 8000cf8:	08002629 	.word	0x08002629
 8000cfc:	2000068c 	.word	0x2000068c
 8000d00:	20000678 	.word	0x20000678
 8000d04:	20000714 	.word	0x20000714
 8000d08:	2000071c 	.word	0x2000071c
template<Axis axis>
void Control<axis>::update(bool externalLimitation){
	int enc = getIsPosition();

	if(positionControlEnabled){
		pos_pid.update(pos_shall - enc, externalLimitation);
 8000d0c:	4956      	ldr	r1, [pc, #344]	; (8000e68 <_ZN7ControlIL4Axis5EE6updateEb+0x488>)
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000d0e:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <_ZN7ControlIL4Axis5EE6updateEb+0x48c>)
 8000d10:	6809      	ldr	r1, [r1, #0]
 8000d12:	1a89      	subs	r1, r1, r2
 8000d14:	ee07 1a90 	vmov	s15, r1
 8000d18:	edd3 5a05 	vldr	s11, [r3, #20]
 8000d1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000d20:	ed93 7a03 	vldr	s14, [r3, #12]
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000d24:	ee76 7aa5 	vadd.f32	s15, s13, s11
	if (tempErrorSum > this->parameter.maxErrorSum) {
 8000d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	dd50      	ble.n	8000dd4 <_ZN7ControlIL4Axis5EE6updateEb+0x3f4>
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000d32:	ed93 6a00 	vldr	s12, [r3]
 8000d36:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8000e70 <_ZN7ControlIL4Axis5EE6updateEb+0x490>
 8000d3a:	ee46 7a86 	vmla.f32	s15, s13, s12
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000d3e:	ed93 6a01 	vldr	s12, [r3, #4]
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000d42:	ed93 5a06 	vldr	s10, [r3, #24]
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
 8000d46:	ee47 7a06 	vmla.f32	s15, s14, s12
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
 8000d4a:	ee36 5ac5 	vsub.f32	s10, s13, s10
 8000d4e:	ed93 6a02 	vldr	s12, [r3, #8]
 8000d52:	ee45 7a06 	vmla.f32	s15, s10, s12
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000d56:	ed93 6a04 	vldr	s12, [r3, #16]
 8000d5a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
		tempErrorSum = -this->parameter.maxErrorSum;
	}
	
	WideType tmp = 0;
	tmp += static_cast<WideType>(this->parameter.kp) * input;
 8000d62:	4942      	ldr	r1, [pc, #264]	; (8000e6c <_ZN7ControlIL4Axis5EE6updateEb+0x48c>)
	tmp += static_cast<WideType>(this->parameter.ki) * (tempErrorSum);
	tmp += static_cast<WideType>(this->parameter.kd) * (input - this->lastError);
	
	tmp = tmp / ScaleFactor;
	
	if (tmp > this->parameter.maxOutput) {
 8000d64:	dc14      	bgt.n	8000d90 <_ZN7ControlIL4Axis5EE6updateEb+0x3b0>
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
 8000d66:	eeb1 6a46 	vneg.f32	s12, s12
 8000d6a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	d40d      	bmi.n	8000d90 <_ZN7ControlIL4Axis5EE6updateEb+0x3b0>
		this->output = -this->parameter.maxOutput;
		limitation = true;
	}
	else {
		this->output = tmp;
 8000d74:	edc1 7a07 	vstr	s15, [r1, #28]
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d16f      	bne.n	8000e5c <_ZN7ControlIL4Axis5EE6updateEb+0x47c>
	{
		this->errorSum = tempErrorSum;
 8000d7c:	ed83 7a05 	vstr	s14, [r3, #20]
		v_shall = pos_pid.getValue();
 8000d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	}
	
	this->lastError = input;
 8000d84:	edc3 6a06 	vstr	s13, [r3, #24]
 8000d88:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <_ZN7ControlIL4Axis5EE6updateEb+0x494>)
 8000d8a:	edc3 7a00 	vstr	s15, [r3]
 8000d8e:	e645      	b.n	8000a1c <_ZN7ControlIL4Axis5EE6updateEb+0x3c>
	if (tmp > this->parameter.maxOutput) {
		this->output = this->parameter.maxOutput;
		limitation = true;
	}
	else if (tmp < -this->parameter.maxOutput) {
		this->output = -this->parameter.maxOutput;
 8000d90:	ed81 6a07 	vstr	s12, [r1, #28]
 8000d94:	eef0 7ac7 	vabs.f32	s15, s14
 8000d98:	eef0 5ae5 	vabs.f32	s11, s11
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000d9c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	eef0 7a46 	vmov.f32	s15, s12
 8000da8:	d4e8      	bmi.n	8000d7c <_ZN7ControlIL4Axis5EE6updateEb+0x39c>
 8000daa:	e7e9      	b.n	8000d80 <_ZN7ControlIL4Axis5EE6updateEb+0x3a0>
	
	T tempErrorSum = errorSum + input;
	if (tempErrorSum > this->parameter.maxErrorSum) {
		tempErrorSum = this->parameter.maxErrorSum;
	}
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
 8000dac:	eeb1 7a47 	vneg.f32	s14, s14
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	bf58      	it	pl
 8000dba:	eeb0 7a67 	vmovpl.f32	s14, s15
 8000dbe:	e6c5      	b.n	8000b4c <_ZN7ControlIL4Axis5EE6updateEb+0x16c>
	if (tempErrorSum > this->parameter.maxErrorSum) {
		tempErrorSum = this->parameter.maxErrorSum;
	}
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
 8000dc0:	eeb1 7a47 	vneg.f32	s14, s14
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	bf58      	it	pl
 8000dce:	eeb0 7a67 	vmovpl.f32	s14, s15
 8000dd2:	e649      	b.n	8000a68 <_ZN7ControlIL4Axis5EE6updateEb+0x88>
	if (tempErrorSum > this->parameter.maxErrorSum) {
		tempErrorSum = this->parameter.maxErrorSum;
	}
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
 8000dd4:	eeb1 7a47 	vneg.f32	s14, s14
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	bf58      	it	pl
 8000de2:	eeb0 7a67 	vmovpl.f32	s14, s15
 8000de6:	e7a4      	b.n	8000d32 <_ZN7ControlIL4Axis5EE6updateEb+0x352>
	if (tempErrorSum > this->parameter.maxErrorSum) {
		tempErrorSum = this->parameter.maxErrorSum;
	}
	else if (tempErrorSum < -this->parameter.maxErrorSum) {
 8000de8:	eeb1 7a47 	vneg.f32	s14, s14
void
xpcc::Pid<T, ScaleFactor>::update(const T& input, bool externalLimitation)
{
	bool limitation = externalLimitation;
	
	T tempErrorSum = errorSum + input;
 8000dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	bf58      	it	pl
 8000df6:	eeb0 7a67 	vmovpl.f32	s14, s15
 8000dfa:	e717      	b.n	8000c2c <_ZN7ControlIL4Axis5EE6updateEb+0x24c>
	if(speedControlEnabled){
		v_pid.update(v_shall - v_is);
		v_u = v_pid.getValue();
		v_ureal = v_u;
		SecurityController<axis>::saturate(v_ureal);
		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
 8000dfc:	b94c      	cbnz	r4, 8000e12 <_ZN7ControlIL4Axis5EE6updateEb+0x432>
 8000dfe:	683c      	ldr	r4, [r7, #0]
 8000e00:	680a      	ldr	r2, [r1, #0]
 8000e02:	1aa2      	subs	r2, r4, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	bfb8      	it	lt
 8000e08:	4252      	neglt	r2, r2
 8000e0a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8000e0e:	f6bf aee2 	bge.w	8000bd6 <_ZN7ControlIL4Axis5EE6updateEb+0x1f6>

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000e12:	4916      	ldr	r1, [pc, #88]	; (8000e6c <_ZN7ControlIL4Axis5EE6updateEb+0x48c>)
 8000e14:	2200      	movs	r2, #0
				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
			v_ureal = 0;
 8000e16:	2000      	movs	r0, #0
 8000e18:	6030      	str	r0, [r6, #0]
 8000e1a:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8000e1c:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8000e1e:	61da      	str	r2, [r3, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000e20:	614a      	str	r2, [r1, #20]
	this->lastError = 0;
 8000e22:	618a      	str	r2, [r1, #24]
	this->output = 0;
 8000e24:	61ca      	str	r2, [r1, #28]
 8000e26:	e6d6      	b.n	8000bd6 <_ZN7ControlIL4Axis5EE6updateEb+0x1f6>
	if(speedControlEnabled){
		v_pid.update(v_shall - v_is);
		v_u = v_pid.getValue();
		v_ureal = v_u;
		SecurityController<axis>::saturate(v_ureal);
		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
 8000e28:	b954      	cbnz	r4, 8000e40 <_ZN7ControlIL4Axis5EE6updateEb+0x460>
 8000e2a:	f8de 0000 	ldr.w	r0, [lr]
 8000e2e:	680a      	ldr	r2, [r1, #0]
 8000e30:	1a82      	subs	r2, r0, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	bfb8      	it	lt
 8000e36:	4252      	neglt	r2, r2
 8000e38:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8000e3c:	f6bf ae59 	bge.w	8000af2 <_ZN7ControlIL4Axis5EE6updateEb+0x112>

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000e40:	2200      	movs	r2, #0
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <_ZN7ControlIL4Axis5EE6updateEb+0x498>)
 8000e44:	615a      	str	r2, [r3, #20]
				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
			v_ureal = 0;
 8000e46:	2500      	movs	r5, #0
	this->lastError = 0;
 8000e48:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8000e4a:	61da      	str	r2, [r3, #28]
			v_pid.reset();
			pos_pid.reset();
		}
		Motor<axis>::setSpeed(v_ureal);
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <_ZN7ControlIL4Axis5EE6updateEb+0x49c>)
		v_u = v_pid.getValue();
		v_ureal = v_u;
		SecurityController<axis>::saturate(v_ureal);
		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
			v_ureal = 0;
 8000e50:	603d      	str	r5, [r7, #0]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000e52:	614a      	str	r2, [r1, #20]
	this->lastError = 0;
 8000e54:	618a      	str	r2, [r1, #24]
	this->output = 0;
 8000e56:	61ca      	str	r2, [r1, #28]
			v_pid.reset();
			pos_pid.reset();
		}
		Motor<axis>::setSpeed(v_ureal);
 8000e58:	4798      	blx	r3
 8000e5a:	e5d7      	b.n	8000a0c <_ZN7ControlIL4Axis5EE6updateEb+0x2c>
	}
	
	// If an external limitation (saturation somewhere in the control loop) is
	// applied the error sum will only be decremented, never incremented.
	// This is done to help the system to leave the saturated state.
	if (not limitation or (std::abs(tempErrorSum) < std::abs(this->errorSum)))
 8000e5c:	eeb0 6a67 	vmov.f32	s12, s15
 8000e60:	e798      	b.n	8000d94 <_ZN7ControlIL4Axis5EE6updateEb+0x3b4>
 8000e62:	eeb0 6a67 	vmov.f32	s12, s15
 8000e66:	e713      	b.n	8000c90 <_ZN7ControlIL4Axis5EE6updateEb+0x2b0>
 8000e68:	20000674 	.word	0x20000674
 8000e6c:	200006d4 	.word	0x200006d4
 8000e70:	00000000 	.word	0x00000000
 8000e74:	2000066c 	.word	0x2000066c
 8000e78:	2000068c 	.word	0x2000068c
 8000e7c:	080025ed 	.word	0x080025ed

08000e80 <_ZN7ControlIL4Axis2EE13getIsPositionEv>:
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	6a58      	ldr	r0, [r3, #36]	; 0x24
}

template<>
int32_t Control<Y>::getIsPosition(){
	return int32_t(xpcc::stm32::Timer2::getValue());
}
 8000e86:	4770      	bx	lr

08000e88 <_ZN7ControlIL4Axis0EE13getIsPositionEv>:
 8000e88:	4b01      	ldr	r3, [pc, #4]	; (8000e90 <_ZN7ControlIL4Axis0EE13getIsPositionEv+0x8>)
 8000e8a:	6a58      	ldr	r0, [r3, #36]	; 0x24

template<>
int32_t Control<X>::getIsPosition(){
	return int32_t(xpcc::stm32::Timer5::getValue());
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40000c00 	.word	0x40000c00

08000e94 <_ZN7ControlIL4Axis5EE9resetVPidEv>:

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000e94:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <_ZN7ControlIL4Axis5EE9resetVPidEv+0x14>)
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_ZN7ControlIL4Axis5EE9resetVPidEv+0x18>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	614b      	str	r3, [r1, #20]
	this->lastError = 0;
 8000e9c:	618b      	str	r3, [r1, #24]
	this->output = 0;
 8000e9e:	61cb      	str	r3, [r1, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000ea0:	6153      	str	r3, [r2, #20]
	this->lastError = 0;
 8000ea2:	6193      	str	r3, [r2, #24]
	this->output = 0;
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4770      	bx	lr
 8000ea8:	200006ac 	.word	0x200006ac
 8000eac:	200006f4 	.word	0x200006f4

08000eb0 <_ZN7ControlIL4Axis5EE11resetPosPidEv>:

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <_ZN7ControlIL4Axis5EE11resetPosPidEv+0x14>)
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_ZN7ControlIL4Axis5EE11resetPosPidEv+0x18>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	614b      	str	r3, [r1, #20]
	this->lastError = 0;
 8000eb8:	618b      	str	r3, [r1, #24]
	this->output = 0;
 8000eba:	61cb      	str	r3, [r1, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000ebc:	6153      	str	r3, [r2, #20]
	this->lastError = 0;
 8000ebe:	6193      	str	r3, [r2, #24]
	this->output = 0;
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4770      	bx	lr
 8000ec4:	2000068c 	.word	0x2000068c
 8000ec8:	200006d4 	.word	0x200006d4

08000ecc <_ZN7ControlIL4Axis5EE18enableSpeedControlEb>:

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000ecc:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <_ZN7ControlIL4Axis5EE18enableSpeedControlEb+0x1c>)
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <_ZN7ControlIL4Axis5EE18enableSpeedControlEb+0x20>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	614b      	str	r3, [r1, #20]
	this->lastError = 0;
 8000ed4:	618b      	str	r3, [r1, #24]
	this->output = 0;
 8000ed6:	61cb      	str	r3, [r1, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000ed8:	6153      	str	r3, [r2, #20]
	this->lastError = 0;
 8000eda:	6193      	str	r3, [r2, #24]
	this->output = 0;
 8000edc:	61d3      	str	r3, [r2, #28]
}

template<>
void Control<ALL>::enableSpeedControl(bool enable){
	Control<ALL>::resetVPid();
	Control<X>::speedControlEnabled = enable;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <_ZN7ControlIL4Axis5EE18enableSpeedControlEb+0x24>)
 8000ee0:	7018      	strb	r0, [r3, #0]
	Control<Y>::speedControlEnabled = enable;
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <_ZN7ControlIL4Axis5EE18enableSpeedControlEb+0x28>)
 8000ee4:	7018      	strb	r0, [r3, #0]
 8000ee6:	4770      	bx	lr
 8000ee8:	200006ac 	.word	0x200006ac
 8000eec:	200006f4 	.word	0x200006f4
 8000ef0:	20000689 	.word	0x20000689
 8000ef4:	200006d1 	.word	0x200006d1

08000ef8 <_ZN7ControlIL4Axis5EE21enablePositionControlEb>:
}

template<>
void Control<ALL>::enablePositionControl(bool enable){
 8000ef8:	b430      	push	{r4, r5}
	if(enable){
 8000efa:	b1b0      	cbz	r0, 8000f2a <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x32>
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x50>)

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000efe:	4913      	ldr	r1, [pc, #76]	; (8000f4c <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x54>)
 8000f00:	6a5c      	ldr	r4, [r3, #36]	; 0x24

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
	Control<ALL>::resetVPid();
	pos_shall = position;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x58>)
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x5c>)
 8000f06:	601c      	str	r4, [r3, #0]
 8000f08:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000f10:	614b      	str	r3, [r1, #20]
	this->lastError = 0;
 8000f12:	618b      	str	r3, [r1, #24]
	this->output = 0;
 8000f14:	61cb      	str	r3, [r1, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000f16:	6153      	str	r3, [r2, #20]
	this->lastError = 0;
 8000f18:	6193      	str	r3, [r2, #24]
	this->output = 0;
 8000f1a:	61d3      	str	r3, [r2, #28]
}

template<>
void Control<ALL>::enableSpeedControl(bool enable){
	Control<ALL>::resetVPid();
	Control<X>::speedControlEnabled = enable;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x60>)
 8000f1e:	2401      	movs	r4, #1
 8000f20:	701c      	strb	r4, [r3, #0]
	Control<Y>::speedControlEnabled = enable;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x64>)
 8000f24:	701c      	strb	r4, [r3, #0]
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x68>)
 8000f28:	601d      	str	r5, [r3, #0]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x6c>)
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x70>)
	if(enable){
		Control<ALL>::enableSpeedControl(true);
		Control<X>::setShallPosition(Control<X>::getIsPosition());
		Control<Y>::setShallPosition(Control<Y>::getIsPosition());
	}
	Control<X>::positionControlEnabled = enable;
 8000f2e:	4c0f      	ldr	r4, [pc, #60]	; (8000f6c <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x74>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	614b      	str	r3, [r1, #20]
	this->lastError = 0;
 8000f34:	618b      	str	r3, [r1, #24]
	this->output = 0;
 8000f36:	61cb      	str	r3, [r1, #28]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000f38:	6153      	str	r3, [r2, #20]
	this->lastError = 0;
 8000f3a:	6193      	str	r3, [r2, #24]
	this->output = 0;
 8000f3c:	61d3      	str	r3, [r2, #28]
	Control<Y>::positionControlEnabled = enable;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_ZN7ControlIL4Axis5EE21enablePositionControlEb+0x78>)
	if(enable){
		Control<ALL>::enableSpeedControl(true);
		Control<X>::setShallPosition(Control<X>::getIsPosition());
		Control<Y>::setShallPosition(Control<Y>::getIsPosition());
	}
	Control<X>::positionControlEnabled = enable;
 8000f40:	7020      	strb	r0, [r4, #0]
	Control<Y>::positionControlEnabled = enable;
 8000f42:	7018      	strb	r0, [r3, #0]
	Control<ALL>::resetPosPid();
}
 8000f44:	bc30      	pop	{r4, r5}
 8000f46:	4770      	bx	lr
 8000f48:	40000c00 	.word	0x40000c00
 8000f4c:	200006ac 	.word	0x200006ac
 8000f50:	20000680 	.word	0x20000680
 8000f54:	200006f4 	.word	0x200006f4
 8000f58:	20000689 	.word	0x20000689
 8000f5c:	200006d1 	.word	0x200006d1
 8000f60:	20000674 	.word	0x20000674
 8000f64:	2000068c 	.word	0x2000068c
 8000f68:	200006d4 	.word	0x200006d4
 8000f6c:	20000688 	.word	0x20000688
 8000f70:	200006d0 	.word	0x200006d0

08000f74 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf>:

template<>
void Control<ALL>::setMaxSpeed(float maxSpeed){
 8000f74:	ee07 0a90 	vmov	s15, r0
	if(maxSpeed > 1)
 8000f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 8000f7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f84:	dd0d      	ble.n	8000fa2 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x2e>
 8000f86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fc8 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x54>
		maxSpeed = 1;
 8000f8a:	eef0 7a66 	vmov.f32	s15, s13
		/**
		 *
		 */
		inline void
		setMaxOutput(T maxOutput){
			this->parameter.maxOutput = maxOutput;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x58>)
 8000f90:	ed83 7a04 	vstr	s14, [r3, #16]
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x5c>)
 8000f96:	ed83 7a04 	vstr	s14, [r3, #16]
	if(maxSpeed < 0)
		maxSpeed = 0;
	int speed = MOTOR_MAX_SPEED*maxSpeed;
	Control<X>::pos_pid.setMaxOutput(speed);
	Control<Y>::pos_pid.setMaxOutput(speed);
	Control<ALL>::maxSpeed = maxSpeed;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x60>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
 8000fa0:	4770      	bx	lr

template<>
void Control<ALL>::setMaxSpeed(float maxSpeed){
	if(maxSpeed > 1)
		maxSpeed = 1;
	if(maxSpeed < 0)
 8000fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	d504      	bpl.n	8000fb6 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x42>
 8000fac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd8 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x64>
		maxSpeed = 0;
 8000fb0:	eef0 7a47 	vmov.f32	s15, s14
 8000fb4:	e7eb      	b.n	8000f8e <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x1a>
 8000fb6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8000fc8 <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x54>
 8000fba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fbe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fc6:	e7e2      	b.n	8000f8e <_ZN7ControlIL4Axis5EE11setMaxSpeedEf+0x1a>
 8000fc8:	473f6800 	.word	0x473f6800
 8000fcc:	2000068c 	.word	0x2000068c
 8000fd0:	200006d4 	.word	0x200006d4
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	00000000 	.word	0x00000000

08000fdc <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE>:
template<Axis axis> float Control<axis>::maxSpeed;

template<Axis axis> bool Control<axis>::positionControlEnabled;
template<Axis axis> bool Control<axis>::speedControlEnabled;

template<Axis axis> xpcc::Pid<float, 1> Control<axis>::v_pid;
 8000fdc:	4920      	ldr	r1, [pc, #128]	; (8001060 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x84>)
 8000fde:	680b      	ldr	r3, [r1, #0]
 8000fe0:	07db      	lsls	r3, r3, #31
 8000fe2:	d40b      	bmi.n	8000ffc <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x20>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x88>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8000ff2:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8000ff4:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8000ff6:	61da      	str	r2, [r3, #28]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	491a      	ldr	r1, [pc, #104]	; (8001068 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x8c>)
 8000ffe:	680b      	ldr	r3, [r1, #0]
 8001000:	07d8      	lsls	r0, r3, #31
 8001002:	d40b      	bmi.n	800101c <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x40>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x90>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8001012:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8001014:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	2301      	movs	r3, #1
 800101a:	600b      	str	r3, [r1, #0]
template<Axis axis> xpcc::Pid<float, 1> Control<axis>::pos_pid;
 800101c:	4914      	ldr	r1, [pc, #80]	; (8001070 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x94>)
 800101e:	680b      	ldr	r3, [r1, #0]
 8001020:	07da      	lsls	r2, r3, #31
 8001022:	d40b      	bmi.n	800103c <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x60>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8001032:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8001034:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8001036:	61da      	str	r2, [r3, #28]
 8001038:	2301      	movs	r3, #1
 800103a:	600b      	str	r3, [r1, #0]
 800103c:	490e      	ldr	r1, [pc, #56]	; (8001078 <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x9c>)
 800103e:	680b      	ldr	r3, [r1, #0]
 8001040:	07db      	lsls	r3, r3, #31
 8001042:	d40b      	bmi.n	800105c <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0x80>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <_GLOBAL__sub_I__ZN7ControlIL4Axis5EE8maxSpeedE+0xa0>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8001052:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8001054:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8001056:	61da      	str	r2, [r3, #28]
 8001058:	2301      	movs	r3, #1
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000724 	.word	0x20000724
 8001064:	200006ac 	.word	0x200006ac
 8001068:	20000728 	.word	0x20000728
 800106c:	200006f4 	.word	0x200006f4
 8001070:	2000072c 	.word	0x2000072c
 8001074:	2000068c 	.word	0x2000068c
 8001078:	20000730 	.word	0x20000730
 800107c:	200006d4 	.word	0x200006d4

08001080 <_ZN7Encoder4initEv>:

namespace Encoder{

void encodersInit();

bool init(){
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
void encodersInit (void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  // turn on the clocks for each of the ports needed
  RCC_AHB1PeriphClockCmd (ENCLA_GPIO_CLK, ENABLE);
 8001084:	2001      	movs	r0, #1

namespace Encoder{

void encodersInit();

bool init(){
 8001086:	b083      	sub	sp, #12
 */
void encodersInit (void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  // turn on the clocks for each of the ports needed
  RCC_AHB1PeriphClockCmd (ENCLA_GPIO_CLK, ENABLE);
 8001088:	4c39      	ldr	r4, [pc, #228]	; (8001170 <_ZN7Encoder4initEv+0xf0>)
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
 800108a:	4d3a      	ldr	r5, [pc, #232]	; (8001174 <_ZN7Encoder4initEv+0xf4>)
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
  GPIO_Init (ENCLB_GPIO_PORT, &GPIO_InitStructure);
 800108c:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001194 <_ZN7Encoder4initEv+0x114>
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
 8001090:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8001198 <_ZN7Encoder4initEv+0x118>
  GPIO_Init (ENCRA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCRB_PIN;
  GPIO_Init (ENCRB_GPIO_PORT, &GPIO_InitStructure);

  // Connect the pins to their Alternate Functions
  GPIO_PinAFConfig (ENCLA_GPIO_PORT, ENCLA_SOURCE, ENCLA_AF);
 8001094:	4f38      	ldr	r7, [pc, #224]	; (8001178 <_ZN7Encoder4initEv+0xf8>)
                              TIM_ICPolarity_Rising,
                              TIM_ICPolarity_Rising);
  TIM_SetAutoreload (ENCL_TIMER, 4294967295);
  TIM_EncoderInterfaceConfig (ENCR_TIMER, TIM_EncoderMode_TI12,
                              TIM_ICPolarity_Rising,
                              TIM_ICPolarity_Rising);
 8001096:	4e39      	ldr	r6, [pc, #228]	; (800117c <_ZN7Encoder4initEv+0xfc>)
 */
void encodersInit (void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  // turn on the clocks for each of the ports needed
  RCC_AHB1PeriphClockCmd (ENCLA_GPIO_CLK, ENABLE);
 8001098:	4601      	mov	r1, r0
 800109a:	47a0      	blx	r4
  RCC_AHB1PeriphClockCmd (ENCLB_GPIO_CLK, ENABLE);
 800109c:	2002      	movs	r0, #2
 800109e:	2101      	movs	r1, #1
 80010a0:	47a0      	blx	r4
  RCC_AHB1PeriphClockCmd (ENCRA_GPIO_CLK, ENABLE);
 80010a2:	2001      	movs	r0, #1
 80010a4:	4601      	mov	r1, r0
 80010a6:	47a0      	blx	r4
  RCC_AHB1PeriphClockCmd (ENCRB_GPIO_CLK, ENABLE);
 80010a8:	2001      	movs	r0, #1
 80010aa:	4601      	mov	r1, r0
 80010ac:	47a0      	blx	r4

  // now configure the pins themselves
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
 80010ae:	4668      	mov	r0, sp
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <_ZN7Encoder4initEv+0x100>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80010b2:	2401      	movs	r4, #1
  RCC_AHB1PeriphClockCmd (ENCRA_GPIO_CLK, ENABLE);
  RCC_AHB1PeriphClockCmd (ENCRB_GPIO_CLK, ENABLE);

  // now configure the pins themselves
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
 80010b4:	4798      	blx	r3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010b6:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
 80010ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
 80010be:	4628      	mov	r0, r5
 80010c0:	4669      	mov	r1, sp
  // now configure the pins themselves
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
 80010c2:	9300      	str	r3, [sp, #0]
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
 80010c4:	f04f 0a08 	mov.w	sl, #8
  RCC_AHB1PeriphClockCmd (ENCRB_GPIO_CLK, ENABLE);

  // now configure the pins themselves
  // they are all going to be inputs with pullups
  GPIO_StructInit (&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80010c8:	f88d 8004 	strb.w	r8, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80010cc:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
 80010d0:	47c8      	blx	r9
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
  GPIO_Init (ENCLB_GPIO_PORT, &GPIO_InitStructure);
 80010d2:	4658      	mov	r0, fp
 80010d4:	4669      	mov	r1, sp
  GPIO_StructInit (&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
 80010d6:	f8cd a000 	str.w	sl, [sp]
  GPIO_Init (ENCLB_GPIO_PORT, &GPIO_InitStructure);
 80010da:	47c8      	blx	r9
  GPIO_InitStructure.GPIO_Pin = ENCRA_PIN;
  GPIO_Init (ENCRA_GPIO_PORT, &GPIO_InitStructure);
 80010dc:	4628      	mov	r0, r5
 80010de:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Pin = ENCLA_PIN;
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
  GPIO_Init (ENCLB_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCRA_PIN;
 80010e0:	9400      	str	r4, [sp, #0]
  GPIO_Init (ENCRA_GPIO_PORT, &GPIO_InitStructure);
 80010e2:	47c8      	blx	r9
  GPIO_InitStructure.GPIO_Pin = ENCRB_PIN;
  GPIO_Init (ENCRB_GPIO_PORT, &GPIO_InitStructure);
 80010e4:	4669      	mov	r1, sp
 80010e6:	4628      	mov	r0, r5
  GPIO_Init (ENCLA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCLB_PIN;
  GPIO_Init (ENCLB_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCRA_PIN;
  GPIO_Init (ENCRA_GPIO_PORT, &GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin = ENCRB_PIN;
 80010e8:	f8cd 8000 	str.w	r8, [sp]
  GPIO_Init (ENCRB_GPIO_PORT, &GPIO_InitStructure);
 80010ec:	47c8      	blx	r9

  // Connect the pins to their Alternate Functions
  GPIO_PinAFConfig (ENCLA_GPIO_PORT, ENCLA_SOURCE, ENCLA_AF);
 80010ee:	4628      	mov	r0, r5
 80010f0:	210f      	movs	r1, #15
 80010f2:	4622      	mov	r2, r4
 80010f4:	47b8      	blx	r7
  GPIO_PinAFConfig (ENCLB_GPIO_PORT, ENCLB_SOURCE, ENCLB_AF);
 80010f6:	4658      	mov	r0, fp
 80010f8:	2103      	movs	r1, #3
 80010fa:	4622      	mov	r2, r4
 80010fc:	47b8      	blx	r7
  GPIO_PinAFConfig (ENCRA_GPIO_PORT, ENCRA_SOURCE, ENCRA_AF);
 80010fe:	4628      	mov	r0, r5
 8001100:	2100      	movs	r1, #0
 8001102:	4642      	mov	r2, r8
 8001104:	47b8      	blx	r7
  GPIO_PinAFConfig (ENCRB_GPIO_PORT, ENCRB_SOURCE, ENCRB_AF);
 8001106:	4642      	mov	r2, r8
 8001108:	4628      	mov	r0, r5
 800110a:	4621      	mov	r1, r4
 800110c:	47b8      	blx	r7

  // Timer peripheral clock enable
  RCC_APB1PeriphClockCmd (ENCL_TIMER_CLK, ENABLE);
 800110e:	4620      	mov	r0, r4
 8001110:	4621      	mov	r1, r4
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <_ZN7Encoder4initEv+0x104>)
  RCC_APB1PeriphClockCmd (ENCR_TIMER_CLK, ENABLE);
 8001114:	4d1b      	ldr	r5, [pc, #108]	; (8001184 <_ZN7Encoder4initEv+0x104>)
  GPIO_PinAFConfig (ENCLB_GPIO_PORT, ENCLB_SOURCE, ENCLB_AF);
  GPIO_PinAFConfig (ENCRA_GPIO_PORT, ENCRA_SOURCE, ENCRA_AF);
  GPIO_PinAFConfig (ENCRB_GPIO_PORT, ENCRB_SOURCE, ENCRB_AF);

  // Timer peripheral clock enable
  RCC_APB1PeriphClockCmd (ENCL_TIMER_CLK, ENABLE);
 8001116:	4798      	blx	r3
  RCC_APB1PeriphClockCmd (ENCR_TIMER_CLK, ENABLE);
 8001118:	4650      	mov	r0, sl
 800111a:	4621      	mov	r1, r4
 800111c:	47a8      	blx	r5

  // set them up as encoder inputs
  // set both inputs to rising polarity to let it use both edges
  TIM_EncoderInterfaceConfig (ENCL_TIMER, TIM_EncoderMode_TI12,
                              TIM_ICPolarity_Rising,
                              TIM_ICPolarity_Rising);
 800111e:	2200      	movs	r2, #0
 8001120:	4613      	mov	r3, r2
 8001122:	2103      	movs	r1, #3
 8001124:	4d18      	ldr	r5, [pc, #96]	; (8001188 <_ZN7Encoder4initEv+0x108>)
 8001126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800112a:	47a8      	blx	r5
  TIM_SetAutoreload (ENCL_TIMER, 4294967295);
 800112c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <_ZN7Encoder4initEv+0x10c>)
 8001136:	4798      	blx	r3
  TIM_EncoderInterfaceConfig (ENCR_TIMER, TIM_EncoderMode_TI12,
                              TIM_ICPolarity_Rising,
                              TIM_ICPolarity_Rising);
 8001138:	2200      	movs	r2, #0
 800113a:	4613      	mov	r3, r2
 800113c:	2103      	movs	r1, #3
 800113e:	4630      	mov	r0, r6
 8001140:	47a8      	blx	r5
  TIM_SetAutoreload (ENCR_TIMER, 4294967295);
 8001142:	4630      	mov	r0, r6
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	4d10      	ldr	r5, [pc, #64]	; (800118c <_ZN7Encoder4initEv+0x10c>)
 800114a:	47a8      	blx	r5

  // turn on the timer/counters
  TIM_Cmd (ENCL_TIMER, ENABLE);
 800114c:	4621      	mov	r1, r4
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_ZN7Encoder4initEv+0x110>)
  TIM_Cmd (ENCR_TIMER, ENABLE);
 8001150:	4d0f      	ldr	r5, [pc, #60]	; (8001190 <_ZN7Encoder4initEv+0x110>)
                              TIM_ICPolarity_Rising,
                              TIM_ICPolarity_Rising);
  TIM_SetAutoreload (ENCR_TIMER, 4294967295);

  // turn on the timer/counters
  TIM_Cmd (ENCL_TIMER, ENABLE);
 8001152:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001156:	4798      	blx	r3
  TIM_Cmd (ENCR_TIMER, ENABLE);
 8001158:	4630      	mov	r0, r6
 800115a:	4621      	mov	r1, r4
 800115c:	47a8      	blx	r5
			}
			
			static inline void
			setValue(Value value)
			{
				TIM2->CNT = value;
 800115e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001162:	2300      	movs	r3, #0
 8001164:	6253      	str	r3, [r2, #36]	; 0x24

bool init(){
	encodersInit();
	Encoder::zero();
	return true;
}
 8001166:	4620      	mov	r0, r4
			}
			
			static inline void
			setValue(Value value)
			{
				TIM5->CNT = value;
 8001168:	6273      	str	r3, [r6, #36]	; 0x24
 800116a:	b003      	add	sp, #12
 800116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001170:	08007db9 	.word	0x08007db9
 8001174:	40020000 	.word	0x40020000
 8001178:	08007d89 	.word	0x08007d89
 800117c:	40000c00 	.word	0x40000c00
 8001180:	08007d75 	.word	0x08007d75
 8001184:	08007dd1 	.word	0x08007dd1
 8001188:	08007e09 	.word	0x08007e09
 800118c:	08007de9 	.word	0x08007de9
 8001190:	08007ded 	.word	0x08007ded
 8001194:	40020400 	.word	0x40020400
 8001198:	08007cd1 	.word	0x08007cd1

0800119c <_ZN7Encoder4zeroEv>:
 800119c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a0:	2300      	movs	r3, #0
 80011a2:	6253      	str	r3, [r2, #36]	; 0x24
 80011a4:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <_ZL5blinkv>:
GPIO__OUTPUT(ledRed, D, 14);
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
GPIO__OUTPUT(ledGreen, D, 12);

static void blink(){
 80011ac:	b508      	push	{r3, lr}

#include <xpcc/architecture.hpp>
#include "project.h"
#include "state.h"

GPIO__OUTPUT(ledRed, D, 14);
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <_ZL5blinkv+0xf8>)
 80011b0:	4c3d      	ldr	r4, [pc, #244]	; (80012a8 <_ZL5blinkv+0xfc>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011d8:	60da      	str	r2, [r3, #12]
GPIO__OUTPUT(ledBlue, D, 15);
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80011e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001200:	60da      	str	r2, [r3, #12]
GPIO__OUTPUT(ledOrange, D, 13);
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001208:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800121c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001228:	60da      	str	r2, [r3, #12]
GPIO__OUTPUT(ledGreen, D, 12);
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001230:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001244:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001250:	60da      	str	r2, [r3, #12]

#include <xpcc/architecture.hpp>
#include "project.h"
#include "state.h"

GPIO__OUTPUT(ledRed, D, 14);
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <_ZL5blinkv+0xf8>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	bf14      	ite	ne
 8001260:	835a      	strhne	r2, [r3, #26]
 8001262:	831a      	strheq	r2, [r3, #24]
GPIO__OUTPUT(ledBlue, D, 15);
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <_ZL5blinkv+0xf8>)
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800126c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001270:	bf14      	ite	ne
 8001272:	835a      	strhne	r2, [r3, #26]
 8001274:	831a      	strheq	r2, [r3, #24]
		}
		
		static inline void
		delay_ms(uint32_t ms)
		{
			::_delay_ms(ms);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	47a0      	blx	r4
GPIO__OUTPUT(ledOrange, D, 13);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <_ZL5blinkv+0xf8>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001286:	bf14      	ite	ne
 8001288:	835a      	strhne	r2, [r3, #26]
 800128a:	831a      	strheq	r2, [r3, #24]
GPIO__OUTPUT(ledGreen, D, 12);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <_ZL5blinkv+0xf8>)
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001298:	bf14      	ite	ne
 800129a:	835a      	strhne	r2, [r3, #26]
 800129c:	831a      	strheq	r2, [r3, #24]
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	47a0      	blx	r4
 80012a2:	e7d6      	b.n	8001252 <_ZL5blinkv+0xa6>
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	20000011 	.word	0x20000011

080012ac <HardFault_Handler_CPP>:
// hard fault handler in C,
// with stack frame location as input parameter
// called from HardFault_Handler in file xxx.s
// source: http://blog.frankvh.com/2011/12/07/cortex-m3-m4-hard-fault-handler/
extern "C" void
HardFault_Handler_CPP (unsigned int * hardfault_args){
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80012b0:	68c3      	ldr	r3, [r0, #12]
  unsigned int stacked_r12;
  unsigned int stacked_lr;
  unsigned int stacked_pc;
  unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80012b2:	f8d0 b000 	ldr.w	fp, [r0]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80012b6:	f8d0 a004 	ldr.w	sl, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80012ba:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80012be:	4c07      	ldr	r4, [pc, #28]	; (80012dc <HardFault_Handler_CPP+0x30>)
 80012c0:	4d07      	ldr	r5, [pc, #28]	; (80012e0 <HardFault_Handler_CPP+0x34>)
// hard fault handler in C,
// with stack frame location as input parameter
// called from HardFault_Handler in file xxx.s
// source: http://blog.frankvh.com/2011/12/07/cortex-m3-m4-hard-fault-handler/
extern "C" void
HardFault_Handler_CPP (unsigned int * hardfault_args){
 80012c2:	b087      	sub	sp, #28
  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);

  for(int i = 0; i < 10; i++){
 80012c4:	2600      	movs	r6, #0
  unsigned int stacked_psr;

  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80012c6:	9301      	str	r3, [sp, #4]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80012c8:	6903      	ldr	r3, [r0, #16]
 80012ca:	9302      	str	r3, [sp, #8]
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80012cc:	6943      	ldr	r3, [r0, #20]
 80012ce:	9303      	str	r3, [sp, #12]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80012d0:	6983      	ldr	r3, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80012d2:	69c0      	ldr	r0, [r0, #28]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80012d4:	9304      	str	r3, [sp, #16]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80012d6:	9005      	str	r0, [sp, #20]
 80012d8:	e0e9      	b.n	80014ae <HardFault_Handler_CPP+0x202>
 80012da:	bf00      	nop
 80012dc:	20001184 	.word	0x20001184
 80012e0:	0800796d 	.word	0x0800796d
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 80012e4:	2b02      	cmp	r3, #2
				this->writeBin(static_cast<uint8_t>(v >> 24));
 80012e6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80015a0 <HardFault_Handler_CPP+0x2f4>
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 80012ea:	f000 836d 	beq.w	80019c8 <HardFault_Handler_CPP+0x71c>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 80012ee:	4f9f      	ldr	r7, [pc, #636]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 80012f0:	489f      	ldr	r0, [pc, #636]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80012f2:	f898 1003 	ldrb.w	r1, [r8, #3]
 80012f6:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 80012f8:	489d      	ldr	r0, [pc, #628]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80012fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80012fe:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8001300:	489b      	ldr	r0, [pc, #620]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001302:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001306:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8001308:	4899      	ldr	r0, [pc, #612]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800130a:	f898 1000 	ldrb.w	r1, [r8]
 800130e:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001310:	6863      	ldr	r3, [r4, #4]
 8001312:	4897      	ldr	r0, [pc, #604]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 81f8 	beq.w	800170a <HardFault_Handler_CPP+0x45e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800131a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800131c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800131e:	bf0c      	ite	eq
 8001320:	4b94      	ldreq	r3, [pc, #592]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 8001322:	4b92      	ldrne	r3, [pc, #584]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001324:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	4891      	ldr	r0, [pc, #580]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 81f7 	beq.w	800171e <HardFault_Handler_CPP+0x472>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001330:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001332:	bf0c      	ite	eq
 8001334:	4b90      	ldreq	r3, [pc, #576]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 8001336:	4b91      	ldrne	r3, [pc, #580]	; (800157c <HardFault_Handler_CPP+0x2d0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001338:	4991      	ldr	r1, [pc, #580]	; (8001580 <HardFault_Handler_CPP+0x2d4>)
			}
			else {
				this->writeHex(s);
 800133a:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 800133c:	6863      	ldr	r3, [r4, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 81f6 	beq.w	8001730 <HardFault_Handler_CPP+0x484>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 8001344:	2b02      	cmp	r3, #2
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8001346:	f8df 825c 	ldr.w	r8, [pc, #604]	; 80015a4 <HardFault_Handler_CPP+0x2f8>
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 800134a:	f000 834f 	beq.w	80019ec <HardFault_Handler_CPP+0x740>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 800134e:	4f87      	ldr	r7, [pc, #540]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001350:	4887      	ldr	r0, [pc, #540]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001352:	f898 1003 	ldrb.w	r1, [r8, #3]
 8001356:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 8001358:	4885      	ldr	r0, [pc, #532]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800135a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800135e:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8001360:	4883      	ldr	r0, [pc, #524]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001362:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001366:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8001368:	4881      	ldr	r0, [pc, #516]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800136a:	f898 1000 	ldrb.w	r1, [r8]
 800136e:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	487f      	ldr	r0, [pc, #508]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 81e4 	beq.w	8001742 <HardFault_Handler_CPP+0x496>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800137a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800137c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800137e:	bf0c      	ite	eq
 8001380:	4b7c      	ldreq	r3, [pc, #496]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 8001382:	4b7a      	ldrne	r3, [pc, #488]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001384:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	4879      	ldr	r0, [pc, #484]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 81e3 	beq.w	8001756 <HardFault_Handler_CPP+0x4aa>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001390:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001392:	bf0c      	ite	eq
 8001394:	4b78      	ldreq	r3, [pc, #480]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 8001396:	4b79      	ldrne	r3, [pc, #484]	; (800157c <HardFault_Handler_CPP+0x2d0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001398:	497a      	ldr	r1, [pc, #488]	; (8001584 <HardFault_Handler_CPP+0x2d8>)
			}
			else {
				this->writeHex(s);
 800139a:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 81e2 	beq.w	8001768 <HardFault_Handler_CPP+0x4bc>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 80013a4:	2b02      	cmp	r3, #2
				this->writeBin(static_cast<uint8_t>(v >> 24));
 80013a6:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80015a8 <HardFault_Handler_CPP+0x2fc>
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 80013aa:	f000 82e9 	beq.w	8001980 <HardFault_Handler_CPP+0x6d4>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 80013ae:	4f6f      	ldr	r7, [pc, #444]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 80013b0:	486f      	ldr	r0, [pc, #444]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013b2:	f898 1003 	ldrb.w	r1, [r8, #3]
 80013b6:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 80013b8:	486d      	ldr	r0, [pc, #436]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013ba:	f898 1002 	ldrb.w	r1, [r8, #2]
 80013be:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 80013c0:	486b      	ldr	r0, [pc, #428]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013c2:	f898 1001 	ldrb.w	r1, [r8, #1]
 80013c6:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 80013c8:	4869      	ldr	r0, [pc, #420]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013ca:	f898 1000 	ldrb.w	r1, [r8]
 80013ce:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	4867      	ldr	r0, [pc, #412]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 81d0 	beq.w	800177a <HardFault_Handler_CPP+0x4ce>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80013da:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80013dc:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80013de:	bf0c      	ite	eq
 80013e0:	4b64      	ldreq	r3, [pc, #400]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 80013e2:	4b62      	ldrne	r3, [pc, #392]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 80013e4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80013e6:	6863      	ldr	r3, [r4, #4]
 80013e8:	4861      	ldr	r0, [pc, #388]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 81cf 	beq.w	800178e <HardFault_Handler_CPP+0x4e2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80013f0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80013f2:	bf0c      	ite	eq
 80013f4:	4b60      	ldreq	r3, [pc, #384]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 80013f6:	4b61      	ldrne	r3, [pc, #388]	; (800157c <HardFault_Handler_CPP+0x2d0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 80013f8:	4963      	ldr	r1, [pc, #396]	; (8001588 <HardFault_Handler_CPP+0x2dc>)
			}
			else {
				this->writeHex(s);
 80013fa:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 81ce 	beq.w	80017a0 <HardFault_Handler_CPP+0x4f4>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 8001404:	2b02      	cmp	r3, #2
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8001406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80015ac <HardFault_Handler_CPP+0x300>
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 800140a:	f000 82cb 	beq.w	80019a4 <HardFault_Handler_CPP+0x6f8>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 800140e:	4f57      	ldr	r7, [pc, #348]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001410:	4857      	ldr	r0, [pc, #348]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001412:	f898 1003 	ldrb.w	r1, [r8, #3]
 8001416:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 8001418:	4855      	ldr	r0, [pc, #340]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800141a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800141e:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8001420:	4853      	ldr	r0, [pc, #332]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001422:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001426:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8001428:	4851      	ldr	r0, [pc, #324]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800142a:	f898 1000 	ldrb.w	r1, [r8]
 800142e:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001430:	6863      	ldr	r3, [r4, #4]
 8001432:	484f      	ldr	r0, [pc, #316]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 81bc 	beq.w	80017b2 <HardFault_Handler_CPP+0x506>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800143a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800143c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800143e:	bf0c      	ite	eq
 8001440:	4b4c      	ldreq	r3, [pc, #304]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 8001442:	4b4a      	ldrne	r3, [pc, #296]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001444:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001446:	6863      	ldr	r3, [r4, #4]
 8001448:	4849      	ldr	r0, [pc, #292]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 81bb 	beq.w	80017c6 <HardFault_Handler_CPP+0x51a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001450:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001452:	bf0c      	ite	eq
 8001454:	4b48      	ldreq	r3, [pc, #288]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 8001456:	4b49      	ldrne	r3, [pc, #292]	; (800157c <HardFault_Handler_CPP+0x2d0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001458:	494c      	ldr	r1, [pc, #304]	; (800158c <HardFault_Handler_CPP+0x2e0>)
			}
			else {
				this->writeHex(s);
 800145a:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 800145c:	6863      	ldr	r3, [r4, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 81ba 	beq.w	80017d8 <HardFault_Handler_CPP+0x52c>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 8001464:	2b02      	cmp	r3, #2
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8001466:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80015b0 <HardFault_Handler_CPP+0x304>
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 800146a:	f000 8277 	beq.w	800195c <HardFault_Handler_CPP+0x6b0>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 800146e:	4f3f      	ldr	r7, [pc, #252]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 8001470:	483f      	ldr	r0, [pc, #252]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001472:	f898 1003 	ldrb.w	r1, [r8, #3]
 8001476:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 8001478:	483d      	ldr	r0, [pc, #244]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800147a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800147e:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8001480:	483b      	ldr	r0, [pc, #236]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001482:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001486:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8001488:	4839      	ldr	r0, [pc, #228]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 800148a:	f898 1000 	ldrb.w	r1, [r8]
 800148e:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	4837      	ldr	r0, [pc, #220]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 81a8 	beq.w	80017ea <HardFault_Handler_CPP+0x53e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800149a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800149c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800149e:	bf0c      	ite	eq
 80014a0:	4b34      	ldreq	r3, [pc, #208]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 80014a2:	4b32      	ldrne	r3, [pc, #200]	; (800156c <HardFault_Handler_CPP+0x2c0>)

  for(int i = 0; i < 10; i++){
 80014a4:	3601      	adds	r6, #1
 80014a6:	4798      	blx	r3
 80014a8:	2e0a      	cmp	r6, #10
 80014aa:	f000 81a7 	beq.w	80017fc <HardFault_Handler_CPP+0x550>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80014ae:	6863      	ldr	r3, [r4, #4]
 80014b0:	482f      	ldr	r0, [pc, #188]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 824c 	beq.w	8001950 <HardFault_Handler_CPP+0x6a4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80014b8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80014ba:	4935      	ldr	r1, [pc, #212]	; (8001590 <HardFault_Handler_CPP+0x2e4>)
 80014bc:	bf0c      	ite	eq
 80014be:	4b2e      	ldreq	r3, [pc, #184]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 80014c0:	4b2e      	ldrne	r3, [pc, #184]	; (800157c <HardFault_Handler_CPP+0x2d0>)
 80014c2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	482a      	ldr	r0, [pc, #168]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 823b 	beq.w	8001944 <HardFault_Handler_CPP+0x698>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80014ce:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80014d0:	4930      	ldr	r1, [pc, #192]	; (8001594 <HardFault_Handler_CPP+0x2e8>)
 80014d2:	bf0c      	ite	eq
 80014d4:	4b28      	ldreq	r3, [pc, #160]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 80014d6:	4b29      	ldrne	r3, [pc, #164]	; (800157c <HardFault_Handler_CPP+0x2d0>)
 80014d8:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 80014da:	4f25      	ldr	r7, [pc, #148]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80014dc:	4659      	mov	r1, fp
 80014de:	4638      	mov	r0, r7
 80014e0:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80014e2:	6863      	ldr	r3, [r4, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8227 	beq.w	8001938 <HardFault_Handler_CPP+0x68c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80014ea:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80014ec:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80014ee:	4638      	mov	r0, r7
 80014f0:	bf0c      	ite	eq
 80014f2:	4b20      	ldreq	r3, [pc, #128]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 80014f4:	4b1d      	ldrne	r3, [pc, #116]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 80014f6:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8215 	beq.w	800192c <HardFault_Handler_CPP+0x680>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001502:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001504:	4924      	ldr	r1, [pc, #144]	; (8001598 <HardFault_Handler_CPP+0x2ec>)
 8001506:	bf0c      	ite	eq
 8001508:	4b1b      	ldreq	r3, [pc, #108]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 800150a:	4b1c      	ldrne	r3, [pc, #112]	; (800157c <HardFault_Handler_CPP+0x2d0>)
 800150c:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 800150e:	4f18      	ldr	r7, [pc, #96]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001510:	4651      	mov	r1, sl
 8001512:	4638      	mov	r0, r7
 8001514:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8201 	beq.w	8001920 <HardFault_Handler_CPP+0x674>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800151e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001520:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001522:	4638      	mov	r0, r7
 8001524:	bf0c      	ite	eq
 8001526:	4b13      	ldreq	r3, [pc, #76]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 8001528:	4b10      	ldrne	r3, [pc, #64]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 800152a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 81ef 	beq.w	8001914 <HardFault_Handler_CPP+0x668>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001536:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001538:	4918      	ldr	r1, [pc, #96]	; (800159c <HardFault_Handler_CPP+0x2f0>)
 800153a:	bf0c      	ite	eq
 800153c:	4b0e      	ldreq	r3, [pc, #56]	; (8001578 <HardFault_Handler_CPP+0x2cc>)
			}
			else {
				this->writeHex(s);
 800153e:	4b0f      	ldrne	r3, [pc, #60]	; (800157c <HardFault_Handler_CPP+0x2d0>)
 8001540:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 8001542:	4f0b      	ldr	r7, [pc, #44]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001544:	4649      	mov	r1, r9
 8001546:	4638      	mov	r0, r7
 8001548:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 81db 	beq.w	8001908 <HardFault_Handler_CPP+0x65c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001552:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001554:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001556:	4638      	mov	r0, r7
 8001558:	bf0c      	ite	eq
 800155a:	4b06      	ldreq	r3, [pc, #24]	; (8001574 <HardFault_Handler_CPP+0x2c8>)
			}
			else {
				this->writeHex(v);
 800155c:	4b03      	ldrne	r3, [pc, #12]	; (800156c <HardFault_Handler_CPP+0x2c0>)
 800155e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001560:	6863      	ldr	r3, [r4, #4]
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <HardFault_Handler_CPP+0x2c4>)
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 81c9 	beq.w	80018fc <HardFault_Handler_CPP+0x650>
 800156a:	e023      	b.n	80015b4 <HardFault_Handler_CPP+0x308>
 800156c:	08007ac1 	.word	0x08007ac1
 8001570:	20001184 	.word	0x20001184
 8001574:	08007af5 	.word	0x08007af5
 8001578:	080079ed 	.word	0x080079ed
 800157c:	080079a9 	.word	0x080079a9
 8001580:	0800917c 	.word	0x0800917c
 8001584:	08009184 	.word	0x08009184
 8001588:	0800918c 	.word	0x0800918c
 800158c:	08009194 	.word	0x08009194
 8001590:	080090c4 	.word	0x080090c4
 8001594:	080090f4 	.word	0x080090f4
 8001598:	080090fc 	.word	0x080090fc
 800159c:	08009104 	.word	0x08009104
 80015a0:	e000ed38 	.word	0xe000ed38
 80015a4:	e000ed28 	.word	0xe000ed28
 80015a8:	e000ed2c 	.word	0xe000ed2c
 80015ac:	e000ed30 	.word	0xe000ed30
 80015b0:	e000ed3c 	.word	0xe000ed3c
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80015b4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80015b6:	4992      	ldr	r1, [pc, #584]	; (8001800 <HardFault_Handler_CPP+0x554>)
 80015b8:	bf0c      	ite	eq
 80015ba:	4b92      	ldreq	r3, [pc, #584]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 80015bc:	4b92      	ldrne	r3, [pc, #584]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 80015be:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 80015c0:	4f92      	ldr	r7, [pc, #584]	; (800180c <HardFault_Handler_CPP+0x560>)
 80015c2:	9901      	ldr	r1, [sp, #4]
 80015c4:	4638      	mov	r0, r7
 80015c6:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8190 	beq.w	80018f0 <HardFault_Handler_CPP+0x644>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80015d0:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80015d2:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80015d4:	4638      	mov	r0, r7
 80015d6:	bf0c      	ite	eq
 80015d8:	4b8d      	ldreq	r3, [pc, #564]	; (8001810 <HardFault_Handler_CPP+0x564>)
			}
			else {
				this->writeHex(v);
 80015da:	4b8e      	ldrne	r3, [pc, #568]	; (8001814 <HardFault_Handler_CPP+0x568>)
 80015dc:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80015de:	6863      	ldr	r3, [r4, #4]
 80015e0:	488a      	ldr	r0, [pc, #552]	; (800180c <HardFault_Handler_CPP+0x560>)
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 817e 	beq.w	80018e4 <HardFault_Handler_CPP+0x638>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80015e8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80015ea:	498b      	ldr	r1, [pc, #556]	; (8001818 <HardFault_Handler_CPP+0x56c>)
 80015ec:	bf0c      	ite	eq
 80015ee:	4b85      	ldreq	r3, [pc, #532]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 80015f0:	4b85      	ldrne	r3, [pc, #532]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 80015f2:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 80015f4:	4f85      	ldr	r7, [pc, #532]	; (800180c <HardFault_Handler_CPP+0x560>)
 80015f6:	9902      	ldr	r1, [sp, #8]
 80015f8:	4638      	mov	r0, r7
 80015fa:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 816a 	beq.w	80018d8 <HardFault_Handler_CPP+0x62c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001604:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001606:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001608:	4638      	mov	r0, r7
 800160a:	bf0c      	ite	eq
 800160c:	4b80      	ldreq	r3, [pc, #512]	; (8001810 <HardFault_Handler_CPP+0x564>)
			}
			else {
				this->writeHex(v);
 800160e:	4b81      	ldrne	r3, [pc, #516]	; (8001814 <HardFault_Handler_CPP+0x568>)
 8001610:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001612:	6863      	ldr	r3, [r4, #4]
 8001614:	487d      	ldr	r0, [pc, #500]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8158 	beq.w	80018cc <HardFault_Handler_CPP+0x620>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800161c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800161e:	497f      	ldr	r1, [pc, #508]	; (800181c <HardFault_Handler_CPP+0x570>)
 8001620:	bf0c      	ite	eq
 8001622:	4b78      	ldreq	r3, [pc, #480]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 8001624:	4b78      	ldrne	r3, [pc, #480]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 8001626:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 8001628:	4f78      	ldr	r7, [pc, #480]	; (800180c <HardFault_Handler_CPP+0x560>)
 800162a:	9903      	ldr	r1, [sp, #12]
 800162c:	4638      	mov	r0, r7
 800162e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8144 	beq.w	80018c0 <HardFault_Handler_CPP+0x614>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001638:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800163a:	4638      	mov	r0, r7
 800163c:	4978      	ldr	r1, [pc, #480]	; (8001820 <HardFault_Handler_CPP+0x574>)
 800163e:	bf0c      	ite	eq
 8001640:	4b70      	ldreq	r3, [pc, #448]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 8001642:	4b71      	ldrne	r3, [pc, #452]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 8001644:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001646:	6863      	ldr	r3, [r4, #4]
 8001648:	4870      	ldr	r0, [pc, #448]	; (800180c <HardFault_Handler_CPP+0x560>)
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8122 	beq.w	8001894 <HardFault_Handler_CPP+0x5e8>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001650:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001652:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001654:	bf0c      	ite	eq
 8001656:	4b6e      	ldreq	r3, [pc, #440]	; (8001810 <HardFault_Handler_CPP+0x564>)
			}
			else {
				this->writeHex(v);
 8001658:	4b6e      	ldrne	r3, [pc, #440]	; (8001814 <HardFault_Handler_CPP+0x568>)
 800165a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	486b      	ldr	r0, [pc, #428]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8111 	beq.w	8001888 <HardFault_Handler_CPP+0x5dc>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001666:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001668:	496e      	ldr	r1, [pc, #440]	; (8001824 <HardFault_Handler_CPP+0x578>)
 800166a:	bf0c      	ite	eq
 800166c:	4b65      	ldreq	r3, [pc, #404]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 800166e:	4b66      	ldrne	r3, [pc, #408]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 8001670:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 8001672:	4f66      	ldr	r7, [pc, #408]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001674:	9904      	ldr	r1, [sp, #16]
 8001676:	4638      	mov	r0, r7
 8001678:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800167a:	6863      	ldr	r3, [r4, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80fd 	beq.w	800187c <HardFault_Handler_CPP+0x5d0>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001682:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001684:	4638      	mov	r0, r7
 8001686:	4968      	ldr	r1, [pc, #416]	; (8001828 <HardFault_Handler_CPP+0x57c>)
 8001688:	bf0c      	ite	eq
 800168a:	4b5e      	ldreq	r3, [pc, #376]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 800168c:	4b5e      	ldrne	r3, [pc, #376]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 800168e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001690:	6863      	ldr	r3, [r4, #4]
 8001692:	485e      	ldr	r0, [pc, #376]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80e1 	beq.w	800185c <HardFault_Handler_CPP+0x5b0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800169a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800169c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800169e:	bf0c      	ite	eq
 80016a0:	4b5b      	ldreq	r3, [pc, #364]	; (8001810 <HardFault_Handler_CPP+0x564>)
			}
			else {
				this->writeHex(v);
 80016a2:	4b5c      	ldrne	r3, [pc, #368]	; (8001814 <HardFault_Handler_CPP+0x568>)
 80016a4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80016a6:	6863      	ldr	r3, [r4, #4]
 80016a8:	4858      	ldr	r0, [pc, #352]	; (800180c <HardFault_Handler_CPP+0x560>)
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80e0 	beq.w	8001870 <HardFault_Handler_CPP+0x5c4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80016b0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80016b2:	495e      	ldr	r1, [pc, #376]	; (800182c <HardFault_Handler_CPP+0x580>)
 80016b4:	bf0c      	ite	eq
 80016b6:	4b53      	ldreq	r3, [pc, #332]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 80016b8:	4b53      	ldrne	r3, [pc, #332]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 80016ba:	4798      	blx	r3
		}
		
		ALWAYS_INLINE IOStream&
		operator << (const unsigned int& v)
		{
			this->writeInteger(static_cast<uint32_t>(v));
 80016bc:	4f53      	ldr	r7, [pc, #332]	; (800180c <HardFault_Handler_CPP+0x560>)
 80016be:	9905      	ldr	r1, [sp, #20]
 80016c0:	4638      	mov	r0, r7
 80016c2:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80ea 	beq.w	80018a0 <HardFault_Handler_CPP+0x5f4>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80016cc:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80016ce:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80016d0:	4638      	mov	r0, r7
 80016d2:	bf0c      	ite	eq
 80016d4:	4b4e      	ldreq	r3, [pc, #312]	; (8001810 <HardFault_Handler_CPP+0x564>)
			}
			else {
				this->writeHex(v);
 80016d6:	4b4f      	ldrne	r3, [pc, #316]	; (8001814 <HardFault_Handler_CPP+0x568>)
 80016d8:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	484b      	ldr	r0, [pc, #300]	; (800180c <HardFault_Handler_CPP+0x560>)
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80e8 	beq.w	80018b4 <HardFault_Handler_CPP+0x608>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80016e4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80016e6:	4952      	ldr	r1, [pc, #328]	; (8001830 <HardFault_Handler_CPP+0x584>)
 80016e8:	bf0c      	ite	eq
 80016ea:	4b46      	ldreq	r3, [pc, #280]	; (8001804 <HardFault_Handler_CPP+0x558>)
			}
			else {
				this->writeHex(s);
 80016ec:	4b46      	ldrne	r3, [pc, #280]	; (8001808 <HardFault_Handler_CPP+0x55c>)
 80016ee:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f adf6 	bne.w	80012e4 <HardFault_Handler_CPP+0x38>
				this->writeInteger(v);
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HardFault_Handler_CPP+0x588>)
 80016fa:	4844      	ldr	r0, [pc, #272]	; (800180c <HardFault_Handler_CPP+0x560>)
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001700:	6863      	ldr	r3, [r4, #4]
 8001702:	4842      	ldr	r0, [pc, #264]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae08 	bne.w	800131a <HardFault_Handler_CPP+0x6e>
				this->device->write(v);
 800170a:	6800      	ldr	r0, [r0, #0]
 800170c:	6803      	ldr	r3, [r0, #0]
 800170e:	210a      	movs	r1, #10
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	483d      	ldr	r0, [pc, #244]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f ae09 	bne.w	8001330 <HardFault_Handler_CPP+0x84>
				this->device->write(s);
 800171e:	6800      	ldr	r0, [r0, #0]
 8001720:	4945      	ldr	r1, [pc, #276]	; (8001838 <HardFault_Handler_CPP+0x58c>)
 8001722:	6803      	ldr	r3, [r0, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f47f ae0a 	bne.w	8001344 <HardFault_Handler_CPP+0x98>
				this->writeInteger(v);
 8001730:	4b42      	ldr	r3, [pc, #264]	; (800183c <HardFault_Handler_CPP+0x590>)
 8001732:	4836      	ldr	r0, [pc, #216]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001738:	6863      	ldr	r3, [r4, #4]
 800173a:	4834      	ldr	r0, [pc, #208]	; (800180c <HardFault_Handler_CPP+0x560>)
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f ae1c 	bne.w	800137a <HardFault_Handler_CPP+0xce>
				this->device->write(v);
 8001742:	6800      	ldr	r0, [r0, #0]
 8001744:	6803      	ldr	r3, [r0, #0]
 8001746:	210a      	movs	r1, #10
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	482f      	ldr	r0, [pc, #188]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae1d 	bne.w	8001390 <HardFault_Handler_CPP+0xe4>
				this->device->write(s);
 8001756:	6800      	ldr	r0, [r0, #0]
 8001758:	4939      	ldr	r1, [pc, #228]	; (8001840 <HardFault_Handler_CPP+0x594>)
 800175a:	6803      	ldr	r3, [r0, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae1e 	bne.w	80013a4 <HardFault_Handler_CPP+0xf8>
				this->writeInteger(v);
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HardFault_Handler_CPP+0x598>)
 800176a:	4828      	ldr	r0, [pc, #160]	; (800180c <HardFault_Handler_CPP+0x560>)
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001770:	6863      	ldr	r3, [r4, #4]
 8001772:	4826      	ldr	r0, [pc, #152]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f ae30 	bne.w	80013da <HardFault_Handler_CPP+0x12e>
				this->device->write(v);
 800177a:	6800      	ldr	r0, [r0, #0]
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	210a      	movs	r1, #10
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001784:	6863      	ldr	r3, [r4, #4]
 8001786:	4821      	ldr	r0, [pc, #132]	; (800180c <HardFault_Handler_CPP+0x560>)
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f ae31 	bne.w	80013f0 <HardFault_Handler_CPP+0x144>
				this->device->write(s);
 800178e:	6800      	ldr	r0, [r0, #0]
 8001790:	492d      	ldr	r1, [pc, #180]	; (8001848 <HardFault_Handler_CPP+0x59c>)
 8001792:	6803      	ldr	r3, [r0, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f47f ae32 	bne.w	8001404 <HardFault_Handler_CPP+0x158>
				this->writeInteger(v);
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HardFault_Handler_CPP+0x5a0>)
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <HardFault_Handler_CPP+0x560>)
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	4818      	ldr	r0, [pc, #96]	; (800180c <HardFault_Handler_CPP+0x560>)
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f ae44 	bne.w	800143a <HardFault_Handler_CPP+0x18e>
				this->device->write(v);
 80017b2:	6800      	ldr	r0, [r0, #0]
 80017b4:	6803      	ldr	r3, [r0, #0]
 80017b6:	210a      	movs	r1, #10
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80017bc:	6863      	ldr	r3, [r4, #4]
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <HardFault_Handler_CPP+0x560>)
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f47f ae45 	bne.w	8001450 <HardFault_Handler_CPP+0x1a4>
				this->device->write(s);
 80017c6:	6800      	ldr	r0, [r0, #0]
 80017c8:	4921      	ldr	r1, [pc, #132]	; (8001850 <HardFault_Handler_CPP+0x5a4>)
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const uint32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 80017d0:	6863      	ldr	r3, [r4, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae46 	bne.w	8001464 <HardFault_Handler_CPP+0x1b8>
				this->writeInteger(v);
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HardFault_Handler_CPP+0x5a8>)
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <HardFault_Handler_CPP+0x560>)
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <HardFault_Handler_CPP+0x560>)
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f ae58 	bne.w	800149a <HardFault_Handler_CPP+0x1ee>
				this->device->write(v);
 80017ea:	6800      	ldr	r0, [r0, #0]
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	210a      	movs	r1, #10
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	3601      	adds	r6, #1
 80017f4:	4798      	blx	r3
 80017f6:	2e0a      	cmp	r6, #10
 80017f8:	f47f ae59 	bne.w	80014ae <HardFault_Handler_CPP+0x202>
	  cerr << "HFSR = " << (*(( unsigned long *)(0xE000ED2C))) << endl;
	  cerr << "DFSR = " << (*(( unsigned long *)(0xE000ED30))) << endl;
	  cerr << "AFSR = " << (*(( unsigned long *)(0xE000ED3C))) << endl;
	  //printf ("SCB_SHCSR = %x\n", SCB->SHCSR);
  }
  blink();
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HardFault_Handler_CPP+0x5ac>)
 80017fe:	4798      	blx	r3
 8001800:	0800910c 	.word	0x0800910c
 8001804:	080079ed 	.word	0x080079ed
 8001808:	080079a9 	.word	0x080079a9
 800180c:	20001184 	.word	0x20001184
 8001810:	08007af5 	.word	0x08007af5
 8001814:	08007ac1 	.word	0x08007ac1
 8001818:	08009114 	.word	0x08009114
 800181c:	0800911c 	.word	0x0800911c
 8001820:	08009128 	.word	0x08009128
 8001824:	0800914c 	.word	0x0800914c
 8001828:	08009158 	.word	0x08009158
 800182c:	0800916c 	.word	0x0800916c
 8001830:	08009174 	.word	0x08009174
 8001834:	e000ed38 	.word	0xe000ed38
 8001838:	0800917c 	.word	0x0800917c
 800183c:	e000ed28 	.word	0xe000ed28
 8001840:	08009184 	.word	0x08009184
 8001844:	e000ed2c 	.word	0xe000ed2c
 8001848:	0800918c 	.word	0x0800918c
 800184c:	e000ed30 	.word	0xe000ed30
 8001850:	08009194 	.word	0x08009194
 8001854:	e000ed3c 	.word	0xe000ed3c
 8001858:	080011ad 	.word	0x080011ad
 800185c:	6800      	ldr	r0, [r0, #0]
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	210a      	movs	r1, #10
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	4869      	ldr	r0, [pc, #420]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 800186a:	2b00      	cmp	r3, #0
 800186c:	f47f af20 	bne.w	80016b0 <HardFault_Handler_CPP+0x404>
				this->device->write(s);
 8001870:	6800      	ldr	r0, [r0, #0]
 8001872:	4968      	ldr	r1, [pc, #416]	; (8001a14 <HardFault_Handler_CPP+0x768>)
 8001874:	6803      	ldr	r3, [r0, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4798      	blx	r3
 800187a:	e71f      	b.n	80016bc <HardFault_Handler_CPP+0x410>
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	4966      	ldr	r1, [pc, #408]	; (8001a18 <HardFault_Handler_CPP+0x76c>)
 8001880:	6803      	ldr	r3, [r0, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4798      	blx	r3
 8001886:	e703      	b.n	8001690 <HardFault_Handler_CPP+0x3e4>
 8001888:	6800      	ldr	r0, [r0, #0]
 800188a:	4964      	ldr	r1, [pc, #400]	; (8001a1c <HardFault_Handler_CPP+0x770>)
 800188c:	6803      	ldr	r3, [r0, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4798      	blx	r3
 8001892:	e6ee      	b.n	8001672 <HardFault_Handler_CPP+0x3c6>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8001894:	6800      	ldr	r0, [r0, #0]
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	210a      	movs	r1, #10
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4798      	blx	r3
 800189e:	e6dd      	b.n	800165c <HardFault_Handler_CPP+0x3b0>
 80018a0:	6838      	ldr	r0, [r7, #0]
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	210a      	movs	r1, #10
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	4858      	ldr	r0, [pc, #352]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f af18 	bne.w	80016e4 <HardFault_Handler_CPP+0x438>
				this->device->write(s);
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	495a      	ldr	r1, [pc, #360]	; (8001a20 <HardFault_Handler_CPP+0x774>)
 80018b8:	6803      	ldr	r3, [r0, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4798      	blx	r3
 80018be:	e717      	b.n	80016f0 <HardFault_Handler_CPP+0x444>
 80018c0:	6838      	ldr	r0, [r7, #0]
 80018c2:	4958      	ldr	r1, [pc, #352]	; (8001a24 <HardFault_Handler_CPP+0x778>)
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4798      	blx	r3
 80018ca:	e6bc      	b.n	8001646 <HardFault_Handler_CPP+0x39a>
 80018cc:	6800      	ldr	r0, [r0, #0]
 80018ce:	4956      	ldr	r1, [pc, #344]	; (8001a28 <HardFault_Handler_CPP+0x77c>)
 80018d0:	6803      	ldr	r3, [r0, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4798      	blx	r3
 80018d6:	e6a7      	b.n	8001628 <HardFault_Handler_CPP+0x37c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	210a      	movs	r1, #10
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4798      	blx	r3
 80018e2:	e696      	b.n	8001612 <HardFault_Handler_CPP+0x366>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80018e4:	6800      	ldr	r0, [r0, #0]
 80018e6:	4951      	ldr	r1, [pc, #324]	; (8001a2c <HardFault_Handler_CPP+0x780>)
 80018e8:	6803      	ldr	r3, [r0, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4798      	blx	r3
 80018ee:	e681      	b.n	80015f4 <HardFault_Handler_CPP+0x348>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	210a      	movs	r1, #10
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4798      	blx	r3
 80018fa:	e670      	b.n	80015de <HardFault_Handler_CPP+0x332>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80018fc:	6800      	ldr	r0, [r0, #0]
 80018fe:	494c      	ldr	r1, [pc, #304]	; (8001a30 <HardFault_Handler_CPP+0x784>)
 8001900:	6803      	ldr	r3, [r0, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4798      	blx	r3
 8001906:	e65b      	b.n	80015c0 <HardFault_Handler_CPP+0x314>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	6803      	ldr	r3, [r0, #0]
 800190c:	210a      	movs	r1, #10
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4798      	blx	r3
 8001912:	e625      	b.n	8001560 <HardFault_Handler_CPP+0x2b4>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	4947      	ldr	r1, [pc, #284]	; (8001a34 <HardFault_Handler_CPP+0x788>)
 8001918:	6803      	ldr	r3, [r0, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4798      	blx	r3
 800191e:	e610      	b.n	8001542 <HardFault_Handler_CPP+0x296>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	6803      	ldr	r3, [r0, #0]
 8001924:	210a      	movs	r1, #10
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4798      	blx	r3
 800192a:	e5ff      	b.n	800152c <HardFault_Handler_CPP+0x280>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800192c:	6800      	ldr	r0, [r0, #0]
 800192e:	4942      	ldr	r1, [pc, #264]	; (8001a38 <HardFault_Handler_CPP+0x78c>)
 8001930:	6803      	ldr	r3, [r0, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4798      	blx	r3
 8001936:	e5ea      	b.n	800150e <HardFault_Handler_CPP+0x262>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	6803      	ldr	r3, [r0, #0]
 800193c:	210a      	movs	r1, #10
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4798      	blx	r3
 8001942:	e5d9      	b.n	80014f8 <HardFault_Handler_CPP+0x24c>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8001944:	6800      	ldr	r0, [r0, #0]
 8001946:	493d      	ldr	r1, [pc, #244]	; (8001a3c <HardFault_Handler_CPP+0x790>)
 8001948:	6803      	ldr	r3, [r0, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4798      	blx	r3
 800194e:	e5c4      	b.n	80014da <HardFault_Handler_CPP+0x22e>
 8001950:	6800      	ldr	r0, [r0, #0]
 8001952:	493b      	ldr	r1, [pc, #236]	; (8001a40 <HardFault_Handler_CPP+0x794>)
 8001954:	6803      	ldr	r3, [r0, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4798      	blx	r3
 800195a:	e5b3      	b.n	80014c4 <HardFault_Handler_CPP+0x218>
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 800195c:	4f39      	ldr	r7, [pc, #228]	; (8001a44 <HardFault_Handler_CPP+0x798>)
 800195e:	f898 1003 	ldrb.w	r1, [r8, #3]
 8001962:	482b      	ldr	r0, [pc, #172]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001964:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 8001966:	f898 1002 	ldrb.w	r1, [r8, #2]
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 800196c:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 800196e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001972:	4827      	ldr	r0, [pc, #156]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001974:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 8001976:	4826      	ldr	r0, [pc, #152]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001978:	f898 1000 	ldrb.w	r1, [r8]
 800197c:	47b8      	blx	r7
 800197e:	e587      	b.n	8001490 <HardFault_Handler_CPP+0x1e4>
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8001980:	4f30      	ldr	r7, [pc, #192]	; (8001a44 <HardFault_Handler_CPP+0x798>)
 8001982:	f898 1003 	ldrb.w	r1, [r8, #3]
 8001986:	4822      	ldr	r0, [pc, #136]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001988:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 800198a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800198e:	4820      	ldr	r0, [pc, #128]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001990:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 8001992:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001996:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001998:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 800199a:	481d      	ldr	r0, [pc, #116]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 800199c:	f898 1000 	ldrb.w	r1, [r8]
 80019a0:	47b8      	blx	r7
 80019a2:	e515      	b.n	80013d0 <HardFault_Handler_CPP+0x124>
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 80019a4:	4f27      	ldr	r7, [pc, #156]	; (8001a44 <HardFault_Handler_CPP+0x798>)
 80019a6:	f898 1003 	ldrb.w	r1, [r8, #3]
 80019aa:	4819      	ldr	r0, [pc, #100]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019ac:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 80019ae:	f898 1002 	ldrb.w	r1, [r8, #2]
 80019b2:	4817      	ldr	r0, [pc, #92]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019b4:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 80019b6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019bc:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019c0:	f898 1000 	ldrb.w	r1, [r8]
 80019c4:	47b8      	blx	r7
 80019c6:	e533      	b.n	8001430 <HardFault_Handler_CPP+0x184>
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 80019c8:	4f1e      	ldr	r7, [pc, #120]	; (8001a44 <HardFault_Handler_CPP+0x798>)
 80019ca:	f898 1003 	ldrb.w	r1, [r8, #3]
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019d0:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 80019d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019d8:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 80019da:	f898 1001 	ldrb.w	r1, [r8, #1]
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019e0:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 80019e2:	480b      	ldr	r0, [pc, #44]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019e4:	f898 1000 	ldrb.w	r1, [r8]
 80019e8:	47b8      	blx	r7
 80019ea:	e491      	b.n	8001310 <HardFault_Handler_CPP+0x64>
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 80019ec:	4f15      	ldr	r7, [pc, #84]	; (8001a44 <HardFault_Handler_CPP+0x798>)
 80019ee:	f898 1003 	ldrb.w	r1, [r8, #3]
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019f4:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 80019f6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 80019fc:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 80019fe:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001a04:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 8001a06:	4802      	ldr	r0, [pc, #8]	; (8001a10 <HardFault_Handler_CPP+0x764>)
 8001a08:	f898 1000 	ldrb.w	r1, [r8]
 8001a0c:	47b8      	blx	r7
 8001a0e:	e4af      	b.n	8001370 <HardFault_Handler_CPP+0xc4>
 8001a10:	20001184 	.word	0x20001184
 8001a14:	0800916c 	.word	0x0800916c
 8001a18:	08009158 	.word	0x08009158
 8001a1c:	0800914c 	.word	0x0800914c
 8001a20:	08009174 	.word	0x08009174
 8001a24:	08009128 	.word	0x08009128
 8001a28:	0800911c 	.word	0x0800911c
 8001a2c:	08009114 	.word	0x08009114
 8001a30:	0800910c 	.word	0x0800910c
 8001a34:	08009104 	.word	0x08009104
 8001a38:	080090fc 	.word	0x080090fc
 8001a3c:	080090f4 	.word	0x080090f4
 8001a40:	080090c4 	.word	0x080090c4
 8001a44:	08007af5 	.word	0x08007af5

08001a48 <NMI_Handler>:
}

extern "C" void
NMI_Handler(void){
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	4d16      	ldr	r5, [pc, #88]	; (8001aa4 <NMI_Handler+0x5c>)
	for(int i = 0; i < 10; i++){
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	e011      	b.n	8001a74 <NMI_Handler+0x2c>
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001a50:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001a52:	bf0c      	ite	eq
 8001a54:	4b14      	ldreq	r3, [pc, #80]	; (8001aa8 <NMI_Handler+0x60>)
			}
			else {
				this->writeHex(s);
 8001a56:	4b15      	ldrne	r3, [pc, #84]	; (8001aac <NMI_Handler+0x64>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001a58:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <NMI_Handler+0x68>)
			}
			else {
				this->writeHex(s);
 8001a5a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001a5c:	686b      	ldr	r3, [r5, #4]
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <NMI_Handler+0x5c>)
 8001a60:	b1ab      	cbz	r3, 8001a8e <NMI_Handler+0x46>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001a62:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001a64:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001a66:	bf0c      	ite	eq
 8001a68:	4b12      	ldreq	r3, [pc, #72]	; (8001ab4 <NMI_Handler+0x6c>)
			}
			else {
				this->writeHex(v);
 8001a6a:	4b13      	ldrne	r3, [pc, #76]	; (8001ab8 <NMI_Handler+0x70>)
 8001a6c:	3401      	adds	r4, #1
 8001a6e:	4798      	blx	r3
 8001a70:	2c0a      	cmp	r4, #10
 8001a72:	d014      	beq.n	8001a9e <NMI_Handler+0x56>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001a74:	686b      	ldr	r3, [r5, #4]
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <NMI_Handler+0x5c>)
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <NMI_Handler+0x8>
				this->device->write(s);
 8001a7c:	6800      	ldr	r0, [r0, #0]
 8001a7e:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <NMI_Handler+0x68>)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001a86:	686b      	ldr	r3, [r5, #4]
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <NMI_Handler+0x5c>)
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e9      	bne.n	8001a62 <NMI_Handler+0x1a>
				this->device->write(v);
 8001a8e:	6800      	ldr	r0, [r0, #0]
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	210a      	movs	r1, #10
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	3401      	adds	r4, #1
 8001a98:	4798      	blx	r3
 8001a9a:	2c0a      	cmp	r4, #10
 8001a9c:	d1ea      	bne.n	8001a74 <NMI_Handler+0x2c>
		cerr << __PRETTY_FUNCTION__ << endl;
	}
	blink();
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <NMI_Handler+0x74>)
 8001aa0:	4798      	blx	r3
 8001aa2:	bf00      	nop
 8001aa4:	20001184 	.word	0x20001184
 8001aa8:	080079ed 	.word	0x080079ed
 8001aac:	080079a9 	.word	0x080079a9
 8001ab0:	080090b0 	.word	0x080090b0
 8001ab4:	08007af5 	.word	0x08007af5
 8001ab8:	08007ac1 	.word	0x08007ac1
 8001abc:	080011ad 	.word	0x080011ad

08001ac0 <MemManage_Handler>:
}

extern "C" void
MemManage_Handler(void){
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4d16      	ldr	r5, [pc, #88]	; (8001b1c <MemManage_Handler+0x5c>)
	for(int i = 0; i < 10; i++){
 8001ac4:	2400      	movs	r4, #0
 8001ac6:	e011      	b.n	8001aec <MemManage_Handler+0x2c>
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001ac8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001aca:	bf0c      	ite	eq
 8001acc:	4b14      	ldreq	r3, [pc, #80]	; (8001b20 <MemManage_Handler+0x60>)
			}
			else {
				this->writeHex(s);
 8001ace:	4b15      	ldrne	r3, [pc, #84]	; (8001b24 <MemManage_Handler+0x64>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001ad0:	4915      	ldr	r1, [pc, #84]	; (8001b28 <MemManage_Handler+0x68>)
			}
			else {
				this->writeHex(s);
 8001ad2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001ad4:	686b      	ldr	r3, [r5, #4]
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MemManage_Handler+0x5c>)
 8001ad8:	b1ab      	cbz	r3, 8001b06 <MemManage_Handler+0x46>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001ada:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001adc:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001ade:	bf0c      	ite	eq
 8001ae0:	4b12      	ldreq	r3, [pc, #72]	; (8001b2c <MemManage_Handler+0x6c>)
			}
			else {
				this->writeHex(v);
 8001ae2:	4b13      	ldrne	r3, [pc, #76]	; (8001b30 <MemManage_Handler+0x70>)
 8001ae4:	3401      	adds	r4, #1
 8001ae6:	4798      	blx	r3
 8001ae8:	2c0a      	cmp	r4, #10
 8001aea:	d014      	beq.n	8001b16 <MemManage_Handler+0x56>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001aec:	686b      	ldr	r3, [r5, #4]
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MemManage_Handler+0x5c>)
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <MemManage_Handler+0x8>
				this->device->write(s);
 8001af4:	6800      	ldr	r0, [r0, #0]
 8001af6:	490c      	ldr	r1, [pc, #48]	; (8001b28 <MemManage_Handler+0x68>)
 8001af8:	6803      	ldr	r3, [r0, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001afe:	686b      	ldr	r3, [r5, #4]
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MemManage_Handler+0x5c>)
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e9      	bne.n	8001ada <MemManage_Handler+0x1a>
				this->device->write(v);
 8001b06:	6800      	ldr	r0, [r0, #0]
 8001b08:	6803      	ldr	r3, [r0, #0]
 8001b0a:	210a      	movs	r1, #10
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	3401      	adds	r4, #1
 8001b10:	4798      	blx	r3
 8001b12:	2c0a      	cmp	r4, #10
 8001b14:	d1ea      	bne.n	8001aec <MemManage_Handler+0x2c>
		cerr << __PRETTY_FUNCTION__ << endl;
	}
	blink();
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MemManage_Handler+0x74>)
 8001b18:	4798      	blx	r3
 8001b1a:	bf00      	nop
 8001b1c:	20001184 	.word	0x20001184
 8001b20:	080079ed 	.word	0x080079ed
 8001b24:	080079a9 	.word	0x080079a9
 8001b28:	0800919c 	.word	0x0800919c
 8001b2c:	08007af5 	.word	0x08007af5
 8001b30:	08007ac1 	.word	0x08007ac1
 8001b34:	080011ad 	.word	0x080011ad

08001b38 <BusFault_Handler>:
}

extern "C" void
BusFault_Handler(void){
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4d16      	ldr	r5, [pc, #88]	; (8001b94 <BusFault_Handler+0x5c>)
	for(int i = 0; i < 10; i++){
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	e011      	b.n	8001b64 <BusFault_Handler+0x2c>
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001b40:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001b42:	bf0c      	ite	eq
 8001b44:	4b14      	ldreq	r3, [pc, #80]	; (8001b98 <BusFault_Handler+0x60>)
			}
			else {
				this->writeHex(s);
 8001b46:	4b15      	ldrne	r3, [pc, #84]	; (8001b9c <BusFault_Handler+0x64>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001b48:	4915      	ldr	r1, [pc, #84]	; (8001ba0 <BusFault_Handler+0x68>)
			}
			else {
				this->writeHex(s);
 8001b4a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001b4c:	686b      	ldr	r3, [r5, #4]
 8001b4e:	4811      	ldr	r0, [pc, #68]	; (8001b94 <BusFault_Handler+0x5c>)
 8001b50:	b1ab      	cbz	r3, 8001b7e <BusFault_Handler+0x46>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001b52:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001b54:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001b56:	bf0c      	ite	eq
 8001b58:	4b12      	ldreq	r3, [pc, #72]	; (8001ba4 <BusFault_Handler+0x6c>)
			}
			else {
				this->writeHex(v);
 8001b5a:	4b13      	ldrne	r3, [pc, #76]	; (8001ba8 <BusFault_Handler+0x70>)
 8001b5c:	3401      	adds	r4, #1
 8001b5e:	4798      	blx	r3
 8001b60:	2c0a      	cmp	r4, #10
 8001b62:	d014      	beq.n	8001b8e <BusFault_Handler+0x56>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001b64:	686b      	ldr	r3, [r5, #4]
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <BusFault_Handler+0x5c>)
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e9      	bne.n	8001b40 <BusFault_Handler+0x8>
				this->device->write(s);
 8001b6c:	6800      	ldr	r0, [r0, #0]
 8001b6e:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <BusFault_Handler+0x68>)
 8001b70:	6803      	ldr	r3, [r0, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001b76:	686b      	ldr	r3, [r5, #4]
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <BusFault_Handler+0x5c>)
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e9      	bne.n	8001b52 <BusFault_Handler+0x1a>
				this->device->write(v);
 8001b7e:	6800      	ldr	r0, [r0, #0]
 8001b80:	6803      	ldr	r3, [r0, #0]
 8001b82:	210a      	movs	r1, #10
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	3401      	adds	r4, #1
 8001b88:	4798      	blx	r3
 8001b8a:	2c0a      	cmp	r4, #10
 8001b8c:	d1ea      	bne.n	8001b64 <BusFault_Handler+0x2c>
		cerr << __PRETTY_FUNCTION__ << endl;
	}
	blink();
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <BusFault_Handler+0x74>)
 8001b90:	4798      	blx	r3
 8001b92:	bf00      	nop
 8001b94:	20001184 	.word	0x20001184
 8001b98:	080079ed 	.word	0x080079ed
 8001b9c:	080079a9 	.word	0x080079a9
 8001ba0:	080091b8 	.word	0x080091b8
 8001ba4:	08007af5 	.word	0x08007af5
 8001ba8:	08007ac1 	.word	0x08007ac1
 8001bac:	080011ad 	.word	0x080011ad

08001bb0 <UsageFault_Handler>:
}

extern "C" void
UsageFault_Handler(void){
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4d16      	ldr	r5, [pc, #88]	; (8001c0c <UsageFault_Handler+0x5c>)
	for(int i = 0; i < 10; i++){
 8001bb4:	2400      	movs	r4, #0
 8001bb6:	e011      	b.n	8001bdc <UsageFault_Handler+0x2c>
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001bb8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001bba:	bf0c      	ite	eq
 8001bbc:	4b14      	ldreq	r3, [pc, #80]	; (8001c10 <UsageFault_Handler+0x60>)
			}
			else {
				this->writeHex(s);
 8001bbe:	4b15      	ldrne	r3, [pc, #84]	; (8001c14 <UsageFault_Handler+0x64>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8001bc0:	4915      	ldr	r1, [pc, #84]	; (8001c18 <UsageFault_Handler+0x68>)
			}
			else {
				this->writeHex(s);
 8001bc2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001bc4:	686b      	ldr	r3, [r5, #4]
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <UsageFault_Handler+0x5c>)
 8001bc8:	b1ab      	cbz	r3, 8001bf6 <UsageFault_Handler+0x46>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8001bca:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001bcc:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001bce:	bf0c      	ite	eq
 8001bd0:	4b12      	ldreq	r3, [pc, #72]	; (8001c1c <UsageFault_Handler+0x6c>)
			}
			else {
				this->writeHex(v);
 8001bd2:	4b13      	ldrne	r3, [pc, #76]	; (8001c20 <UsageFault_Handler+0x70>)
 8001bd4:	3401      	adds	r4, #1
 8001bd6:	4798      	blx	r3
 8001bd8:	2c0a      	cmp	r4, #10
 8001bda:	d014      	beq.n	8001c06 <UsageFault_Handler+0x56>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001bdc:	686b      	ldr	r3, [r5, #4]
 8001bde:	480b      	ldr	r0, [pc, #44]	; (8001c0c <UsageFault_Handler+0x5c>)
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <UsageFault_Handler+0x8>
				this->device->write(s);
 8001be4:	6800      	ldr	r0, [r0, #0]
 8001be6:	490c      	ldr	r1, [pc, #48]	; (8001c18 <UsageFault_Handler+0x68>)
 8001be8:	6803      	ldr	r3, [r0, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001bee:	686b      	ldr	r3, [r5, #4]
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <UsageFault_Handler+0x5c>)
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e9      	bne.n	8001bca <UsageFault_Handler+0x1a>
				this->device->write(v);
 8001bf6:	6800      	ldr	r0, [r0, #0]
 8001bf8:	6803      	ldr	r3, [r0, #0]
 8001bfa:	210a      	movs	r1, #10
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	3401      	adds	r4, #1
 8001c00:	4798      	blx	r3
 8001c02:	2c0a      	cmp	r4, #10
 8001c04:	d1ea      	bne.n	8001bdc <UsageFault_Handler+0x2c>
		cerr << __PRETTY_FUNCTION__ << endl;
	}
	blink();
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <UsageFault_Handler+0x74>)
 8001c08:	4798      	blx	r3
 8001c0a:	bf00      	nop
 8001c0c:	20001184 	.word	0x20001184
 8001c10:	080079ed 	.word	0x080079ed
 8001c14:	080079a9 	.word	0x080079a9
 8001c18:	08009094 	.word	0x08009094
 8001c1c:	08007af5 	.word	0x08007af5
 8001c20:	08007ac1 	.word	0x08007ac1
 8001c24:	080011ad 	.word	0x080011ad

08001c28 <_ZN10HallSensorIL4Axis5EE4initEv>:
using namespace xpcc::stm32;

template<>
bool HallSensor<ALL>::init(){
	for(int i = 0; i < 2; i++){
		triggered[i] = false;
 8001c28:	4919      	ldr	r1, [pc, #100]	; (8001c90 <_ZN10HallSensorIL4Axis5EE4initEv+0x68>)
private:
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <_ZN10HallSensorIL4Axis5EE4initEv+0x6c>)
 8001c2c:	2000      	movs	r0, #0


using namespace xpcc::stm32;

template<>
bool HallSensor<ALL>::init(){
 8001c2e:	b508      	push	{r3, lr}
	for(int i = 0; i < 2; i++){
		triggered[i] = false;
 8001c30:	7008      	strb	r0, [r1, #0]
 8001c32:	7048      	strb	r0, [r1, #1]
 8001c34:	6811      	ldr	r1, [r2, #0]
	GPIO__INPUT(XEND, E, 7);
	GPIO__INPUT(YFRONT, D, 8);
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <_ZN10HallSensorIL4Axis5EE4initEv+0x70>)
private:
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
 8001c38:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8001c3c:	6011      	str	r1, [r2, #0]
 8001c3e:	68d1      	ldr	r1, [r2, #12]
 8001c40:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8001c44:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001c48:	60d1      	str	r1, [r2, #12]
	GPIO__INPUT(XEND, E, 7);
 8001c4a:	6811      	ldr	r1, [r2, #0]
 8001c4c:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8001c50:	6011      	str	r1, [r2, #0]
 8001c52:	68d1      	ldr	r1, [r2, #12]
 8001c54:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8001c58:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001c5c:	60d1      	str	r1, [r2, #12]
	GPIO__INPUT(YFRONT, D, 8);
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c70:	60da      	str	r2, [r3, #12]
	GPIO__INPUT(YEND, D, 9);
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c84:	2032      	movs	r0, #50	; 0x32
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <_ZN10HallSensorIL4Axis5EE4initEv+0x74>)
 8001c8a:	4798      	blx	r3
}

//#pragma GCC pop_options

#else
}
 8001c8c:	bd08      	pop	{r3, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000734 	.word	0x20000734
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	20000011 	.word	0x20000011

08001ca0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE4readERc>:
		{
		}
		
		virtual bool
		read(char& c)
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	b082      	sub	sp, #8
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
 8001ca8:	f10d 0007 	add.w	r0, sp, #7
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE4readERc+0x1c>)
		flush()
		{
		}
		
		virtual bool
		read(char& c)
 8001cae:	460c      	mov	r4, r1
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
 8001cb0:	4798      	blx	r3
 8001cb2:	b118      	cbz	r0, 8001cbc <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE4readERc+0x18>
				c = t;
 8001cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
				return true;
 8001cb8:	2001      	movs	r0, #1
		read(char& c)
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
				c = t;
 8001cba:	7023      	strb	r3, [r4, #0]
				return true;
			}
			else {
				return false;
			}
		}
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	08007679 	.word	0x08007679

08001cc4 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 8001cc4:	b538      	push	{r3, r4, r5, lr}
		{
			char c;
			while ((c = *s++)) {
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ccc:	b128      	cbz	r0, 8001cda <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEPKc+0x16>
 8001cce:	4d03      	ldr	r5, [pc, #12]	; (8001cdc <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEPKc+0x18>)
				T::write(static_cast<uint8_t>(c));
 8001cd0:	47a8      	blx	r5
		
		virtual void
		write(const char *s)
		{
			char c;
			while ((c = *s++)) {
 8001cd2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d1fa      	bne.n	8001cd0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEPKc+0xc>
 8001cda:	bd38      	pop	{r3, r4, r5, pc}
 8001cdc:	08007621 	.word	0x08007621

08001ce0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 8001ce0:	b508      	push	{r3, lr}
		{
			T::write(c);
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EE5writeEc+0xc>)
 8001ce6:	4798      	blx	r3
 8001ce8:	bd08      	pop	{r3, pc}
 8001cea:	bf00      	nop
 8001cec:	08007621 	.word	0x08007621

08001cf0 <_ZN4xpcc8IOStreamlsERKc.isra.0>:
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8001cf0:	6843      	ldr	r3, [r0, #4]
			}
			return *this;
		}

		IOStream&
		operator << (const char& v)
 8001cf2:	b510      	push	{r4, lr}
 8001cf4:	4604      	mov	r4, r0
		{
			if (this->mode == Mode::Ascii) {
 8001cf6:	b133      	cbz	r3, 8001d06 <_ZN4xpcc8IOStreamlsERKc.isra.0+0x16>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8001cf8:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8001cfa:	bf0c      	ite	eq
 8001cfc:	4b05      	ldreq	r3, [pc, #20]	; (8001d14 <_ZN4xpcc8IOStreamlsERKc.isra.0+0x24>)
			}
			else {
				this->writeHex(v);
 8001cfe:	4b06      	ldrne	r3, [pc, #24]	; (8001d18 <_ZN4xpcc8IOStreamlsERKc.isra.0+0x28>)
 8001d00:	4798      	blx	r3
			}
			return *this;
		}
 8001d02:	4620      	mov	r0, r4
 8001d04:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8001d06:	6800      	ldr	r0, [r0, #0]
 8001d08:	6803      	ldr	r3, [r0, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4798      	blx	r3
			}
			else {
				this->writeHex(v);
			}
			return *this;
		}
 8001d0e:	4620      	mov	r0, r4
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	08007af5 	.word	0x08007af5
 8001d18:	08007ac1 	.word	0x08007ac1

08001d1c <_ZN4xpccL8delay_msEm.constprop.2>:
		{
			::_delay_us(us);
		}
		
		static inline void
		delay_ms(uint32_t ms)
 8001d1c:	b508      	push	{r3, lr}
		{
			::_delay_ms(ms);
 8001d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d22:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <_ZN4xpccL8delay_msEm.constprop.2+0xc>)
 8001d24:	4798      	blx	r3
 8001d26:	bd08      	pop	{r3, pc}
 8001d28:	20000011 	.word	0x20000011

08001d2c <_ZN4xpcc5stm3214BufferedUsart3C1Emmb>:
			 * 			Interrupt vector priority (0=highest to 15=lowest)
			 * \param	blocking
			 * 			The write-function waits until a free slot is available
			 * 			in the send buffer.
			 */
			BufferedUsart3(uint32_t baudrate,
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
					uint32_t interruptPriority, bool blocking = true)
			{
				setBaudrate(baudrate, interruptPriority, blocking);
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <_ZN4xpcc5stm3214BufferedUsart3C1Emmb+0x14>)
 8001d38:	4798      	blx	r3
			}
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	bf00      	nop
 8001d40:	08007551 	.word	0x08007551

08001d44 <_ZN4xpcc8IODeviceC1Ev>:
	 */
	class IODevice
	{
	public :
		IODevice()
		{
 8001d44:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <_ZN4xpcc8IODeviceC1Ev+0x8>)
 8001d46:	6003      	str	r3, [r0, #0]
		}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	08009938 	.word	0x08009938

08001d50 <_ZN4xpcc8IODeviceD1Ev>:
		
		virtual
		~IODevice()
		{
 8001d50:	4b01      	ldr	r3, [pc, #4]	; (8001d58 <_ZN4xpcc8IODeviceD1Ev+0x8>)
 8001d52:	6003      	str	r3, [r0, #0]
		}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	08009938 	.word	0x08009938

08001d5c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED1Ev>:
	 * \endcode
	 * 
	 * \ingroup		io
	 */
	template<typename T>
	class IODeviceWrapper : public IODevice
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED1Ev+0x10>)
 8001d5e:	b510      	push	{r4, lr}
 8001d60:	4604      	mov	r4, r0
 8001d62:	6003      	str	r3, [r0, #0]
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED1Ev+0x14>)
 8001d66:	4798      	blx	r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	080091d8 	.word	0x080091d8
 8001d70:	08001d51 	.word	0x08001d51

08001d74 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED0Ev>:
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED0Ev+0x14>)
 8001d78:	4604      	mov	r4, r0
 8001d7a:	4798      	blx	r3
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EED0Ev+0x18>)
 8001d80:	4798      	blx	r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	08001d5d 	.word	0x08001d5d
 8001d8c:	08007891 	.word	0x08007891

08001d90 <_ZN4xpcc8IODeviceD0Ev>:
		IODevice()
		{
		}
		
		virtual
		~IODevice()
 8001d90:	b510      	push	{r4, lr}
		{
		}
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <_ZN4xpcc8IODeviceD0Ev+0x14>)
		IODevice()
		{
		}
		
		virtual
		~IODevice()
 8001d94:	4604      	mov	r4, r0
		{
		}
 8001d96:	4798      	blx	r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <_ZN4xpcc8IODeviceD0Ev+0x18>)
 8001d9c:	4798      	blx	r3
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	08001d51 	.word	0x08001d51
 8001da8:	08007891 	.word	0x08007891

08001dac <_ZN4xpcc8IOStreamlsEPKc>:
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8001dac:	6843      	ldr	r3, [r0, #4]
#endif
			return *this;
		}

		IOStream&
		operator << (const char* s)
 8001dae:	b510      	push	{r4, lr}
 8001db0:	4604      	mov	r4, r0
		{
			if( this->mode == Mode::Ascii ) {
 8001db2:	b133      	cbz	r3, 8001dc2 <_ZN4xpcc8IOStreamlsEPKc+0x16>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8001db4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8001db6:	bf0c      	ite	eq
 8001db8:	4b05      	ldreq	r3, [pc, #20]	; (8001dd0 <_ZN4xpcc8IOStreamlsEPKc+0x24>)
			}
			else {
				this->writeHex(s);
 8001dba:	4b06      	ldrne	r3, [pc, #24]	; (8001dd4 <_ZN4xpcc8IOStreamlsEPKc+0x28>)
 8001dbc:	4798      	blx	r3
			}
			return *this;
		}
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	6803      	ldr	r3, [r0, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4798      	blx	r3
			}
			else {
				this->writeHex(s);
			}
			return *this;
		}
 8001dca:	4620      	mov	r0, r4
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	080079ed 	.word	0x080079ed
 8001dd4:	080079a9 	.word	0x080079a9

08001dd8 <_ZN4xpcc9TimestampC1Ej>:
		typedef uint_fast16_t Type;
		
	public:
		///\param time in ms
		Timestamp(const uint_fast16_t time = 0) : 
			time(time)
 8001dd8:	6001      	str	r1, [r0, #0]
		{
		}
 8001dda:	4770      	bx	lr

08001ddc <_ZNK4xpcc9TimestampplERKS0_>:
		{
			return this->time;
		}

		inline Timestamp
		operator + (const Timestamp& other) const
 8001ddc:	b500      	push	{lr}
		{
			return Timestamp(time + other.time);
 8001dde:	6803      	ldr	r3, [r0, #0]
 8001de0:	6809      	ldr	r1, [r1, #0]
		{
			return this->time;
		}

		inline Timestamp
		operator + (const Timestamp& other) const
 8001de2:	b083      	sub	sp, #12
		{
			return Timestamp(time + other.time);
 8001de4:	18c9      	adds	r1, r1, r3
 8001de6:	a801      	add	r0, sp, #4
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <_ZNK4xpcc9TimestampplERKS0_+0x18>)
 8001dea:	4798      	blx	r3
		}
 8001dec:	9801      	ldr	r0, [sp, #4]
 8001dee:	b003      	add	sp, #12
 8001df0:	bd00      	pop	{pc}
 8001df2:	bf00      	nop
 8001df4:	08001dd9 	.word	0x08001dd9

08001df8 <_ZNK4xpcc9TimestampgeERKS0_>:
		}
		
		inline bool
		operator >= (const Timestamp& other) const
		{
			return ((int_fast16_t) (time - other.time)) >= 0;
 8001df8:	6803      	ldr	r3, [r0, #0]
 8001dfa:	680a      	ldr	r2, [r1, #0]
 8001dfc:	1a98      	subs	r0, r3, r2
		}
 8001dfe:	43c0      	mvns	r0, r0
 8001e00:	0fc0      	lsrs	r0, r0, #31
 8001e02:	4770      	bx	lr

08001e04 <_ZN5Laser12DoubleBuffer9getInSizeEv>:
		static int outSize;

	public:

		static inline int getInSize(){
			return inSize;
 8001e04:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <_ZN5Laser12DoubleBuffer9getInSizeEv+0x8>)
		}
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000778 	.word	0x20000778

08001e10 <_ZN5Laser12DoubleBuffer7addCharEh>:

		static inline void addChar(unsigned char c){
			bufInPtr[inSize] = c;
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <_ZN5Laser12DoubleBuffer7addCharEh+0x14>)
 8001e12:	4905      	ldr	r1, [pc, #20]	; (8001e28 <_ZN5Laser12DoubleBuffer7addCharEh+0x18>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	5488      	strb	r0, [r1, r2]
			inSize++;
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	3201      	adds	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000778 	.word	0x20000778
 8001e28:	20000048 	.word	0x20000048

08001e2c <_ZN5Laser12DoubleBuffer4swapEv>:
		 * Also resets input buffer and adds trailing
		 * null byte to new output buffer
		 */
		static inline void swap(){
			unsigned char* temp = bufInPtr;
			bufInPtr = bufOutPtr;
 8001e2c:	4808      	ldr	r0, [pc, #32]	; (8001e50 <_ZN5Laser12DoubleBuffer4swapEv+0x24>)
			bufOutPtr = temp;
			bufOutPtr[inSize] = '\0';
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <_ZN5Laser12DoubleBuffer4swapEv+0x28>)
		/**
		 * Also resets input buffer and adds trailing
		 * null byte to new output buffer
		 */
		static inline void swap(){
			unsigned char* temp = bufInPtr;
 8001e30:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <_ZN5Laser12DoubleBuffer4swapEv+0x2c>)

		/**
		 * Also resets input buffer and adds trailing
		 * null byte to new output buffer
		 */
		static inline void swap(){
 8001e32:	b430      	push	{r4, r5}
			unsigned char* temp = bufInPtr;
			bufInPtr = bufOutPtr;
 8001e34:	6805      	ldr	r5, [r0, #0]
		/**
		 * Also resets input buffer and adds trailing
		 * null byte to new output buffer
		 */
		static inline void swap(){
			unsigned char* temp = bufInPtr;
 8001e36:	6811      	ldr	r1, [r2, #0]
			bufInPtr = bufOutPtr;
			bufOutPtr = temp;
			bufOutPtr[inSize] = '\0';
 8001e38:	681c      	ldr	r4, [r3, #0]
		 * Also resets input buffer and adds trailing
		 * null byte to new output buffer
		 */
		static inline void swap(){
			unsigned char* temp = bufInPtr;
			bufInPtr = bufOutPtr;
 8001e3a:	6015      	str	r5, [r2, #0]
			bufOutPtr = temp;
			bufOutPtr[inSize] = '\0';
 8001e3c:	2200      	movs	r2, #0
		 * null byte to new output buffer
		 */
		static inline void swap(){
			unsigned char* temp = bufInPtr;
			bufInPtr = bufOutPtr;
			bufOutPtr = temp;
 8001e3e:	6001      	str	r1, [r0, #0]
			bufOutPtr[inSize] = '\0';
 8001e40:	550a      	strb	r2, [r1, r4]
			outSize = inSize;
 8001e42:	6819      	ldr	r1, [r3, #0]
			inSize = 0;
 8001e44:	601a      	str	r2, [r3, #0]
		static inline void swap(){
			unsigned char* temp = bufInPtr;
			bufInPtr = bufOutPtr;
			bufOutPtr = temp;
			bufOutPtr[inSize] = '\0';
			outSize = inSize;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <_ZN5Laser12DoubleBuffer4swapEv+0x30>)
 8001e48:	6019      	str	r1, [r3, #0]
			inSize = 0;
		}
 8001e4a:	bc30      	pop	{r4, r5}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000004c 	.word	0x2000004c
 8001e54:	20000778 	.word	0x20000778
 8001e58:	20000048 	.word	0x20000048
 8001e5c:	20000774 	.word	0x20000774

08001e60 <_ZN5Laser12DoubleBuffer5resetEv>:

		static inline void reset(){
			inSize = 0;
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <_ZN5Laser12DoubleBuffer5resetEv+0x8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	4770      	bx	lr
 8001e68:	20000778 	.word	0x20000778

08001e6c <_ZN5Laser12DoubleBuffer3getEv>:
		}

		static char* get(){
			return (char*)bufOutPtr;
 8001e6c:	4b01      	ldr	r3, [pc, #4]	; (8001e74 <_ZN5Laser12DoubleBuffer3getEv+0x8>)
		}
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2000004c 	.word	0x2000004c

08001e78 <_ZN5Laser4initEv>:
//==================================
void USART3_Init(void);
void DMAStream3_Channel4_Init();
void enable_USART3_Interrupts();

bool Laser::init(){
 8001e78:	b508      	push	{r3, lr}

static unsigned char* bufferOut = normalRequest;
static int expectedAnswerLength = normalRequestAnswerLength;
static int requestLength = normalRequestLength;

GPIO__INPUT(LASER_STATUS, E, 5);
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_ZN5Laser4initEv+0x24>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	enable_USART3_Interrupts();
	USART3_Init();
	DMAStream3_Channel4_Init();
	USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
#else
	uart3.configurePins(xpcc::stm32::BufferedUsart3::Mapping::REMAP_PC10_PC11);
 8001e8e:	2001      	movs	r0, #1

static unsigned char* bufferOut = normalRequest;
static int expectedAnswerLength = normalRequestAnswerLength;
static int requestLength = normalRequestLength;

GPIO__INPUT(LASER_STATUS, E, 5);
 8001e90:	60da      	str	r2, [r3, #12]
	enable_USART3_Interrupts();
	USART3_Init();
	DMAStream3_Channel4_Init();
	USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);
#else
	uart3.configurePins(xpcc::stm32::BufferedUsart3::Mapping::REMAP_PC10_PC11);
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <_ZN5Laser4initEv+0x28>)
 8001e94:	4798      	blx	r3
#endif
	return true;
}
 8001e96:	2001      	movs	r0, #1
 8001e98:	bd08      	pop	{r3, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080073f9 	.word	0x080073f9

08001ea4 <_ZN5Laser12getLastErrorEv>:

int Laser::getLastError(){
	return lastError;
 8001ea4:	4b01      	ldr	r3, [pc, #4]	; (8001eac <_ZN5Laser12getLastErrorEv+0x8>)
}
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000050 	.word	0x20000050

08001eb0 <_ZN5Laser15disableRequestsEv>:
#else
	sendMeasurementRequest();
#endif
}

void Laser::disableRequests(){
 8001eb0:	b508      	push	{r3, lr}
	DMA_Cmd(DMA1_Stream3, DISABLE);
 8001eb2:	4802      	ldr	r0, [pc, #8]	; (8001ebc <_ZN5Laser15disableRequestsEv+0xc>)
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <_ZN5Laser15disableRequestsEv+0x10>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4798      	blx	r3
 8001eba:	bd08      	pop	{r3, pc}
 8001ebc:	40026058 	.word	0x40026058
 8001ec0:	08007cbd 	.word	0x08007cbd

08001ec4 <_ZN5Laser10sendStringEPKc>:
}

void Laser::sendString(const char* cmd){
 8001ec4:	b508      	push	{r3, lr}
 8001ec6:	4601      	mov	r1, r0
	laserOutStream << cmd << '\r';
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <_ZN5Laser10sendStringEPKc+0x14>)
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <_ZN5Laser10sendStringEPKc+0x18>)
 8001ecc:	4798      	blx	r3
 8001ece:	210d      	movs	r1, #13
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <_ZN5Laser10sendStringEPKc+0x1c>)
 8001ed2:	4798      	blx	r3
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop
 8001ed8:	08001dad 	.word	0x08001dad
 8001edc:	200007b0 	.word	0x200007b0
 8001ee0:	08001cf1 	.word	0x08001cf1

08001ee4 <_ZN5Laser12DoubleBuffer4goodEv>:
int Laser::DoubleBuffer::asInt(){
	return good() ? atoi2(Laser::DoubleBuffer::get()+3, 0) : 9000;
}

int Laser::DoubleBuffer::good(){
	return lastError == -1 && outSize == expectedAnswerLength;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <_ZN5Laser12DoubleBuffer4goodEv+0x1c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <_ZN5Laser12DoubleBuffer4goodEv+0xc>
 8001eec:	2000      	movs	r0, #0
}
 8001eee:	4770      	bx	lr
int Laser::DoubleBuffer::asInt(){
	return good() ? atoi2(Laser::DoubleBuffer::get()+3, 0) : 9000;
}

int Laser::DoubleBuffer::good(){
	return lastError == -1 && outSize == expectedAnswerLength;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <_ZN5Laser12DoubleBuffer4goodEv+0x20>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	f1b0 030f 	subs.w	r3, r0, #15
 8001ef8:	4258      	negs	r0, r3
 8001efa:	4158      	adcs	r0, r3
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000050 	.word	0x20000050
 8001f04:	20000774 	.word	0x20000774

08001f08 <_Z24enable_USART3_Interruptsv>:
  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(DMA1_Stream3, &DMA_InitStruct);
}

void enable_USART3_Interrupts(){
 8001f08:	b530      	push	{r4, r5, lr}
	/* Here the USART3 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART3_IRQHandler() function
	 * if the USART3 receive interrupt occurs
	 */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8001f0a:	4c0e      	ldr	r4, [pc, #56]	; (8001f44 <_Z24enable_USART3_Interruptsv+0x3c>)
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <_Z24enable_USART3_Interruptsv+0x40>)
  DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(DMA1_Stream3, &DMA_InitStruct);
}

void enable_USART3_Interrupts(){
 8001f0e:	b083      	sub	sp, #12
	/* Here the USART3 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART3_IRQHandler() function
	 * if the USART3 receive interrupt occurs
	 */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8001f10:	4620      	mov	r0, r4
 8001f12:	f240 5125 	movw	r1, #1317	; 0x525
 8001f16:	2201      	movs	r2, #1
 8001f18:	4798      	blx	r3

	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;		 // we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART3 interrupts
 8001f1a:	2300      	movs	r3, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART3 interrupts are globally enabled
 8001f1c:	2501      	movs	r5, #1
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001f1e:	a801      	add	r0, sp, #4
	 * if the USART3 receive interrupt occurs
	 */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt

	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;		 // we want to configure the USART3 interrupts
 8001f20:	2227      	movs	r2, #39	; 0x27
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART3 interrupts
 8001f22:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 8001f26:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <_Z24enable_USART3_Interruptsv+0x44>)
	 * if the USART3 receive interrupt occurs
	 */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt

	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;		 // we want to configure the USART3 interrupts
 8001f2c:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART3 interrupts are globally enabled
 8001f30:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001f34:	4798      	blx	r3

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USART3, ENABLE);
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <_Z24enable_USART3_Interruptsv+0x48>)
 8001f3c:	4798      	blx	r3
}
 8001f3e:	b003      	add	sp, #12
 8001f40:	bd30      	pop	{r4, r5, pc}
 8001f42:	bf00      	nop
 8001f44:	40004800 	.word	0x40004800
 8001f48:	08007e65 	.word	0x08007e65
 8001f4c:	08007c49 	.word	0x08007c49
 8001f50:	08007e49 	.word	0x08007e49

08001f54 <_ZN5Laser22sendMeasurementRequestEv>:
	if(Laser::DoubleBuffer::getInSize() >= LASER_INPUT_BUFFER_SIZE){
		Laser::DoubleBuffer::reset(); //reset everything
	}
}

void Laser::sendMeasurementRequest(){
 8001f54:	b508      	push	{r3, lr}
	uart3.write(bufferOut, requestLength);
 8001f56:	4802      	ldr	r0, [pc, #8]	; (8001f60 <_ZN5Laser22sendMeasurementRequestEv+0xc>)
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <_ZN5Laser22sendMeasurementRequestEv+0x10>)
 8001f5a:	2105      	movs	r1, #5
 8001f5c:	4798      	blx	r3
 8001f5e:	bd08      	pop	{r3, pc}
 8001f60:	20000040 	.word	0x20000040
 8001f64:	080075b9 	.word	0x080075b9

08001f68 <_ZN5Laser10handleCharEc>:
	}
}

#endif

void Laser::handleChar(char c){
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
	Laser::DoubleBuffer::addChar(c);
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <_ZN5Laser10handleCharEc+0x8c>)
 8001f6e:	4798      	blx	r3

	if(c == '\r'){
 8001f70:	2c0d      	cmp	r4, #13
 8001f72:	d007      	beq.n	8001f84 <_ZN5Laser10handleCharEc+0x1c>
 8001f74:	4c20      	ldr	r4, [pc, #128]	; (8001ff8 <_ZN5Laser10handleCharEc+0x90>)
				lastError = 2000+Laser::DoubleBuffer::getInSize();
			}
		}
	}

	if(Laser::DoubleBuffer::getInSize() >= LASER_INPUT_BUFFER_SIZE){
 8001f76:	47a0      	blx	r4
 8001f78:	2831      	cmp	r0, #49	; 0x31
 8001f7a:	dc00      	bgt.n	8001f7e <_ZN5Laser10handleCharEc+0x16>
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
		Laser::DoubleBuffer::reset(); //reset everything
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <_ZN5Laser10handleCharEc+0x94>)
 8001f80:	4798      	blx	r3
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
	Laser::DoubleBuffer::addChar(c);

	if(c == '\r'){

#if !USE_LASER_DMA
		Laser::sendMeasurementRequest();
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <_ZN5Laser10handleCharEc+0x98>)
 8001f86:	4798      	blx	r3

static unsigned char* bufferOut = normalRequest;
static int expectedAnswerLength = normalRequestAnswerLength;
static int requestLength = normalRequestLength;

GPIO__INPUT(LASER_STATUS, E, 5);
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <_ZN5Laser10handleCharEc+0x9c>)
 8001f8a:	691c      	ldr	r4, [r3, #16]
#endif

		//do some sanity checks
		//active low -> high means invalid measurement
		bool nok = LASER_STATUS::read();
		State::setOrange(nok);
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <_ZN5Laser10handleCharEc+0xa0>)

static unsigned char* bufferOut = normalRequest;
static int expectedAnswerLength = normalRequestAnswerLength;
static int requestLength = normalRequestLength;

GPIO__INPUT(LASER_STATUS, E, 5);
 8001f8e:	f3c4 1440 	ubfx	r4, r4, #5, #1
#endif

		//do some sanity checks
		//active low -> high means invalid measurement
		bool nok = LASER_STATUS::read();
		State::setOrange(nok);
 8001f92:	4620      	mov	r0, r4
 8001f94:	4798      	blx	r3
		if(nok){
 8001f96:	bb14      	cbnz	r4, 8001fde <_ZN5Laser10handleCharEc+0x76>
			Laser::DoubleBuffer::reset();
			lastError = 3000;
			return;
		}

		if(Laser::DoubleBuffer::get()[0] == 'E'
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <_ZN5Laser10handleCharEc+0xa4>)
 8001f9a:	4798      	blx	r3
 8001f9c:	7803      	ldrb	r3, [r0, #0]
 8001f9e:	2b45      	cmp	r3, #69	; 0x45
 8001fa0:	d00e      	beq.n	8001fc0 <_ZN5Laser10handleCharEc+0x58>
				&& Laser::DoubleBuffer::get()[1] == 'R'){
			lastError = atoi2(Laser::DoubleBuffer::get()+6, 2, -1);
			Laser::DoubleBuffer::reset();
		}else{
			lastError = -1; //no error
 8001fa2:	4d1b      	ldr	r5, [pc, #108]	; (8002010 <_ZN5Laser10handleCharEc+0xa8>)
			if(Laser::DoubleBuffer::getInSize() == normalRequestAnswerLength){
 8001fa4:	4c14      	ldr	r4, [pc, #80]	; (8001ff8 <_ZN5Laser10handleCharEc+0x90>)
		if(Laser::DoubleBuffer::get()[0] == 'E'
				&& Laser::DoubleBuffer::get()[1] == 'R'){
			lastError = atoi2(Laser::DoubleBuffer::get()+6, 2, -1);
			Laser::DoubleBuffer::reset();
		}else{
			lastError = -1; //no error
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	602b      	str	r3, [r5, #0]
			if(Laser::DoubleBuffer::getInSize() == normalRequestAnswerLength){
 8001fac:	47a0      	blx	r4
 8001fae:	280f      	cmp	r0, #15
 8001fb0:	d01c      	beq.n	8001fec <_ZN5Laser10handleCharEc+0x84>
				Laser::DoubleBuffer::swap();
			}else{
				Laser::DoubleBuffer::reset();
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <_ZN5Laser10handleCharEc+0x94>)
 8001fb4:	4798      	blx	r3
				lastError = 2000+Laser::DoubleBuffer::getInSize();
 8001fb6:	47a0      	blx	r4
 8001fb8:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8001fbc:	6028      	str	r0, [r5, #0]
 8001fbe:	e7da      	b.n	8001f76 <_ZN5Laser10handleCharEc+0xe>
			Laser::DoubleBuffer::reset();
			lastError = 3000;
			return;
		}

		if(Laser::DoubleBuffer::get()[0] == 'E'
 8001fc0:	7843      	ldrb	r3, [r0, #1]
 8001fc2:	2b52      	cmp	r3, #82	; 0x52
 8001fc4:	d1ed      	bne.n	8001fa2 <_ZN5Laser10handleCharEc+0x3a>
				&& Laser::DoubleBuffer::get()[1] == 'R'){
			lastError = atoi2(Laser::DoubleBuffer::get()+6, 2, -1);
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	3006      	adds	r0, #6
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_ZN5Laser10handleCharEc+0xac>)
 8001fd0:	4c09      	ldr	r4, [pc, #36]	; (8001ff8 <_ZN5Laser10handleCharEc+0x90>)
 8001fd2:	4798      	blx	r3
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <_ZN5Laser10handleCharEc+0xa8>)
 8001fd6:	6018      	str	r0, [r3, #0]
			Laser::DoubleBuffer::reset();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_ZN5Laser10handleCharEc+0x94>)
 8001fda:	4798      	blx	r3
 8001fdc:	e7cb      	b.n	8001f76 <_ZN5Laser10handleCharEc+0xe>
		//do some sanity checks
		//active low -> high means invalid measurement
		bool nok = LASER_STATUS::read();
		State::setOrange(nok);
		if(nok){
			Laser::DoubleBuffer::reset();
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_ZN5Laser10handleCharEc+0x94>)
 8001fe0:	4798      	blx	r3
			lastError = 3000;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <_ZN5Laser10handleCharEc+0xa8>)
 8001fe4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fe8:	601a      	str	r2, [r3, #0]
			return;
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
			lastError = atoi2(Laser::DoubleBuffer::get()+6, 2, -1);
			Laser::DoubleBuffer::reset();
		}else{
			lastError = -1; //no error
			if(Laser::DoubleBuffer::getInSize() == normalRequestAnswerLength){
				Laser::DoubleBuffer::swap();
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <_ZN5Laser10handleCharEc+0xb0>)
 8001fee:	4798      	blx	r3
 8001ff0:	e7c1      	b.n	8001f76 <_ZN5Laser10handleCharEc+0xe>
 8001ff2:	bf00      	nop
 8001ff4:	08001e11 	.word	0x08001e11
 8001ff8:	08001e05 	.word	0x08001e05
 8001ffc:	08001e61 	.word	0x08001e61
 8002000:	08001f55 	.word	0x08001f55
 8002004:	40021000 	.word	0x40021000
 8002008:	080068fd 	.word	0x080068fd
 800200c:	08001e6d 	.word	0x08001e6d
 8002010:	20000050 	.word	0x20000050
 8002014:	08000585 	.word	0x08000585
 8002018:	08001e2d 	.word	0x08001e2d

0800201c <_ZN5Laser14enableRequestsEv>:

int Laser::getLastError(){
	return lastError;
}

void Laser::enableRequests(){
 800201c:	b508      	push	{r3, lr}
#if USE_LASER_DMA
	DMAStream3_Channel4_Init();
	DMA_Cmd(DMA1_Stream3, ENABLE);
#else
	sendMeasurementRequest();
 800201e:	4b01      	ldr	r3, [pc, #4]	; (8002024 <_ZN5Laser14enableRequestsEv+0x8>)
 8002020:	4798      	blx	r3
 8002022:	bd08      	pop	{r3, pc}
 8002024:	08001f55 	.word	0x08001f55

08002028 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EEC1ERKS2_>:
		/**
		 * \brief	Constructor
		 *
		 * \param	device	configured object
		 */
		IODeviceWrapper(const T& device)
 8002028:	b510      	push	{r4, lr}
		{
 800202a:	4b03      	ldr	r3, [pc, #12]	; (8002038 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EEC1ERKS2_+0x10>)
		/**
		 * \brief	Constructor
		 *
		 * \param	device	configured object
		 */
		IODeviceWrapper(const T& device)
 800202c:	4604      	mov	r4, r0
		{
 800202e:	4798      	blx	r3
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart3EEC1ERKS2_+0x14>)
			// get rid of the warning about an unused parameter
			(void) device;
		}
 8002032:	4620      	mov	r0, r4
		 * \brief	Constructor
		 *
		 * \param	device	configured object
		 */
		IODeviceWrapper(const T& device)
		{
 8002034:	6023      	str	r3, [r4, #0]
			// get rid of the warning about an unused parameter
			(void) device;
		}
 8002036:	bd10      	pop	{r4, pc}
 8002038:	08001d45 	.word	0x08001d45
 800203c:	080091d8 	.word	0x080091d8

08002040 <_Z41__static_initialization_and_destruction_0ii.constprop.1>:
	}
}

void Laser::sendMeasurementRequest(){
	uart3.write(bufferOut, requestLength);
}
 8002040:	b570      	push	{r4, r5, r6, lr}

#if USE_LASER_DMA
xpcc::stm32::Usart3 uart3(115200);
xpcc::IODeviceWrapper<xpcc::stm32::Usart3> uartWrap3(uart3);
#else
xpcc::stm32::BufferedUsart3 uart3(115200, 4);
 8002042:	4d0b      	ldr	r5, [pc, #44]	; (8002070 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x30>)
xpcc::IODeviceWrapper<xpcc::stm32::BufferedUsart3> uartWrap3(uart3);
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x34>)

#if USE_LASER_DMA
xpcc::stm32::Usart3 uart3(115200);
xpcc::IODeviceWrapper<xpcc::stm32::Usart3> uartWrap3(uart3);
#else
xpcc::stm32::BufferedUsart3 uart3(115200, 4);
 8002046:	4e0c      	ldr	r6, [pc, #48]	; (8002078 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x38>)
 8002048:	2204      	movs	r2, #4
 800204a:	2301      	movs	r3, #1
 800204c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002050:	4628      	mov	r0, r5
 8002052:	47b0      	blx	r6
xpcc::IODeviceWrapper<xpcc::stm32::BufferedUsart3> uartWrap3(uart3);
 8002054:	4629      	mov	r1, r5
 8002056:	4620      	mov	r0, r4
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x3c>)
 800205a:	4798      	blx	r3
 800205c:	4620      	mov	r0, r4
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x40>)
 8002060:	4a08      	ldr	r2, [pc, #32]	; (8002084 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x44>)
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x48>)
 8002064:	4798      	blx	r3
#endif
xpcc::IOStream laserOutStream(uartWrap3);
 8002066:	4621      	mov	r1, r4
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x4c>)
 800206a:	4809      	ldr	r0, [pc, #36]	; (8002090 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x50>)
 800206c:	4798      	blx	r3
 800206e:	bd70      	pop	{r4, r5, r6, pc}
 8002070:	2000073c 	.word	0x2000073c
 8002074:	20000738 	.word	0x20000738
 8002078:	08001d2d 	.word	0x08001d2d
 800207c:	08002029 	.word	0x08002029
 8002080:	08001d5d 	.word	0x08001d5d
 8002084:	20000158 	.word	0x20000158
 8002088:	0800788d 	.word	0x0800788d
 800208c:	080078f1 	.word	0x080078f1
 8002090:	200007b0 	.word	0x200007b0

08002094 <_ZN4xpcc7TimeoutINS_5ClockEEC1ENS_9TimestampE>:
	endTime(0), state(EXPIRED)
{
}

template<typename T>
xpcc::Timeout<T>::Timeout(const Timestamp time) :
 8002094:	b510      	push	{r4, lr}
 8002096:	b084      	sub	sp, #16
	endTime(T::now() + time), state(ACTIVE)
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_ZN4xpcc7TimeoutINS_5ClockEEC1ENS_9TimestampE+0x28>)
	endTime(0), state(EXPIRED)
{
}

template<typename T>
xpcc::Timeout<T>::Timeout(const Timestamp time) :
 800209a:	9101      	str	r1, [sp, #4]
 800209c:	4604      	mov	r4, r0
	endTime(T::now() + time), state(ACTIVE)
 800209e:	4798      	blx	r3
 80020a0:	ab04      	add	r3, sp, #16
 80020a2:	a901      	add	r1, sp, #4
 80020a4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80020a8:	4618      	mov	r0, r3
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <_ZN4xpcc7TimeoutINS_5ClockEEC1ENS_9TimestampE+0x2c>)
 80020ac:	4798      	blx	r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	6020      	str	r0, [r4, #0]
 80020b2:	7123      	strb	r3, [r4, #4]
{
}
 80020b4:	4620      	mov	r0, r4
 80020b6:	b004      	add	sp, #16
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	bf00      	nop
 80020bc:	08006e15 	.word	0x08006e15
 80020c0:	08001ddd 	.word	0x08001ddd

080020c4 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv>:

template<typename T>
bool
xpcc::Timeout<T>::isExpired()
 80020c4:	b530      	push	{r4, r5, lr}
{
	if (state == ACTIVE)
 80020c6:	7905      	ldrb	r5, [r0, #4]
 80020c8:	2d01      	cmp	r5, #1
{
}

template<typename T>
bool
xpcc::Timeout<T>::isExpired()
 80020ca:	b083      	sub	sp, #12
 80020cc:	4604      	mov	r4, r0
{
	if (state == ACTIVE)
 80020ce:	d002      	beq.n	80020d6 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv+0x12>
		else {
			return false;
		}
	}
	
	return true;
 80020d0:	2001      	movs	r0, #1
}
 80020d2:	b003      	add	sp, #12
 80020d4:	bd30      	pop	{r4, r5, pc}
bool
xpcc::Timeout<T>::isExpired()
{
	if (state == ACTIVE)
	{
		if (T::now() >= endTime)
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv+0x30>)
 80020d8:	4798      	blx	r3
 80020da:	ab02      	add	r3, sp, #8
 80020dc:	4621      	mov	r1, r4
 80020de:	f843 0d04 	str.w	r0, [r3, #-4]!
 80020e2:	4618      	mov	r0, r3
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv+0x34>)
 80020e6:	4798      	blx	r3
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d0f2      	beq.n	80020d2 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv+0xe>
		{
			state = EXPIRED;
 80020ec:	2302      	movs	r3, #2
 80020ee:	7123      	strb	r3, [r4, #4]
		else {
			return false;
		}
	}
	
	return true;
 80020f0:	4628      	mov	r0, r5
 80020f2:	e7ee      	b.n	80020d2 <_ZN4xpcc7TimeoutINS_5ClockEE9isExpiredEv+0xe>
 80020f4:	08006e15 	.word	0x08006e15
 80020f8:	08001df9 	.word	0x08001df9

080020fc <_ZN5Laser4execEPKc>:

void Laser::sendString(const char* cmd){
	laserOutStream << cmd << '\r';
}

const char* Laser::exec(const char* cmd){
 80020fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002100:	b084      	sub	sp, #16
	disableRequests();
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <_ZN5Laser4execEPKc+0xc4>)
	USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
	xpcc::delay_ms(500);
 8002104:	4f2f      	ldr	r7, [pc, #188]	; (80021c4 <_ZN5Laser4execEPKc+0xc8>)
 8002106:	4e30      	ldr	r6, [pc, #192]	; (80021c8 <_ZN5Laser4execEPKc+0xcc>)
	static char response[256];
	char c = 0;
 8002108:	ad04      	add	r5, sp, #16

void Laser::sendString(const char* cmd){
	laserOutStream << cmd << '\r';
}

const char* Laser::exec(const char* cmd){
 800210a:	4680      	mov	r8, r0
	disableRequests();
	USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
	xpcc::delay_ms(500);
	static char response[256];
	char c = 0;
 800210c:	2400      	movs	r4, #0
void Laser::sendString(const char* cmd){
	laserOutStream << cmd << '\r';
}

const char* Laser::exec(const char* cmd){
	disableRequests();
 800210e:	4798      	blx	r3
	USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
 8002110:	482e      	ldr	r0, [pc, #184]	; (80021cc <_ZN5Laser4execEPKc+0xd0>)
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <_ZN5Laser4execEPKc+0xd4>)
 8002114:	f240 5125 	movw	r1, #1317	; 0x525
 8002118:	2200      	movs	r2, #0
 800211a:	4798      	blx	r3
	xpcc::delay_ms(500);
 800211c:	47b8      	blx	r7
	static char response[256];
	char c = 0;
 800211e:	f805 4d0d 	strb.w	r4, [r5, #-13]!
	//clear receive buffer
	for(int i = 0; i < 100; i++){
		uart3.read((uint8_t&)c);
 8002122:	4628      	mov	r0, r5
	USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
	xpcc::delay_ms(500);
	static char response[256];
	char c = 0;
	//clear receive buffer
	for(int i = 0; i < 100; i++){
 8002124:	3401      	adds	r4, #1
		uart3.read((uint8_t&)c);
 8002126:	47b0      	blx	r6
	USART_ITConfig(USART3, USART_IT_RXNE, DISABLE);
	xpcc::delay_ms(500);
	static char response[256];
	char c = 0;
	//clear receive buffer
	for(int i = 0; i < 100; i++){
 8002128:	2c64      	cmp	r4, #100	; 0x64
 800212a:	d1fa      	bne.n	8002122 <_ZN5Laser4execEPKc+0x26>
		uart3.read((uint8_t&)c);
	}
	sendString(cmd);
 800212c:	4640      	mov	r0, r8
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <_ZN5Laser4execEPKc+0xd8>)
 8002130:	4798      	blx	r3
	int i = 0;
	xpcc::Timeout<> timeout(1000);
 8002132:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <_ZN5Laser4execEPKc+0xdc>)
 8002138:	a801      	add	r0, sp, #4
 800213a:	4798      	blx	r3
 800213c:	a802      	add	r0, sp, #8
 800213e:	9901      	ldr	r1, [sp, #4]
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <_ZN5Laser4execEPKc+0xe0>)
 8002142:	4798      	blx	r3
	//clear receive buffer
	for(int i = 0; i < 100; i++){
		uart3.read((uint8_t&)c);
	}
	sendString(cmd);
	int i = 0;
 8002144:	2400      	movs	r4, #0
	xpcc::Timeout<> timeout(1000);
	while(true){
		if(uart3.read((uint8_t&)c)){
 8002146:	4628      	mov	r0, r5
 8002148:	47b0      	blx	r6
			response[i] = c;
 800214a:	4925      	ldr	r1, [pc, #148]	; (80021e0 <_ZN5Laser4execEPKc+0xe4>)
			i++;
 800214c:	1c63      	adds	r3, r4, #1
	}
	sendString(cmd);
	int i = 0;
	xpcc::Timeout<> timeout(1000);
	while(true){
		if(uart3.read((uint8_t&)c)){
 800214e:	b138      	cbz	r0, 8002160 <_ZN5Laser4execEPKc+0x64>
			response[i] = c;
 8002150:	f89d 2003 	ldrb.w	r2, [sp, #3]
			i++;
			if(i > 254 || c == '\r'){
 8002154:	2bfe      	cmp	r3, #254	; 0xfe
	sendString(cmd);
	int i = 0;
	xpcc::Timeout<> timeout(1000);
	while(true){
		if(uart3.read((uint8_t&)c)){
			response[i] = c;
 8002156:	550a      	strb	r2, [r1, r4]
			i++;
			if(i > 254 || c == '\r'){
 8002158:	dc16      	bgt.n	8002188 <_ZN5Laser4execEPKc+0x8c>
 800215a:	2a0d      	cmp	r2, #13
 800215c:	d014      	beq.n	8002188 <_ZN5Laser4execEPKc+0x8c>
 800215e:	461c      	mov	r4, r3
				response[i-1] = '\0';
				break;
			}
		}
		if(timeout.isExpired()){
 8002160:	a802      	add	r0, sp, #8
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <_ZN5Laser4execEPKc+0xe8>)
 8002164:	4798      	blx	r3
 8002166:	2800      	cmp	r0, #0
 8002168:	d0ed      	beq.n	8002146 <_ZN5Laser4execEPKc+0x4a>
			break;
		}
	}

	xpcc::delay_ms(500);
 800216a:	47b8      	blx	r7
	enableRequests();
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <_ZN5Laser4execEPKc+0xec>)
 800216e:	4798      	blx	r3
	enable_USART3_Interrupts();
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <_ZN5Laser4execEPKc+0xf0>)
 8002172:	4798      	blx	r3

	if(c == '\r'){
 8002174:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002178:	2b0d      	cmp	r3, #13
 800217a:	d00f      	beq.n	800219c <_ZN5Laser4execEPKc+0xa0>
		return response;
	}
	if(i > 254){
 800217c:	2cfe      	cmp	r4, #254	; 0xfe
 800217e:	dd07      	ble.n	8002190 <_ZN5Laser4execEPKc+0x94>
		return "Buffer overrun while executing laser command";
 8002180:	481b      	ldr	r0, [pc, #108]	; (80021f0 <_ZN5Laser4execEPKc+0xf4>)
	if(timeout.isExpired()){
		return "Timeout expired while executing laser command";
	}
	cerr << " LaserInterface.cpp: " << __LINE__ << " : this point should not be reached" << endl;
	return "";
}
 8002182:	b004      	add	sp, #16
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while(true){
		if(uart3.read((uint8_t&)c)){
			response[i] = c;
			i++;
			if(i > 254 || c == '\r'){
				response[i-1] = '\0';
 8002188:	2200      	movs	r2, #0
 800218a:	550a      	strb	r2, [r1, r4]
				break;
 800218c:	461c      	mov	r4, r3
 800218e:	e7ec      	b.n	800216a <_ZN5Laser4execEPKc+0x6e>
		return response;
	}
	if(i > 254){
		return "Buffer overrun while executing laser command";
	}
	if(timeout.isExpired()){
 8002190:	a802      	add	r0, sp, #8
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <_ZN5Laser4execEPKc+0xe8>)
 8002194:	4798      	blx	r3
 8002196:	b118      	cbz	r0, 80021a0 <_ZN5Laser4execEPKc+0xa4>
		return "Timeout expired while executing laser command";
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <_ZN5Laser4execEPKc+0xf8>)
 800219a:	e7f2      	b.n	8002182 <_ZN5Laser4execEPKc+0x86>
	xpcc::delay_ms(500);
	enableRequests();
	enable_USART3_Interrupts();

	if(c == '\r'){
		return response;
 800219c:	4810      	ldr	r0, [pc, #64]	; (80021e0 <_ZN5Laser4execEPKc+0xe4>)
 800219e:	e7f0      	b.n	8002182 <_ZN5Laser4execEPKc+0x86>
		return "Buffer overrun while executing laser command";
	}
	if(timeout.isExpired()){
		return "Timeout expired while executing laser command";
	}
	cerr << " LaserInterface.cpp: " << __LINE__ << " : this point should not be reached" << endl;
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <_ZN5Laser4execEPKc+0xfc>)
 80021a2:	4c16      	ldr	r4, [pc, #88]	; (80021fc <_ZN5Laser4execEPKc+0x100>)
 80021a4:	4816      	ldr	r0, [pc, #88]	; (8002200 <_ZN5Laser4execEPKc+0x104>)
 80021a6:	47a0      	blx	r4
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <_ZN5Laser4execEPKc+0x108>)
 80021aa:	4605      	mov	r5, r0
 80021ac:	2198      	movs	r1, #152	; 0x98
 80021ae:	4798      	blx	r3
 80021b0:	4915      	ldr	r1, [pc, #84]	; (8002208 <_ZN5Laser4execEPKc+0x10c>)
 80021b2:	4628      	mov	r0, r5
 80021b4:	47a0      	blx	r4
 80021b6:	210a      	movs	r1, #10
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <_ZN5Laser4execEPKc+0x110>)
 80021ba:	4798      	blx	r3
	return "";
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN5Laser4execEPKc+0x114>)
 80021be:	e7e0      	b.n	8002182 <_ZN5Laser4execEPKc+0x86>
 80021c0:	08001eb1 	.word	0x08001eb1
 80021c4:	08001d1d 	.word	0x08001d1d
 80021c8:	08007679 	.word	0x08007679
 80021cc:	40004800 	.word	0x40004800
 80021d0:	08007e65 	.word	0x08007e65
 80021d4:	08001ec5 	.word	0x08001ec5
 80021d8:	08001dd9 	.word	0x08001dd9
 80021dc:	08002095 	.word	0x08002095
 80021e0:	200007b8 	.word	0x200007b8
 80021e4:	080020c5 	.word	0x080020c5
 80021e8:	0800201d 	.word	0x0800201d
 80021ec:	08001f09 	.word	0x08001f09
 80021f0:	080091f0 	.word	0x080091f0
 80021f4:	08009220 	.word	0x08009220
 80021f8:	08009250 	.word	0x08009250
 80021fc:	08001dad 	.word	0x08001dad
 8002200:	20001184 	.word	0x20001184
 8002204:	080078f9 	.word	0x080078f9
 8002208:	08009268 	.word	0x08009268
 800220c:	08001cf1 	.word	0x08001cf1
 8002210:	080090f0 	.word	0x080090f0

08002214 <_GLOBAL__sub_I__ZN5Laser12DoubleBuffer4buf1E>:
	}
}

void Laser::sendMeasurementRequest(){
	uart3.write(bufferOut, requestLength);
}
 8002214:	b508      	push	{r3, lr}
 8002216:	4b01      	ldr	r3, [pc, #4]	; (800221c <_GLOBAL__sub_I__ZN5Laser12DoubleBuffer4buf1E+0x8>)
 8002218:	4798      	blx	r3
 800221a:	bd08      	pop	{r3, pc}
 800221c:	08002041 	.word	0x08002041

08002220 <_ZN11LinePattern9configureEP5Point>:

bool passedFirst;
}

void LinePattern::configure(Point* points){
	startX = Transform::mmToEncoder(points[0].x);
 8002220:	edd0 5a00 	vldr	s11, [r0]

#include "project.h"

struct Transform{
	static int mmToEncoder(float mm){
		return int(MOTOR_ENC_PER_REV*MOTOR_GEAR_RATIO*mm + 0.5f);
 8002224:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80022b8 <_ZN11LinePattern9configureEP5Point+0x98>
 8002228:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800222c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002230:	eef0 4a67 	vmov.f32	s9, s15
 8002234:	ee45 4a87 	vmla.f32	s9, s11, s14
	startY = Transform::mmToEncoder(points[0].y);
 8002238:	edd0 6a01 	vldr	s13, [r0, #4]
 800223c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002240:	eef0 5a64 	vmov.f32	s11, s9
 8002244:	eef0 4a67 	vmov.f32	s9, s15
 8002248:	ee46 4a87 	vmla.f32	s9, s13, s14
	stopX = Transform::mmToEncoder(points[1].x);
 800224c:	ed90 6a02 	vldr	s12, [r0, #8]
	stopY = Transform::mmToEncoder(points[1].y);
 8002250:	ed90 5a03 	vldr	s10, [r0, #12]
}

void LinePattern::configure(Point* points){
	startX = Transform::mmToEncoder(points[0].x);
	startY = Transform::mmToEncoder(points[0].y);
	stopX = Transform::mmToEncoder(points[1].x);
 8002254:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002258:	eef0 6a64 	vmov.f32	s13, s9
 800225c:	eef0 4a67 	vmov.f32	s9, s15
	stopY = Transform::mmToEncoder(points[1].y);
 8002260:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8002264:	ee46 4a07 	vmla.f32	s9, s12, s14
}

bool passedFirst;
}

void LinePattern::configure(Point* points){
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	ee45 7a07 	vmla.f32	s15, s10, s14
 800226e:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	startX = Transform::mmToEncoder(points[0].x);
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <_ZN11LinePattern9configureEP5Point+0x9c>)
	startY = Transform::mmToEncoder(points[0].y);
 8002274:	4e12      	ldr	r6, [pc, #72]	; (80022c0 <_ZN11LinePattern9configureEP5Point+0xa0>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8002276:	4d13      	ldr	r5, [pc, #76]	; (80022c4 <_ZN11LinePattern9configureEP5Point+0xa4>)
	Control<ALL>::resetVPid();
 8002278:	4c13      	ldr	r4, [pc, #76]	; (80022c8 <_ZN11LinePattern9configureEP5Point+0xa8>)

bool passedFirst;
}

void LinePattern::configure(Point* points){
	startX = Transform::mmToEncoder(points[0].x);
 800227a:	edc3 5a00 	vstr	s11, [r3]
 800227e:	eebd 7ae4 	vcvt.s32.f32	s14, s9
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <_ZN11LinePattern9configureEP5Point+0xac>)
 8002284:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8002288:	ed83 7a00 	vstr	s14, [r3]
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <_ZN11LinePattern9configureEP5Point+0xb0>)
 8002292:	ee15 7a90 	vmov	r7, s11
 8002296:	edc6 6a00 	vstr	s13, [r6]
 800229a:	edc3 7a00 	vstr	s15, [r3]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800229e:	47a8      	blx	r5
	Control<ALL>::resetVPid();
 80022a0:	47a0      	blx	r4
	pos_shall = position;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <_ZN11LinePattern9configureEP5Point+0xb4>)
	startY = Transform::mmToEncoder(points[0].y);
	stopX = Transform::mmToEncoder(points[1].x);
	stopY = Transform::mmToEncoder(points[1].y);

	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
 80022a4:	6836      	ldr	r6, [r6, #0]
 80022a6:	601f      	str	r7, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 80022a8:	47a8      	blx	r5
	Control<ALL>::resetVPid();
 80022aa:	47a0      	blx	r4
	pos_shall = position;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <_ZN11LinePattern9configureEP5Point+0xb8>)
 80022ae:	601e      	str	r6, [r3, #0]
	passedFirst = false;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <_ZN11LinePattern9configureEP5Point+0xbc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b8:	44fa0000 	.word	0x44fa0000
 80022bc:	200008c0 	.word	0x200008c0
 80022c0:	200008c4 	.word	0x200008c4
 80022c4:	08000eb1 	.word	0x08000eb1
 80022c8:	08000e95 	.word	0x08000e95
 80022cc:	200008b8 	.word	0x200008b8
 80022d0:	200008bc 	.word	0x200008bc
 80022d4:	20000680 	.word	0x20000680
 80022d8:	20000674 	.word	0x20000674
 80022dc:	200008c8 	.word	0x200008c8

080022e0 <_ZN11LinePattern6sampleEv>:
}

void LinePattern::sample(){
 80022e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static int getSpeedErrorSum();
	static int getPositionErrorSum();
	static int32_t getIsPosition();
	static inline int getShallSpeed(){ return v_shall; }
	static inline int getIsSpeed(){ return v_is; }
	static inline int getShallPosition(){ return pos_shall; }
 80022e4:	4c2c      	ldr	r4, [pc, #176]	; (8002398 <_ZN11LinePattern6sampleEv+0xb8>)
namespace{
int startX,stopX;
int startY,stopY;

static inline bool reachedPointX(){
	return abs(Control<X>::getShallPosition() - Control<X>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <_ZN11LinePattern6sampleEv+0xbc>)
 80022e8:	6825      	ldr	r5, [r4, #0]
 80022ea:	4798      	blx	r3
 80022ec:	1a28      	subs	r0, r5, r0
 80022ee:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 80022f2:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
	Control<Y>::setShallPosition(startY);
	passedFirst = false;
}

void LinePattern::sample(){
	if(reachedPointX() && reachedPointY()){
 80022f6:	2d01      	cmp	r5, #1
 80022f8:	dd01      	ble.n	80022fe <_ZN11LinePattern6sampleEv+0x1e>
 80022fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80023d4 <_ZN11LinePattern6sampleEv+0xf4>
static inline bool reachedPointX(){
	return abs(Control<X>::getShallPosition() - Control<X>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointY(){
	return abs(Control<Y>::getShallPosition() - Control<Y>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <_ZN11LinePattern6sampleEv+0xc0>)
 8002304:	f8d8 5000 	ldr.w	r5, [r8]
 8002308:	4798      	blx	r3
 800230a:	1a28      	subs	r0, r5, r0
 800230c:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
 8002310:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
	Control<Y>::setShallPosition(startY);
	passedFirst = false;
}

void LinePattern::sample(){
	if(reachedPointX() && reachedPointY()){
 8002314:	2d01      	cmp	r5, #1
 8002316:	dc16      	bgt.n	8002346 <_ZN11LinePattern6sampleEv+0x66>
		if(passedFirst){
 8002318:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80023d8 <_ZN11LinePattern6sampleEv+0xf8>
 800231c:	f899 3000 	ldrb.w	r3, [r9]
 8002320:	b99b      	cbnz	r3, 800234a <_ZN11LinePattern6sampleEv+0x6a>
			Pattern::done();
		}
		passedFirst = true;
		Control<X>::setShallPosition(stopX);
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <_ZN11LinePattern6sampleEv+0xc4>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8002324:	4e20      	ldr	r6, [pc, #128]	; (80023a8 <_ZN11LinePattern6sampleEv+0xc8>)
 8002326:	681f      	ldr	r7, [r3, #0]
	Control<ALL>::resetVPid();
 8002328:	4d20      	ldr	r5, [pc, #128]	; (80023ac <_ZN11LinePattern6sampleEv+0xcc>)
void LinePattern::sample(){
	if(reachedPointX() && reachedPointY()){
		if(passedFirst){
			Pattern::done();
		}
		passedFirst = true;
 800232a:	2301      	movs	r3, #1
 800232c:	f889 3000 	strb.w	r3, [r9]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8002330:	47b0      	blx	r6
	Control<ALL>::resetVPid();
 8002332:	47a8      	blx	r5
		Control<X>::setShallPosition(stopX);
		Control<Y>::setShallPosition(stopY);
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <_ZN11LinePattern6sampleEv+0xd0>)
	pos_shall = position;
 8002336:	6027      	str	r7, [r4, #0]
 8002338:	681c      	ldr	r4, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800233a:	47b0      	blx	r6
	Control<ALL>::resetVPid();
 800233c:	47a8      	blx	r5
	pos_shall = position;
 800233e:	f8c8 4000 	str.w	r4, [r8]
 8002342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			start();
		}*/
		paused = false;
	}
	static void done(){
		running = 0;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <_ZN11LinePattern6sampleEv+0xd4>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800234c:	4d1a      	ldr	r5, [pc, #104]	; (80023b8 <_ZN11LinePattern6sampleEv+0xd8>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
		State::set(State::READY);
 8002352:	2001      	movs	r0, #1
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <_ZN11LinePattern6sampleEv+0xdc>)
 8002356:	4798      	blx	r3
 8002358:	686b      	ldr	r3, [r5, #4]
 800235a:	b183      	cbz	r3, 800237e <_ZN11LinePattern6sampleEv+0x9e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800235c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800235e:	4628      	mov	r0, r5
 8002360:	4917      	ldr	r1, [pc, #92]	; (80023c0 <_ZN11LinePattern6sampleEv+0xe0>)
 8002362:	bf0c      	ite	eq
 8002364:	4b17      	ldreq	r3, [pc, #92]	; (80023c4 <_ZN11LinePattern6sampleEv+0xe4>)
			}
			else {
				this->writeHex(s);
 8002366:	4b18      	ldrne	r3, [pc, #96]	; (80023c8 <_ZN11LinePattern6sampleEv+0xe8>)
 8002368:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800236a:	686b      	ldr	r3, [r5, #4]
 800236c:	4812      	ldr	r0, [pc, #72]	; (80023b8 <_ZN11LinePattern6sampleEv+0xd8>)
 800236e:	b163      	cbz	r3, 800238a <_ZN11LinePattern6sampleEv+0xaa>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002370:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002372:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002374:	bf0c      	ite	eq
 8002376:	4b15      	ldreq	r3, [pc, #84]	; (80023cc <_ZN11LinePattern6sampleEv+0xec>)
			}
			else {
				this->writeHex(v);
 8002378:	4b15      	ldrne	r3, [pc, #84]	; (80023d0 <_ZN11LinePattern6sampleEv+0xf0>)
 800237a:	4798      	blx	r3
 800237c:	e7d1      	b.n	8002322 <_ZN11LinePattern6sampleEv+0x42>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800237e:	6828      	ldr	r0, [r5, #0]
 8002380:	490f      	ldr	r1, [pc, #60]	; (80023c0 <_ZN11LinePattern6sampleEv+0xe0>)
 8002382:	6803      	ldr	r3, [r0, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4798      	blx	r3
 8002388:	e7ef      	b.n	800236a <_ZN11LinePattern6sampleEv+0x8a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800238a:	6800      	ldr	r0, [r0, #0]
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	210a      	movs	r1, #10
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4798      	blx	r3
 8002394:	e7c5      	b.n	8002322 <_ZN11LinePattern6sampleEv+0x42>
 8002396:	bf00      	nop
 8002398:	20000680 	.word	0x20000680
 800239c:	08000e89 	.word	0x08000e89
 80023a0:	08000e81 	.word	0x08000e81
 80023a4:	200008b8 	.word	0x200008b8
 80023a8:	08000eb1 	.word	0x08000eb1
 80023ac:	08000e95 	.word	0x08000e95
 80023b0:	200008bc 	.word	0x200008bc
 80023b4:	200008d0 	.word	0x200008d0
 80023b8:	200013bc 	.word	0x200013bc
 80023bc:	080067d5 	.word	0x080067d5
 80023c0:	0800928c 	.word	0x0800928c
 80023c4:	080079ed 	.word	0x080079ed
 80023c8:	080079a9 	.word	0x080079a9
 80023cc:	08007af5 	.word	0x08007af5
 80023d0:	08007ac1 	.word	0x08007ac1
 80023d4:	20000674 	.word	0x20000674
 80023d8:	200008c8 	.word	0x200008c8

080023dc <_Z7systickv>:
	step++;
}

//int last u;
static int counter = 0;
void systick(){
 80023dc:	b510      	push	{r4, lr}
	//if(Control)
	Control<ALL>::update(false);
	counter++;
 80023de:	4c08      	ldr	r4, [pc, #32]	; (8002400 <_Z7systickv+0x24>)

//int last u;
static int counter = 0;
void systick(){
	//if(Control)
	Control<ALL>::update(false);
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_Z7systickv+0x28>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	4798      	blx	r3
	counter++;
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	3301      	adds	r3, #1
#if !USE_LASER_DMA
	if(counter == 1000){
 80023ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
//int last u;
static int counter = 0;
void systick(){
	//if(Control)
	Control<ALL>::update(false);
	counter++;
 80023ee:	6023      	str	r3, [r4, #0]
#if !USE_LASER_DMA
	if(counter == 1000){
 80023f0:	d000      	beq.n	80023f4 <_Z7systickv+0x18>
 80023f2:	bd10      	pop	{r4, pc}
		Laser::sendMeasurementRequest();
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <_Z7systickv+0x2c>)
 80023f6:	4798      	blx	r3
		counter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	6023      	str	r3, [r4, #0]
 80023fc:	bd10      	pop	{r4, pc}
 80023fe:	bf00      	nop
 8002400:	200008cc 	.word	0x200008cc
 8002404:	080009e1 	.word	0x080009e1
 8002408:	08001f55 	.word	0x08001f55

0800240c <_ZN4xpcc8IOStreamlsERKc.isra.0.constprop.4>:
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800240c:	6843      	ldr	r3, [r0, #4]
			}
			return *this;
		}

		IOStream&
		operator << (const char& v)
 800240e:	b510      	push	{r4, lr}
 8002410:	4604      	mov	r4, r0
		{
			if (this->mode == Mode::Ascii) {
 8002412:	b13b      	cbz	r3, 8002424 <_ZN4xpcc8IOStreamlsERKc.isra.0.constprop.4+0x18>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002414:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002416:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002418:	bf0c      	ite	eq
 800241a:	4b05      	ldreq	r3, [pc, #20]	; (8002430 <_ZN4xpcc8IOStreamlsERKc.isra.0.constprop.4+0x24>)
			}
			else {
				this->writeHex(v);
 800241c:	4b05      	ldrne	r3, [pc, #20]	; (8002434 <_ZN4xpcc8IOStreamlsERKc.isra.0.constprop.4+0x28>)
 800241e:	4798      	blx	r3
			}
			return *this;
		}
 8002420:	4620      	mov	r0, r4
 8002422:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8002424:	6800      	ldr	r0, [r0, #0]
 8002426:	6803      	ldr	r3, [r0, #0]
 8002428:	210a      	movs	r1, #10
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4798      	blx	r3
 800242e:	e7f7      	b.n	8002420 <_ZN4xpcc8IOStreamlsERKc.isra.0.constprop.4+0x14>
 8002430:	08007af5 	.word	0x08007af5
 8002434:	08007ac1 	.word	0x08007ac1

08002438 <main>:

GPIO__OUTPUT(LASER_TIMING, E, 1);
GPIO__INPUT(LASER_STATUS, E, 5);


MAIN_FUNCTION{
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

using namespace xpcc::stm32;

static bool initClock(){
	// use external 8MHz crystal
	if (!Clock::enableHse(Clock::HseConfig::HSE_CRYSTAL)) {
 800243c:	2000      	movs	r0, #0

GPIO__OUTPUT(LASER_TIMING, E, 1);
GPIO__INPUT(LASER_STATUS, E, 5);


MAIN_FUNCTION{
 800243e:	b083      	sub	sp, #12

using namespace xpcc::stm32;

static bool initClock(){
	// use external 8MHz crystal
	if (!Clock::enableHse(Clock::HseConfig::HSE_CRYSTAL)) {
 8002440:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <main+0x130>)
 8002446:	4798      	blx	r3
 8002448:	2800      	cmp	r0, #0
 800244a:	f040 8083 	bne.w	8002554 <main+0x11c>
	ok = initClock(); //if this fails, we are going to have a bad time

	//--------------------------------------------------------------
	//Init routines
	//--------------------------------------------------------------
	State::init(); //state handling, can visualize init failures via LEDs
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <main+0x134>)
	ok = PC::init(); //starts up COM interface to computer
	dout << "COM INIT " << ok << endl;
 8002450:	f8df a188 	ldr.w	sl, [pc, #392]	; 80025dc <main+0x1a4>
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002454:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80025e0 <main+0x1a8>
 8002458:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80025e4 <main+0x1ac>
	//go go go
	//--------------------------------------------------------------
	SysTickTimer::attachInterrupt(systick);

	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
 800245c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80025e8 <main+0x1b0>
 8002460:	4c43      	ldr	r4, [pc, #268]	; (8002570 <main+0x138>)
 8002462:	4e44      	ldr	r6, [pc, #272]	; (8002574 <main+0x13c>)
 8002464:	4d44      	ldr	r5, [pc, #272]	; (8002578 <main+0x140>)
 8002466:	4f45      	ldr	r7, [pc, #276]	; (800257c <main+0x144>)
	ok = initClock(); //if this fails, we are going to have a bad time

	//--------------------------------------------------------------
	//Init routines
	//--------------------------------------------------------------
	State::init(); //state handling, can visualize init failures via LEDs
 8002468:	4798      	blx	r3
	ok = PC::init(); //starts up COM interface to computer
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <main+0x148>)
 800246c:	4798      	blx	r3
 800246e:	4602      	mov	r2, r0
	dout << "COM INIT " << ok << endl;
 8002470:	4944      	ldr	r1, [pc, #272]	; (8002584 <main+0x14c>)
 8002472:	9201      	str	r2, [sp, #4]
 8002474:	4844      	ldr	r0, [pc, #272]	; (8002588 <main+0x150>)
 8002476:	47d0      	blx	sl
 8002478:	9a01      	ldr	r2, [sp, #4]
 800247a:	9001      	str	r0, [sp, #4]
 800247c:	4611      	mov	r1, r2
 800247e:	47c8      	blx	r9
 8002480:	9b01      	ldr	r3, [sp, #4]
 8002482:	4618      	mov	r0, r3
 8002484:	47c0      	blx	r8
	ok = Encoder::init();
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <main+0x154>)
 8002488:	4798      	blx	r3
 800248a:	4602      	mov	r2, r0
	dout << "ENCODER INIT " << ok << endl;
 800248c:	4940      	ldr	r1, [pc, #256]	; (8002590 <main+0x158>)
 800248e:	9201      	str	r2, [sp, #4]
 8002490:	483d      	ldr	r0, [pc, #244]	; (8002588 <main+0x150>)
 8002492:	47d0      	blx	sl
 8002494:	9a01      	ldr	r2, [sp, #4]
 8002496:	9001      	str	r0, [sp, #4]
 8002498:	4611      	mov	r1, r2
 800249a:	47c8      	blx	r9
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	47c0      	blx	r8
	ok = Motor<ALL>::init();
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <main+0x15c>)
 80024a4:	4798      	blx	r3
 80024a6:	4602      	mov	r2, r0
	dout << "MOTOR INIT " << ok << endl;
 80024a8:	493b      	ldr	r1, [pc, #236]	; (8002598 <main+0x160>)
 80024aa:	9201      	str	r2, [sp, #4]
 80024ac:	4836      	ldr	r0, [pc, #216]	; (8002588 <main+0x150>)
 80024ae:	47d0      	blx	sl
 80024b0:	9a01      	ldr	r2, [sp, #4]
 80024b2:	9001      	str	r0, [sp, #4]
 80024b4:	4611      	mov	r1, r2
 80024b6:	47c8      	blx	r9
 80024b8:	9b01      	ldr	r3, [sp, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	47c0      	blx	r8
	ok = HallSensor<ALL>::init();
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <main+0x164>)
 80024c0:	4798      	blx	r3
 80024c2:	4602      	mov	r2, r0
	dout << "HALLSENSOR INIT " << ok << endl;
 80024c4:	4936      	ldr	r1, [pc, #216]	; (80025a0 <main+0x168>)
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	482f      	ldr	r0, [pc, #188]	; (8002588 <main+0x150>)
 80024ca:	47d0      	blx	sl
 80024cc:	9a01      	ldr	r2, [sp, #4]
 80024ce:	9001      	str	r0, [sp, #4]
 80024d0:	4611      	mov	r1, r2
 80024d2:	47c8      	blx	r9
 80024d4:	9b01      	ldr	r3, [sp, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	47c0      	blx	r8
	ok = Control<ALL>::init();
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <main+0x16c>)
 80024dc:	4798      	blx	r3
 80024de:	4602      	mov	r2, r0
	dout << "CONTROL INIT " << ok << endl;
 80024e0:	4931      	ldr	r1, [pc, #196]	; (80025a8 <main+0x170>)
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	4828      	ldr	r0, [pc, #160]	; (8002588 <main+0x150>)
 80024e6:	47d0      	blx	sl
 80024e8:	9a01      	ldr	r2, [sp, #4]
 80024ea:	9001      	str	r0, [sp, #4]
 80024ec:	4611      	mov	r1, r2
 80024ee:	47c8      	blx	r9
 80024f0:	9b01      	ldr	r3, [sp, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	47c0      	blx	r8
	ok = Laser::init();
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <main+0x174>)
 80024f8:	4798      	blx	r3
 80024fa:	4603      	mov	r3, r0
	dout << "LASER INTERFACE INIT " << ok << endl;
 80024fc:	492c      	ldr	r1, [pc, #176]	; (80025b0 <main+0x178>)
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	4821      	ldr	r0, [pc, #132]	; (8002588 <main+0x150>)
 8002502:	47d0      	blx	sl
 8002504:	9b01      	ldr	r3, [sp, #4]
 8002506:	4682      	mov	sl, r0
 8002508:	4619      	mov	r1, r3
 800250a:	47c8      	blx	r9
 800250c:	4650      	mov	r0, sl
 800250e:	47c0      	blx	r8

	//--------------------------------------------------------------
	//go go go
	//--------------------------------------------------------------
	SysTickTimer::attachInterrupt(systick);
 8002510:	4828      	ldr	r0, [pc, #160]	; (80025b4 <main+0x17c>)
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <main+0x180>)
 8002514:	4798      	blx	r3

	Control<ALL>::enablePositionControl(false);
 8002516:	2000      	movs	r0, #0
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <main+0x184>)
 800251a:	4798      	blx	r3
	Control<ALL>::enableSpeedControl(false);
 800251c:	2000      	movs	r0, #0
 800251e:	47d8      	blx	fp
	Utils::calibrateZero();
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <main+0x188>)
 8002522:	4798      	blx	r3

	Utils::enableSystick();
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <main+0x18c>)
 8002526:	4798      	blx	r3
	Laser::enableRequests();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <main+0x190>)
 800252a:	4798      	blx	r3
	State::set(State::READY);
 800252c:	2001      	movs	r0, #1
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <main+0x194>)
 8002530:	4798      	blx	r3

	Control<ALL>::enableSpeedControl(true);
 8002532:	2001      	movs	r0, #1
 8002534:	47d8      	blx	fp
	Control<ALL>::enablePositionControl(true);
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <main+0x184>)
 8002538:	2001      	movs	r0, #1
 800253a:	4798      	blx	r3

	Trigger::forceTrigger();
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <main+0x198>)
 800253e:	4798      	blx	r3
		xpcc::delay_ms(20);

		coutRaw << "last m " << Laser::DoubleBuffer::get() << endl;
		coutRaw << "rec " << Laser::DoubleBuffer::inSize << endl;*/

		Trigger::sample();
 8002540:	47a0      	blx	r4
		PC::scanForCommands();
 8002542:	47b0      	blx	r6
		Trigger::sample();
 8002544:	47a0      	blx	r4
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
	}
	static void follow(){
		if(!running || func == 0){
 8002546:	782b      	ldrb	r3, [r5, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f9      	beq.n	8002540 <main+0x108>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f5      	bne.n	800253e <main+0x106>
 8002552:	e7f5      	b.n	8002540 <main+0x108>
static bool initClock(){
	// use external 8MHz crystal
	if (!Clock::enableHse(Clock::HseConfig::HSE_CRYSTAL)) {
		return false;
	}
	Clock::enablePll(Clock::PllSource::PLL_HSI, 8, 168);
 8002554:	2000      	movs	r0, #0
 8002556:	2108      	movs	r1, #8
 8002558:	22a8      	movs	r2, #168	; 0xa8
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <main+0x19c>)
 800255c:	4798      	blx	r3
	return Clock::switchToPll();
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <main+0x1a0>)
 8002560:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002564:	4798      	blx	r3
 8002566:	e772      	b.n	800244e <main+0x16>
 8002568:	080076c1 	.word	0x080076c1
 800256c:	080065a5 	.word	0x080065a5
 8002570:	080001c1 	.word	0x080001c1
 8002574:	080059dd 	.word	0x080059dd
 8002578:	200008d0 	.word	0x200008d0
 800257c:	200008d4 	.word	0x200008d4
 8002580:	0800591d 	.word	0x0800591d
 8002584:	0800929c 	.word	0x0800929c
 8002588:	200013bc 	.word	0x200013bc
 800258c:	08001081 	.word	0x08001081
 8002590:	080092a8 	.word	0x080092a8
 8002594:	08002665 	.word	0x08002665
 8002598:	080092b8 	.word	0x080092b8
 800259c:	08001c29 	.word	0x08001c29
 80025a0:	080092c4 	.word	0x080092c4
 80025a4:	080008b9 	.word	0x080008b9
 80025a8:	080092d8 	.word	0x080092d8
 80025ac:	08001e79 	.word	0x08001e79
 80025b0:	080092e8 	.word	0x080092e8
 80025b4:	080023dd 	.word	0x080023dd
 80025b8:	08006e71 	.word	0x08006e71
 80025bc:	08000ef9 	.word	0x08000ef9
 80025c0:	08006c41 	.word	0x08006c41
 80025c4:	0800697d 	.word	0x0800697d
 80025c8:	0800201d 	.word	0x0800201d
 80025cc:	080067d5 	.word	0x080067d5
 80025d0:	08000349 	.word	0x08000349
 80025d4:	080076ed 	.word	0x080076ed
 80025d8:	0800772d 	.word	0x0800772d
 80025dc:	08001dad 	.word	0x08001dad
 80025e0:	080078f9 	.word	0x080078f9
 80025e4:	0800240d 	.word	0x0800240d
 80025e8:	08000ecd 	.word	0x08000ecd

080025ec <_ZN5MotorIL4Axis0EE8setSpeedEi>:
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
}

void saturate(int& value){
	if(value > 1200){
 80025ec:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 80025f0:	dc0a      	bgt.n	8002608 <_ZN5MotorIL4Axis0EE8setSpeedEi+0x1c>
		value = 1200;
	}else if(value < -1200){
 80025f2:	f510 6f96 	cmn.w	r0, #1200	; 0x4b0
 80025f6:	da0e      	bge.n	8002616 <_ZN5MotorIL4Axis0EE8setSpeedEi+0x2a>
 80025f8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
			
			static inline void
			setCompareValue(uint32_t channel, Value value)
			{
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
				*(&TIM3->CCR1 + (channel - 1)) = value;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <_ZN5MotorIL4Axis0EE8setSpeedEi+0x34>)
 80025fe:	2200      	movs	r2, #0
 8002600:	6018      	str	r0, [r3, #0]
 8002602:	f843 2c04 	str.w	r2, [r3, #-4]
 8002606:	4770      	bx	lr
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
}

void saturate(int& value){
	if(value > 1200){
 8002608:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <_ZN5MotorIL4Axis0EE8setSpeedEi+0x38>)
 800260e:	2200      	movs	r2, #0
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	4770      	bx	lr
}

template<>
void Motor<X>::setSpeed(int speed){
	saturate(speed);
	if(speed > 0){
 8002616:	2800      	cmp	r0, #0
 8002618:	dcf8      	bgt.n	800260c <_ZN5MotorIL4Axis0EE8setSpeedEi+0x20>
 800261a:	4240      	negs	r0, r0
 800261c:	e7ee      	b.n	80025fc <_ZN5MotorIL4Axis0EE8setSpeedEi+0x10>
 800261e:	bf00      	nop
 8002620:	40000438 	.word	0x40000438
 8002624:	40000434 	.word	0x40000434

08002628 <_ZN5MotorIL4Axis2EE8setSpeedEi>:
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
}

void saturate(int& value){
	if(value > 1200){
 8002628:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 800262c:	dc0a      	bgt.n	8002644 <_ZN5MotorIL4Axis2EE8setSpeedEi+0x1c>
		value = 1200;
	}else if(value < -1200){
 800262e:	f510 6f96 	cmn.w	r0, #1200	; 0x4b0
 8002632:	da0e      	bge.n	8002652 <_ZN5MotorIL4Axis2EE8setSpeedEi+0x2a>
 8002634:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <_ZN5MotorIL4Axis2EE8setSpeedEi+0x34>)
 800263a:	2200      	movs	r2, #0
 800263c:	6018      	str	r0, [r3, #0]
 800263e:	f843 2c04 	str.w	r2, [r3, #-4]
 8002642:	4770      	bx	lr
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
}

void saturate(int& value){
	if(value > 1200){
 8002644:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <_ZN5MotorIL4Axis2EE8setSpeedEi+0x38>)
 800264a:	2200      	movs	r2, #0
 800264c:	6018      	str	r0, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	4770      	bx	lr
}

template<>
void Motor<Y>::setSpeed(int speed){
	saturate(speed);
	if(speed > 0){
 8002652:	2800      	cmp	r0, #0
 8002654:	dcf8      	bgt.n	8002648 <_ZN5MotorIL4Axis2EE8setSpeedEi+0x20>
 8002656:	4240      	negs	r0, r0
 8002658:	e7ee      	b.n	8002638 <_ZN5MotorIL4Axis2EE8setSpeedEi+0x10>
 800265a:	bf00      	nop
 800265c:	40000440 	.word	0x40000440
 8002660:	4000043c 	.word	0x4000043c

08002664 <_ZN5MotorIL4Axis5EE4initEv>:
		Timer3::setCompareValue(3, 0);
	}
}

template<>
bool Motor<ALL>::init(){
 8002664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
 8002668:	4e7f      	ldr	r6, [pc, #508]	; (8002868 <_ZN5MotorIL4Axis5EE4initEv+0x204>)
				// Enable AFIO
				RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
				AFIO->EXTICR[idx] |= mask;
#elif	defined(STM32F2XX) || defined(STM32F4XX)
				// Enable SYSCFG
				RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800266a:	4880      	ldr	r0, [pc, #512]	; (800286c <_ZN5MotorIL4Axis5EE4initEv+0x208>)
 800266c:	6835      	ldr	r5, [r6, #0]
				SYSCFG->EXTICR[idx] |= mask;
 800266e:	4980      	ldr	r1, [pc, #512]	; (8002870 <_ZN5MotorIL4Axis5EE4initEv+0x20c>)
				case Mode::Falling:
					EXTI->RTSR &= ~(mask);
					EXTI->FTSR |=  (mask);
					break;
				case Mode::RisingFalling:
					EXTI->RTSR |=  (mask);
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <_ZN5MotorIL4Axis5EE4initEv+0x210>)
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002672:	4a81      	ldr	r2, [pc, #516]	; (8002878 <_ZN5MotorIL4Axis5EE4initEv+0x214>)
GPIO__INPUT(M2_FS, B, 4);

GPIO__OUTPUT(M1_IN1, C, 6); //TIM3 CH1
 8002674:	4c81      	ldr	r4, [pc, #516]	; (800287c <_ZN5MotorIL4Axis5EE4initEv+0x218>)
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM3->PSC = prescaler - 1;
 8002676:	4f82      	ldr	r7, [pc, #520]	; (8002880 <_ZN5MotorIL4Axis5EE4initEv+0x21c>)
	Timer3::setMode(Timer3::UP_COUNTER);

	// 72 MHz / 2 / 1200 = 60kHz
	Timer3::setPrescaler(1);
	Timer3::setOverflow(1200);
	Timer3::configureOutputChannel(1, Timer3::OUTPUT_PWM, 0);
 8002678:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8002890 <_ZN5MotorIL4Axis5EE4initEv+0x22c>

//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
 800267c:	f025 0530 	bic.w	r5, r5, #48	; 0x30
 8002680:	6035      	str	r5, [r6, #0]
 8002682:	68f5      	ldr	r5, [r6, #12]
 8002684:	f025 0530 	bic.w	r5, r5, #48	; 0x30
 8002688:	f045 0510 	orr.w	r5, r5, #16
 800268c:	60f5      	str	r5, [r6, #12]
				// Enable AFIO
				RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
				AFIO->EXTICR[idx] |= mask;
#elif	defined(STM32F2XX) || defined(STM32F4XX)
				// Enable SYSCFG
				RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800268e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8002690:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002694:	6445      	str	r5, [r0, #68]	; 0x44
				SYSCFG->EXTICR[idx] |= mask;
 8002696:	688d      	ldr	r5, [r1, #8]
 8002698:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800269c:	608d      	str	r5, [r1, #8]
				case Mode::Falling:
					EXTI->RTSR &= ~(mask);
					EXTI->FTSR |=  (mask);
					break;
				case Mode::RisingFalling:
					EXTI->RTSR |=  (mask);
 800269e:	689d      	ldr	r5, [r3, #8]
 80026a0:	f045 0504 	orr.w	r5, r5, #4
 80026a4:	609d      	str	r5, [r3, #8]
					EXTI->FTSR |=  (mask);
 80026a6:	68dd      	ldr	r5, [r3, #12]
 80026a8:	f045 0504 	orr.w	r5, r5, #4
 80026ac:	60dd      	str	r5, [r3, #12]
			}

			static inline void
			enableInterrupt(const Pin pin)
			{
				EXTI->IMR |=  (getLineMaskFromPin(pin));
 80026ae:	f8d3 e000 	ldr.w	lr, [r3]
 80026b2:	f04e 0e04 	orr.w	lr, lr, #4
 80026b6:	f8c3 e000 	str.w	lr, [r3]
 80026ba:	25f0      	movs	r5, #240	; 0xf0
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80026bc:	f44f 7e80 	mov.w	lr, #256	; 0x100
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80026c0:	f882 5308 	strb.w	r5, [r2, #776]	; 0x308
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80026c4:	f8c2 e000 	str.w	lr, [r2]
GPIO__INPUT(M2_FS, B, 4);
 80026c8:	f8d6 e000 	ldr.w	lr, [r6]
 80026cc:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
 80026d0:	f8c6 e000 	str.w	lr, [r6]
 80026d4:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 80026d8:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
 80026dc:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 80026e0:	f8c6 e00c 	str.w	lr, [r6, #12]
				// Enable AFIO
				RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
				AFIO->EXTICR[idx] |= mask;
#elif	defined(STM32F2XX) || defined(STM32F4XX)
				// Enable SYSCFG
				RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80026e4:	f8d0 e044 	ldr.w	lr, [r0, #68]	; 0x44
 80026e8:	f44e 4e80 	orr.w	lr, lr, #16384	; 0x4000
 80026ec:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
				SYSCFG->EXTICR[idx] |= mask;
 80026f0:	68c8      	ldr	r0, [r1, #12]
 80026f2:	f040 0001 	orr.w	r0, r0, #1
 80026f6:	60c8      	str	r0, [r1, #12]
				case Mode::Falling:
					EXTI->RTSR &= ~(mask);
					EXTI->FTSR |=  (mask);
					break;
				case Mode::RisingFalling:
					EXTI->RTSR |=  (mask);
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	f041 0110 	orr.w	r1, r1, #16
 80026fe:	6099      	str	r1, [r3, #8]
					EXTI->FTSR |=  (mask);
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	f041 0110 	orr.w	r1, r1, #16
 8002706:	60d9      	str	r1, [r3, #12]
			}

			static inline void
			enableInterrupt(const Pin pin)
			{
				EXTI->IMR |=  (getLineMaskFromPin(pin));
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	f041 0110 	orr.w	r1, r1, #16
 800270e:	6019      	str	r1, [r3, #0]
 8002710:	f44f 6380 	mov.w	r3, #1024	; 0x400
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002714:	f882 530a 	strb.w	r5, [r2, #778]	; 0x30a
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002718:	6013      	str	r3, [r2, #0]

GPIO__OUTPUT(M1_IN1, C, 6); //TIM3 CH1
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002724:	6023      	str	r3, [r4, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 8002726:	6a23      	ldr	r3, [r4, #32]
				tmp &= ~(0xf << (N * 4));
 8002728:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
				tmp |= m << (N * 4);
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 8002730:	6223      	str	r3, [r4, #32]
 8002732:	6863      	ldr	r3, [r4, #4]
 8002734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002738:	6063      	str	r3, [r4, #4]
 800273a:	68a3      	ldr	r3, [r4, #8]
 800273c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002744:	60a3      	str	r3, [r4, #8]
 8002746:	68e3      	ldr	r3, [r4, #12]
 8002748:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274c:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(M1_IN2, C, 7); //TIM3 CH2
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002758:	6023      	str	r3, [r4, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 800275a:	6a23      	ldr	r3, [r4, #32]
				tmp &= ~(0xf << (N * 4));
 800275c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
				tmp |= m << (N * 4);
 8002760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 8002764:	6223      	str	r3, [r4, #32]
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276c:	6063      	str	r3, [r4, #4]
 800276e:	68a3      	ldr	r3, [r4, #8]
 8002770:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	60a3      	str	r3, [r4, #8]
 800277a:	68e3      	ldr	r3, [r4, #12]
 800277c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002780:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	6023      	str	r3, [r4, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 800278e:	6a63      	ldr	r3, [r4, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 8002790:	f023 030f 	bic.w	r3, r3, #15
				tmp |= (m << ((N - 8) * 4));
 8002794:	f043 0302 	orr.w	r3, r3, #2
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 8002798:	6263      	str	r3, [r4, #36]	; 0x24
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	6063      	str	r3, [r4, #4]
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	60a3      	str	r3, [r4, #8]
 80027ae:	68e3      	ldr	r3, [r4, #12]
 80027b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b4:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80027bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027c0:	6023      	str	r3, [r4, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 80027c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
				tmp |= (m << ((N - 8) * 4));
 80027c8:	f043 0320 	orr.w	r3, r3, #32
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 80027cc:	6263      	str	r3, [r4, #36]	; 0x24
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d4:	6063      	str	r3, [r4, #4]
 80027d6:	68a3      	ldr	r3, [r4, #8]
 80027d8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	60a3      	str	r3, [r4, #8]
 80027e2:	68e3      	ldr	r3, [r4, #12]
		Timer3::setCompareValue(3, 0);
	}
}

template<>
bool Motor<ALL>::init(){
 80027e4:	b082      	sub	sp, #8
GPIO__INPUT(M2_FS, B, 4);

GPIO__OUTPUT(M1_IN1, C, 6); //TIM3 CH1
GPIO__OUTPUT(M1_IN2, C, 7); //TIM3 CH2
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
 80027e6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
	M1_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN1::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);

	Timer3::enable();
	Timer3::setMode(Timer3::UP_COUNTER);
 80027ea:	2500      	movs	r5, #0
GPIO__INPUT(M2_FS, B, 4);

GPIO__OUTPUT(M1_IN1, C, 6); //TIM3 CH1
GPIO__OUTPUT(M1_IN2, C, 7); //TIM3 CH2
GPIO__OUTPUT(M2_IN1, C, 8); //TIM3 CH3
GPIO__OUTPUT(M2_IN2, C, 9); //TIM3 CH4
 80027ec:	60e3      	str	r3, [r4, #12]
	M1_IN1::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M1_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN1::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);

	Timer3::enable();
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <_ZN5MotorIL4Axis5EE4initEv+0x220>)
	Timer3::setMode(Timer3::UP_COUNTER);
 80027f0:	4c25      	ldr	r4, [pc, #148]	; (8002888 <_ZN5MotorIL4Axis5EE4initEv+0x224>)
	M1_IN1::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M1_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN1::setAlternateFunction(AF_TIM3, PUSH_PULL);
	M2_IN2::setAlternateFunction(AF_TIM3, PUSH_PULL);

	Timer3::enable();
 80027f2:	4798      	blx	r3
	Timer3::setMode(Timer3::UP_COUNTER);
 80027f4:	4628      	mov	r0, r5
 80027f6:	4629      	mov	r1, r5
 80027f8:	462a      	mov	r2, r5
 80027fa:	462b      	mov	r3, r5
 80027fc:	9500      	str	r5, [sp, #0]
 80027fe:	47a0      	blx	r4

	// 72 MHz / 2 / 1200 = 60kHz
	Timer3::setPrescaler(1);
	Timer3::setOverflow(1200);
	Timer3::configureOutputChannel(1, Timer3::OUTPUT_PWM, 0);
 8002800:	2001      	movs	r0, #1
			}
			
			static inline void
			setOverflow(Value overflow)
			{
				TIM3->ARR = overflow;
 8002802:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8002806:	4603      	mov	r3, r0
 8002808:	2160      	movs	r1, #96	; 0x60
 800280a:	462a      	mov	r2, r5
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM3->PSC = prescaler - 1;
 800280c:	853d      	strh	r5, [r7, #40]	; 0x28
			}
			
			static inline void
			setOverflow(Value overflow)
			{
				TIM3->ARR = overflow;
 800280e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002810:	47c0      	blx	r8
	Timer3::configureOutputChannel(2, Timer3::OUTPUT_PWM, 0);
 8002812:	2002      	movs	r0, #2
 8002814:	2160      	movs	r1, #96	; 0x60
 8002816:	2301      	movs	r3, #1
 8002818:	462a      	mov	r2, r5
 800281a:	47c0      	blx	r8
	Timer3::configureOutputChannel(3, Timer3::OUTPUT_PWM, 0);
 800281c:	2003      	movs	r0, #3
 800281e:	2160      	movs	r1, #96	; 0x60
 8002820:	2301      	movs	r3, #1
 8002822:	462a      	mov	r2, r5
 8002824:	47c0      	blx	r8
	Timer3::configureOutputChannel(4, Timer3::OUTPUT_PWM, 0);
 8002826:	2301      	movs	r3, #1
 8002828:	2004      	movs	r0, #4
 800282a:	2160      	movs	r1, #96	; 0x60
 800282c:	462a      	mov	r2, r5
 800282e:	47c0      	blx	r8
			
			static inline void
			applyAndReset()
			{
				// Generate Update Event to apply the new settings for ARR
				TIM3->EGR |= TIM_EGR_UG;
 8002830:	8abb      	ldrh	r3, [r7, #20]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	82bb      	strh	r3, [r7, #20]
			}
			
			static inline void
			start()
			{
				TIM3->CR1 |= TIM_CR1_CEN;
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	803b      	strh	r3, [r7, #0]

//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
 8002844:	6933      	ldr	r3, [r6, #16]
	Timer3::configureOutputChannel(3, Timer3::OUTPUT_PWM, 0);
	Timer3::configureOutputChannel(4, Timer3::OUTPUT_PWM, 0);
	Timer3::applyAndReset();
	Timer3::start();

	if(!M1_FS::read()){
 8002846:	075a      	lsls	r2, r3, #29
 8002848:	d50a      	bpl.n	8002860 <_ZN5MotorIL4Axis5EE4initEv+0x1fc>
//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
GPIO__INPUT(M2_FS, B, 4);
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <_ZN5MotorIL4Axis5EE4initEv+0x204>)
 800284c:	691b      	ldr	r3, [r3, #16]
	if(!M1_FS::read()){
		//fault state
		State::set(State::MOTOR1_FAULT);
	}

	if(!M2_FS::read()){
 800284e:	06db      	lsls	r3, r3, #27
 8002850:	d402      	bmi.n	8002858 <_ZN5MotorIL4Axis5EE4initEv+0x1f4>
		//fault state
		State::set(State::MOTOR2_FAULT);
 8002852:	2020      	movs	r0, #32
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <_ZN5MotorIL4Axis5EE4initEv+0x228>)
 8002856:	4798      	blx	r3
	}
	return true;
}
 8002858:	2001      	movs	r0, #1
 800285a:	b002      	add	sp, #8
 800285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Timer3::applyAndReset();
	Timer3::start();

	if(!M1_FS::read()){
		//fault state
		State::set(State::MOTOR1_FAULT);
 8002860:	2010      	movs	r0, #16
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <_ZN5MotorIL4Axis5EE4initEv+0x228>)
 8002864:	4798      	blx	r3
 8002866:	e7f0      	b.n	800284a <_ZN5MotorIL4Axis5EE4initEv+0x1e6>
 8002868:	40020400 	.word	0x40020400
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40013c00 	.word	0x40013c00
 8002878:	e000e100 	.word	0xe000e100
 800287c:	40020800 	.word	0x40020800
 8002880:	40000400 	.word	0x40000400
 8002884:	08006f9d 	.word	0x08006f9d
 8002888:	08006fbd 	.word	0x08006fbd
 800288c:	080067d5 	.word	0x080067d5
 8002890:	08006ff9 	.word	0x08006ff9

08002894 <EXTI2_IRQHandler>:
/**
 * Motor 1 fault state handler
 * Connected to PB2
 */
extern "C" void
EXTI2_IRQHandler(void) {
 8002894:	b508      	push	{r3, lr}
			/**	\brief	Reset the interrupt flag in the interrupt routine. */
			static inline void
			resetInterruptFlag(const Pin pin)
			{
				// Flags are cleared by writing a one to the flag position.
				EXTI->PR |= (getLineMaskFromPin(pin));
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <EXTI2_IRQHandler+0x20>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	f042 0204 	orr.w	r2, r2, #4
 800289e:	615a      	str	r2, [r3, #20]

//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
 80028a0:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 80028a4:	691b      	ldr	r3, [r3, #16]
 * Connected to PB2
 */
extern "C" void
EXTI2_IRQHandler(void) {
	ExtInt::resetInterruptFlag(ExtInt::Pin::PB2);
	if(!M1_FS::read()){
 80028a6:	0759      	lsls	r1, r3, #29
 80028a8:	d402      	bmi.n	80028b0 <EXTI2_IRQHandler+0x1c>
		//fault state
		State::set(State::MOTOR1_FAULT);
 80028aa:	2010      	movs	r0, #16
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <EXTI2_IRQHandler+0x24>)
 80028ae:	4798      	blx	r3
 80028b0:	bd08      	pop	{r3, pc}
 80028b2:	bf00      	nop
 80028b4:	40013c00 	.word	0x40013c00
 80028b8:	080067d5 	.word	0x080067d5

080028bc <EXTI4_IRQHandler>:
/**
 * Motor 2 fault state handler
 * Connected to PB4
 */
extern "C" void
EXTI4_IRQHandler(void) {
 80028bc:	b508      	push	{r3, lr}
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <EXTI4_IRQHandler+0x20>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	f042 0210 	orr.w	r2, r2, #16
 80028c6:	615a      	str	r2, [r3, #20]
//private namespace
namespace{
GPIO__INPUT(M1_FB, B, 0);
GPIO__INPUT(M2_FB, B, 1);
GPIO__INPUT(M1_FS, B, 2);
GPIO__INPUT(M2_FS, B, 4);
 80028c8:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 80028cc:	691b      	ldr	r3, [r3, #16]
 * Connected to PB4
 */
extern "C" void
EXTI4_IRQHandler(void) {
	ExtInt::resetInterruptFlag(ExtInt::Pin::PB4);
	if(!M2_FS::read()){
 80028ce:	06d8      	lsls	r0, r3, #27
 80028d0:	d402      	bmi.n	80028d8 <EXTI4_IRQHandler+0x1c>
		//fault state
		State::set(State::MOTOR2_FAULT);
 80028d2:	2020      	movs	r0, #32
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <EXTI4_IRQHandler+0x24>)
 80028d6:	4798      	blx	r3
 80028d8:	bd08      	pop	{r3, pc}
 80028da:	bf00      	nop
 80028dc:	40013c00 	.word	0x40013c00
 80028e0:	080067d5 	.word	0x080067d5

080028e4 <_ZN8Handlers12resetHandlerEPKci>:
    This function acts as a special kind of Data Memory Barrier. 
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80028e4:	f3bf 8f4f 	dsb	sy
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <_ZN8Handlers12resetHandlerEPKci+0x18>)
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8Handlers12resetHandlerEPKci+0x1c>)
 80028ec:	68d1      	ldr	r1, [r2, #12]
 80028ee:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 80028f2:	430b      	orrs	r3, r1
 80028f4:	60d3      	str	r3, [r2, #12]
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	e7fe      	b.n	80028fa <_ZN8Handlers12resetHandlerEPKci+0x16>
 80028fc:	e000ed00 	.word	0xe000ed00
 8002900:	05fa0004 	.word	0x05fa0004

08002904 <_ZN8Handlers19pausePatternHandlerEPKci>:
			return;
		}
		func();
	}
	static void pause(){
		running = false;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <_ZN8Handlers19pausePatternHandlerEPKci+0x10>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
		paused = true;
 800290a:	4b03      	ldr	r3, [pc, #12]	; (8002918 <_ZN8Handlers19pausePatternHandlerEPKci+0x14>)
 800290c:	2001      	movs	r0, #1
 800290e:	7018      	strb	r0, [r3, #0]
static bool pausePatternHandler(const char* cmd, int length){
	(void) cmd;
	(void) length;
	Pattern::pause();
	return true;
}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200008d0 	.word	0x200008d0
 8002918:	200008d8 	.word	0x200008d8

0800291c <_ZN8Handlers20resumePatternHandlerEPKci>:
		State::set(State::SCANNING_RECTANGLE);
		dout << "Pattern start" << endl;
		commandOut << PC::ucCommand::FLUSH_DATA << endl;
	}
	static void resume(){
		running = true;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <_ZN8Handlers20resumePatternHandlerEPKci+0x10>)
 800291e:	2001      	movs	r0, #1
 8002920:	7018      	strb	r0, [r3, #0]
		/*if(!paused){
			start();
		}*/
		paused = false;
 8002922:	4b03      	ldr	r3, [pc, #12]	; (8002930 <_ZN8Handlers20resumePatternHandlerEPKci+0x14>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
static bool resumePatternHandler(const char* cmd, int length){
	(void) cmd;
	(void) length;
	Pattern::resume();
	return true;
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	200008d0 	.word	0x200008d0
 8002930:	200008d8 	.word	0x200008d8

08002934 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEED1Ev>:
		{
		}
		
		virtual
		~IODevice()
		{
 8002934:	4b01      	ldr	r3, [pc, #4]	; (800293c <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEED1Ev+0x8>)
 8002936:	6003      	str	r3, [r0, #0]
	 * \endcode
	 * 
	 * \ingroup		io
	 */
	template<typename T>
	class IODeviceWrapper : public IODevice
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	08009938 	.word	0x08009938

08002940 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEED1Ev>:
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEED1Ev+0x8>)
 8002942:	6003      	str	r3, [r0, #0]
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	08009938 	.word	0x08009938

0800294c <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEED1Ev>:
 800294c:	4b01      	ldr	r3, [pc, #4]	; (8002954 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEED1Ev+0x8>)
 800294e:	6003      	str	r3, [r0, #0]
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	08009938 	.word	0x08009938

08002958 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEED1Ev>:
 8002958:	4b01      	ldr	r3, [pc, #4]	; (8002960 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEED1Ev+0x8>)
 800295a:	6003      	str	r3, [r0, #0]
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	08009938 	.word	0x08009938

08002964 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEED1Ev>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEED1Ev+0x8>)
 8002966:	6003      	str	r3, [r0, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	08009938 	.word	0x08009938

08002970 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEED1Ev>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEED1Ev+0x8>)
 8002972:	6003      	str	r3, [r0, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	08009938 	.word	0x08009938

0800297c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEED1Ev>:
 800297c:	4b01      	ldr	r3, [pc, #4]	; (8002984 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEED1Ev+0x8>)
 800297e:	6003      	str	r3, [r0, #0]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	08009938 	.word	0x08009938

08002988 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EED1Ev>:
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EED1Ev+0x8>)
 800298a:	6003      	str	r3, [r0, #0]
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	08009938 	.word	0x08009938

08002994 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop

08002998 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 8002998:	2000      	movs	r0, #0
 800299a:	4770      	bx	lr

0800299c <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr

080029a4 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop

080029a8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029a8:	2000      	movs	r0, #0
 80029aa:	4770      	bx	lr

080029ac <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029b0:	2000      	movs	r0, #0
 80029b2:	4770      	bx	lr

080029b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029b8:	2000      	movs	r0, #0
 80029ba:	4770      	bx	lr

080029bc <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029c0:	2000      	movs	r0, #0
 80029c2:	4770      	bx	lr

080029c4 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE4readERc>:
				return true;
			}
			else {
				return false;
			}
		}
 80029c8:	2000      	movs	r0, #0
 80029ca:	4770      	bx	lr

080029cc <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5flushEv>:
				T::write(static_cast<uint8_t>(c));
			}
		}
		
		virtual void
		flush()
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE4readERc>:
		{
		}
		
		virtual bool
		read(char& c)
 80029d0:	b510      	push	{r4, lr}
 80029d2:	b082      	sub	sp, #8
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
 80029d4:	f10d 0007 	add.w	r0, sp, #7
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE4readERc+0x1c>)
		flush()
		{
		}
		
		virtual bool
		read(char& c)
 80029da:	460c      	mov	r4, r1
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
 80029dc:	4798      	blx	r3
 80029de:	b118      	cbz	r0, 80029e8 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE4readERc+0x18>
				c = t;
 80029e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
				return true;
 80029e4:	2001      	movs	r0, #1
		read(char& c)
		{
			// FIXME
			uint8_t t;
			if (T::read(t)) {
				c = t;
 80029e6:	7023      	strb	r3, [r4, #0]
				return true;
			}
			else {
				return false;
			}
		}
 80029e8:	b002      	add	sp, #8
 80029ea:	bd10      	pop	{r4, pc}
 80029ec:	080073b1 	.word	0x080073b1

080029f0 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 80029f0:	b538      	push	{r3, r4, r5, lr}
		{
			char c;
			while ((c = *s++)) {
 80029f2:	460c      	mov	r4, r1
 80029f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80029f8:	b128      	cbz	r0, 8002a06 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEPKc+0x16>
 80029fa:	4d03      	ldr	r5, [pc, #12]	; (8002a08 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEPKc+0x18>)
				T::write(static_cast<uint8_t>(c));
 80029fc:	47a8      	blx	r5
		
		virtual void
		write(const char *s)
		{
			char c;
			while ((c = *s++)) {
 80029fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1fa      	bne.n	80029fc <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEPKc+0xc>
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	08007359 	.word	0x08007359

08002a0c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 8002a0c:	b508      	push	{r3, lr}
		{
			T::write(c);
 8002a0e:	4608      	mov	r0, r1
 8002a10:	4b01      	ldr	r3, [pc, #4]	; (8002a18 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EE5writeEc+0xc>)
 8002a12:	4798      	blx	r3
 8002a14:	bd08      	pop	{r3, pc}
 8002a16:	bf00      	nop
 8002a18:	08007359 	.word	0x08007359

08002a1c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EED0Ev>:
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EED0Ev+0x10>)
	 * \endcode
	 * 
	 * \ingroup		io
	 */
	template<typename T>
	class IODeviceWrapper : public IODevice
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	4604      	mov	r4, r0
 8002a22:	6003      	str	r3, [r0, #0]
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <_ZN4xpcc15IODeviceWrapperINS_5stm3214BufferedUsart2EED0Ev+0x14>)
 8002a26:	4798      	blx	r3
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	08009938 	.word	0x08009938
 8002a30:	08007891 	.word	0x08007891

08002a34 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEED0Ev>:
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEED0Ev+0x10>)
 8002a36:	b510      	push	{r4, lr}
 8002a38:	4604      	mov	r4, r0
 8002a3a:	6003      	str	r3, [r0, #0]
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEED0Ev+0x14>)
 8002a3e:	4798      	blx	r3
 8002a40:	4620      	mov	r0, r4
 8002a42:	bd10      	pop	{r4, pc}
 8002a44:	08009938 	.word	0x08009938
 8002a48:	08007891 	.word	0x08007891

08002a4c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEED0Ev>:
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEED0Ev+0x10>)
 8002a4e:	b510      	push	{r4, lr}
 8002a50:	4604      	mov	r4, r0
 8002a52:	6003      	str	r3, [r0, #0]
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEED0Ev+0x14>)
 8002a56:	4798      	blx	r3
 8002a58:	4620      	mov	r0, r4
 8002a5a:	bd10      	pop	{r4, pc}
 8002a5c:	08009938 	.word	0x08009938
 8002a60:	08007891 	.word	0x08007891

08002a64 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEED0Ev>:
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEED0Ev+0x10>)
 8002a66:	b510      	push	{r4, lr}
 8002a68:	4604      	mov	r4, r0
 8002a6a:	6003      	str	r3, [r0, #0]
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEED0Ev+0x14>)
 8002a6e:	4798      	blx	r3
 8002a70:	4620      	mov	r0, r4
 8002a72:	bd10      	pop	{r4, pc}
 8002a74:	08009938 	.word	0x08009938
 8002a78:	08007891 	.word	0x08007891

08002a7c <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEED0Ev>:
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEED0Ev+0x10>)
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	4604      	mov	r4, r0
 8002a82:	6003      	str	r3, [r0, #0]
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEED0Ev+0x14>)
 8002a86:	4798      	blx	r3
 8002a88:	4620      	mov	r0, r4
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	08009938 	.word	0x08009938
 8002a90:	08007891 	.word	0x08007891

08002a94 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEED0Ev>:
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEED0Ev+0x10>)
 8002a96:	b510      	push	{r4, lr}
 8002a98:	4604      	mov	r4, r0
 8002a9a:	6003      	str	r3, [r0, #0]
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEED0Ev+0x14>)
 8002a9e:	4798      	blx	r3
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	bd10      	pop	{r4, pc}
 8002aa4:	08009938 	.word	0x08009938
 8002aa8:	08007891 	.word	0x08007891

08002aac <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEED0Ev>:
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEED0Ev+0x10>)
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	6003      	str	r3, [r0, #0]
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEED0Ev+0x14>)
 8002ab6:	4798      	blx	r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	08009938 	.word	0x08009938
 8002ac0:	08007891 	.word	0x08007891

08002ac4 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEED0Ev>:
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEED0Ev+0x10>)
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	4604      	mov	r4, r0
 8002aca:	6003      	str	r3, [r0, #0]
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEED0Ev+0x14>)
 8002ace:	4798      	blx	r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	bd10      	pop	{r4, pc}
 8002ad4:	08009938 	.word	0x08009938
 8002ad8:	08007891 	.word	0x08007891

08002adc <_ZN8Handlers14getMeasurementEPKci>:
	iout << "buffered states: " << HallSensor<X>::isAtFront() << "-" << HallSensor<X>::isAtEnd();
	iout << " :: " << HallSensor<Y>::isAtFront() << "-" << HallSensor<Y>::isAtEnd() << endl;
	return false;
}

static bool getMeasurement(const char* cmd, int length){
 8002adc:	b508      	push	{r3, lr}
	(void) cmd;
	(void) length;
	Trigger::forceTrigger();
 8002ade:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <_ZN8Handlers14getMeasurementEPKci+0xc>)
 8002ae0:	4798      	blx	r3
	return false;
}
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	bd08      	pop	{r3, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08000349 	.word	0x08000349

08002aec <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci>:
	Trigger::setThreshold(threshold);
	return true;
}

template<Axis axis>
static bool getControlOutputs(const char* cmd, int length){
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002aee:	4c87      	ldr	r4, [pc, #540]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002af0:	6863      	ldr	r3, [r4, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80b8 	beq.w	8002c68 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x17c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002af8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002afa:	4620      	mov	r0, r4
 8002afc:	bf0c      	ite	eq
 8002afe:	4b84      	ldreq	r3, [pc, #528]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002b00:	4b84      	ldrne	r3, [pc, #528]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8002b02:	4985      	ldr	r1, [pc, #532]	; (8002d18 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x22c>)
			}
			else {
				this->writeHex(s);
 8002b04:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002b06:	6863      	ldr	r3, [r4, #4]
 8002b08:	4880      	ldr	r0, [pc, #512]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80b6 	beq.w	8002c7c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x190>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002b10:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002b12:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002b14:	bf0c      	ite	eq
 8002b16:	4b81      	ldreq	r3, [pc, #516]	; (8002d1c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002b18:	4b81      	ldrne	r3, [pc, #516]	; (8002d20 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x234>)
 8002b1a:	4798      	blx	r3
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x238>)
	(void) cmd;
	(void) length;
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
 8002b1e:	4e7b      	ldr	r6, [pc, #492]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b20:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002b22:	4d81      	ldr	r5, [pc, #516]	; (8002d28 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x23c>)
 8002b24:	4630      	mov	r0, r6
 8002b26:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80e7 	beq.w	8002cfe <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x212>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002b30:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002b32:	4630      	mov	r0, r6
 8002b34:	497d      	ldr	r1, [pc, #500]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002b36:	bf0c      	ite	eq
 8002b38:	4b75      	ldreq	r3, [pc, #468]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002b3a:	4b76      	ldrne	r3, [pc, #472]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002b3c:	4798      	blx	r3
 8002b3e:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x244>)
 8002b40:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const int32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 8002b42:	6863      	ldr	r3, [r4, #4]
 8002b44:	4606      	mov	r6, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80d5 	beq.w	8002cf6 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x20a>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f000 8101 	beq.w	8002d54 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x268>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 8002b52:	4f73      	ldr	r7, [pc, #460]	; (8002d20 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x234>)
 8002b54:	486d      	ldr	r0, [pc, #436]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b56:	0e31      	lsrs	r1, r6, #24
 8002b58:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 8002b5a:	486c      	ldr	r0, [pc, #432]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b5c:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8002b60:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8002b62:	486a      	ldr	r0, [pc, #424]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b64:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002b68:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8002b6a:	4868      	ldr	r0, [pc, #416]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b6c:	b2f1      	uxtb	r1, r6
 8002b6e:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002b70:	6863      	ldr	r3, [r4, #4]
 8002b72:	4866      	ldr	r0, [pc, #408]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80b8 	beq.w	8002cea <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1fe>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002b7a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002b7c:	496b      	ldr	r1, [pc, #428]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002b7e:	bf0c      	ite	eq
 8002b80:	4b63      	ldreq	r3, [pc, #396]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002b82:	4b64      	ldrne	r3, [pc, #400]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002b84:	4798      	blx	r3
	 */
	static void setShallSpeed(double speed);
	static int getSpeedErrorSum();
	static int getPositionErrorSum();
	static int32_t getIsPosition();
	static inline int getShallSpeed(){ return v_shall; }
 8002b86:	4b6b      	ldr	r3, [pc, #428]	; (8002d34 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x248>)
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8002b88:	4e60      	ldr	r6, [pc, #384]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002b8a:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80a3 	beq.w	8002cde <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1f2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002b98:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	4963      	ldr	r1, [pc, #396]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002b9e:	bf0c      	ite	eq
 8002ba0:	4b5b      	ldreq	r3, [pc, #364]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002ba2:	4b5c      	ldrne	r3, [pc, #368]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002ba4:	4798      	blx	r3
	static inline int getIsSpeed(){ return v_is; }
 8002ba6:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x24c>)
 8002ba8:	4e58      	ldr	r6, [pc, #352]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002baa:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002bac:	4630      	mov	r0, r6
 8002bae:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002bb0:	6863      	ldr	r3, [r4, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 808d 	beq.w	8002cd2 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1e6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002bb8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002bba:	4630      	mov	r0, r6
 8002bbc:	495b      	ldr	r1, [pc, #364]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002bbe:	bf0c      	ite	eq
 8002bc0:	4b53      	ldreq	r3, [pc, #332]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002bc2:	4b54      	ldrne	r3, [pc, #336]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002bc4:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x250>)
 8002bc8:	4e50      	ldr	r6, [pc, #320]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	4630      	mov	r0, r6
 8002bce:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d077      	beq.n	8002cc6 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1da>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002bd6:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002bd8:	4630      	mov	r0, r6
 8002bda:	4954      	ldr	r1, [pc, #336]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002bdc:	bf0c      	ite	eq
 8002bde:	4b4c      	ldreq	r3, [pc, #304]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002be0:	4b4c      	ldrne	r3, [pc, #304]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002be2:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x254>)
 8002be6:	4e49      	ldr	r6, [pc, #292]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	4630      	mov	r0, r6
 8002bec:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d062      	beq.n	8002cba <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1ce>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002bf4:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002bf6:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	bf0c      	ite	eq
 8002bfc:	4b47      	ldreq	r3, [pc, #284]	; (8002d1c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002bfe:	4b48      	ldrne	r3, [pc, #288]	; (8002d20 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x234>)
 8002c00:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	4841      	ldr	r0, [pc, #260]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d051      	beq.n	8002cae <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1c2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002c0a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x258>)
 8002c0e:	bf0c      	ite	eq
 8002c10:	4b3f      	ldreq	r3, [pc, #252]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002c12:	4b40      	ldrne	r3, [pc, #256]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002c14:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002c16:	6863      	ldr	r3, [r4, #4]
 8002c18:	483c      	ldr	r0, [pc, #240]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d041      	beq.n	8002ca2 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1b6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002c1e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002c20:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002c22:	bf0c      	ite	eq
 8002c24:	4b3d      	ldreq	r3, [pc, #244]	; (8002d1c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002c26:	4b3e      	ldrne	r3, [pc, #248]	; (8002d20 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x234>)
 8002c28:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x25c>)
 8002c2c:	4e37      	ldr	r6, [pc, #220]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002c2e:	7819      	ldrb	r1, [r3, #0]
 8002c30:	4630      	mov	r0, r6
 8002c32:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002c34:	6863      	ldr	r3, [r4, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d02d      	beq.n	8002c96 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x1aa>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002c3a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	4943      	ldr	r1, [pc, #268]	; (8002d4c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x260>)
 8002c40:	bf0c      	ite	eq
 8002c42:	4b33      	ldreq	r3, [pc, #204]	; (8002d10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002c44:	4b33      	ldrne	r3, [pc, #204]	; (8002d14 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x228>)
 8002c46:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x264>)
 8002c4a:	4e30      	ldr	r6, [pc, #192]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002c4c:	7819      	ldrb	r1, [r3, #0]
 8002c4e:	4630      	mov	r0, r6
 8002c50:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	b1c3      	cbz	r3, 8002c88 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x19c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002c56:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002c58:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	bf0c      	ite	eq
 8002c5e:	4b2f      	ldreq	r3, [pc, #188]	; (8002d1c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002c60:	4b2f      	ldrne	r3, [pc, #188]	; (8002d20 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x234>)
 8002c62:	4798      	blx	r3
	return false;
}
 8002c64:	2000      	movs	r0, #0
 8002c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002c68:	6820      	ldr	r0, [r4, #0]
 8002c6a:	492b      	ldr	r1, [pc, #172]	; (8002d18 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x22c>)
 8002c6c:	6803      	ldr	r3, [r0, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002c72:	6863      	ldr	r3, [r4, #4]
 8002c74:	4825      	ldr	r0, [pc, #148]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f47f af4a 	bne.w	8002b10 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x24>
				this->device->write(v);
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	6803      	ldr	r3, [r0, #0]
 8002c80:	210a      	movs	r1, #10
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4798      	blx	r3
 8002c86:	e749      	b.n	8002b1c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x30>
 8002c88:	6830      	ldr	r0, [r6, #0]
 8002c8a:	6803      	ldr	r3, [r0, #0]
 8002c8c:	210a      	movs	r1, #10
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4798      	blx	r3
 8002c92:	2000      	movs	r0, #0
 8002c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002c96:	6830      	ldr	r0, [r6, #0]
 8002c98:	492c      	ldr	r1, [pc, #176]	; (8002d4c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x260>)
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4798      	blx	r3
 8002ca0:	e7d2      	b.n	8002c48 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x15c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8002ca2:	6800      	ldr	r0, [r0, #0]
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	210a      	movs	r1, #10
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4798      	blx	r3
 8002cac:	e7bd      	b.n	8002c2a <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x13e>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	4924      	ldr	r1, [pc, #144]	; (8002d44 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x258>)
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4798      	blx	r3
 8002cb8:	e7ad      	b.n	8002c16 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x12a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8002cba:	6830      	ldr	r0, [r6, #0]
 8002cbc:	6803      	ldr	r3, [r0, #0]
 8002cbe:	210a      	movs	r1, #10
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4798      	blx	r3
 8002cc4:	e79d      	b.n	8002c02 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x116>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002cc6:	6830      	ldr	r0, [r6, #0]
 8002cc8:	4918      	ldr	r1, [pc, #96]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4798      	blx	r3
 8002cd0:	e788      	b.n	8002be4 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0xf8>
 8002cd2:	6830      	ldr	r0, [r6, #0]
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4798      	blx	r3
 8002cdc:	e773      	b.n	8002bc6 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0xda>
 8002cde:	6830      	ldr	r0, [r6, #0]
 8002ce0:	4912      	ldr	r1, [pc, #72]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4798      	blx	r3
 8002ce8:	e75d      	b.n	8002ba6 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0xba>
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	490f      	ldr	r1, [pc, #60]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002cee:	6803      	ldr	r3, [r0, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4798      	blx	r3
 8002cf4:	e747      	b.n	8002b86 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x9a>

		ALWAYS_INLINE IOStream&
		operator << (const int32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x220>)
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	47a8      	blx	r5
 8002cfc:	e738      	b.n	8002b70 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x84>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002cfe:	6830      	ldr	r0, [r6, #0]
 8002d00:	490a      	ldr	r1, [pc, #40]	; (8002d2c <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x240>)
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4798      	blx	r3
 8002d08:	e719      	b.n	8002b3e <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x52>
 8002d0a:	bf00      	nop
 8002d0c:	200013d0 	.word	0x200013d0
 8002d10:	080079ed 	.word	0x080079ed
 8002d14:	080079a9 	.word	0x080079a9
 8002d18:	08009400 	.word	0x08009400
 8002d1c:	08007af5 	.word	0x08007af5
 8002d20:	08007ac1 	.word	0x08007ac1
 8002d24:	20000680 	.word	0x20000680
 8002d28:	080078f9 	.word	0x080078f9
 8002d2c:	080098f4 	.word	0x080098f4
 8002d30:	08000e89 	.word	0x08000e89
 8002d34:	20000678 	.word	0x20000678
 8002d38:	2000067c 	.word	0x2000067c
 8002d3c:	20000714 	.word	0x20000714
 8002d40:	20000718 	.word	0x20000718
 8002d44:	08009418 	.word	0x08009418
 8002d48:	20000688 	.word	0x20000688
 8002d4c:	08009438 	.word	0x08009438
 8002d50:	20000689 	.word	0x20000689
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8002d54:	4f07      	ldr	r7, [pc, #28]	; (8002d74 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x288>)
 8002d56:	4808      	ldr	r0, [pc, #32]	; (8002d78 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x28c>)
 8002d58:	0e31      	lsrs	r1, r6, #24
 8002d5a:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 8002d5c:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8002d60:	4805      	ldr	r0, [pc, #20]	; (8002d78 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x28c>)
 8002d62:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 8002d64:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002d68:	4803      	ldr	r0, [pc, #12]	; (8002d78 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x28c>)
 8002d6a:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x28c>)
 8002d6e:	b2f1      	uxtb	r1, r6
 8002d70:	47b8      	blx	r7
 8002d72:	e6fd      	b.n	8002b70 <_ZN8Handlers17getControlOutputsIL4Axis0EEEbPKci+0x84>
 8002d74:	08007af5 	.word	0x08007af5
 8002d78:	200013d0 	.word	0x200013d0

08002d7c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci>:
	Trigger::setThreshold(threshold);
	return true;
}

template<Axis axis>
static bool getControlOutputs(const char* cmd, int length){
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002d7e:	4c87      	ldr	r4, [pc, #540]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80b8 	beq.w	8002ef8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x17c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002d88:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	bf0c      	ite	eq
 8002d8e:	4b84      	ldreq	r3, [pc, #528]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002d90:	4b84      	ldrne	r3, [pc, #528]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8002d92:	4985      	ldr	r1, [pc, #532]	; (8002fa8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x22c>)
			}
			else {
				this->writeHex(s);
 8002d94:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	4880      	ldr	r0, [pc, #512]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b6 	beq.w	8002f0c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x190>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002da0:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002da2:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002da4:	bf0c      	ite	eq
 8002da6:	4b81      	ldreq	r3, [pc, #516]	; (8002fac <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002da8:	4b81      	ldrne	r3, [pc, #516]	; (8002fb0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x234>)
 8002daa:	4798      	blx	r3
	static inline int getShallPosition(){ return pos_shall; }
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x238>)
	(void) cmd;
	(void) length;
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
 8002dae:	4e7b      	ldr	r6, [pc, #492]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002db0:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002db2:	4d81      	ldr	r5, [pc, #516]	; (8002fb8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x23c>)
 8002db4:	4630      	mov	r0, r6
 8002db6:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002db8:	6863      	ldr	r3, [r4, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80e7 	beq.w	8002f8e <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x212>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002dc0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	497d      	ldr	r1, [pc, #500]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002dc6:	bf0c      	ite	eq
 8002dc8:	4b75      	ldreq	r3, [pc, #468]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002dca:	4b76      	ldrne	r3, [pc, #472]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002dcc:	4798      	blx	r3
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x244>)
 8002dd0:	4798      	blx	r3
		}

		ALWAYS_INLINE IOStream&
		operator << (const int32_t& v)
		{
			if (this->mode == Mode::Ascii) {
 8002dd2:	6863      	ldr	r3, [r4, #4]
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80d5 	beq.w	8002f86 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x20a>
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f000 8101 	beq.w	8002fe4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x268>
				this->writeBin(static_cast<uint8_t>(v >> 16));
				this->writeBin(static_cast<uint8_t>(v >> 8));
				this->writeBin(static_cast<uint8_t>(v & 0xff));
			}
			else {
				this->writeHex(static_cast<uint8_t>(v >> 24));
 8002de2:	4f73      	ldr	r7, [pc, #460]	; (8002fb0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x234>)
 8002de4:	486d      	ldr	r0, [pc, #436]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002de6:	0e31      	lsrs	r1, r6, #24
 8002de8:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 16));
 8002dea:	486c      	ldr	r0, [pc, #432]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002dec:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8002df0:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v >> 8));
 8002df2:	486a      	ldr	r0, [pc, #424]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002df4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002df8:	47b8      	blx	r7
				this->writeHex(static_cast<uint8_t>(v & 0xff));
 8002dfa:	4868      	ldr	r0, [pc, #416]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002dfc:	b2f1      	uxtb	r1, r6
 8002dfe:	47b8      	blx	r7
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002e00:	6863      	ldr	r3, [r4, #4]
 8002e02:	4866      	ldr	r0, [pc, #408]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80b8 	beq.w	8002f7a <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1fe>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002e0a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002e0c:	496b      	ldr	r1, [pc, #428]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002e0e:	bf0c      	ite	eq
 8002e10:	4b63      	ldreq	r3, [pc, #396]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002e12:	4b64      	ldrne	r3, [pc, #400]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002e14:	4798      	blx	r3
	 */
	static void setShallSpeed(double speed);
	static int getSpeedErrorSum();
	static int getPositionErrorSum();
	static int32_t getIsPosition();
	static inline int getShallSpeed(){ return v_shall; }
 8002e16:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x248>)
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8002e18:	4e60      	ldr	r6, [pc, #384]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e1a:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002e20:	6863      	ldr	r3, [r4, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80a3 	beq.w	8002f6e <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1f2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002e28:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	4963      	ldr	r1, [pc, #396]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002e2e:	bf0c      	ite	eq
 8002e30:	4b5b      	ldreq	r3, [pc, #364]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002e32:	4b5c      	ldrne	r3, [pc, #368]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002e34:	4798      	blx	r3
	static inline int getIsSpeed(){ return v_is; }
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x24c>)
 8002e38:	4e58      	ldr	r6, [pc, #352]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e3a:	6819      	ldr	r1, [r3, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002e40:	6863      	ldr	r3, [r4, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 808d 	beq.w	8002f62 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1e6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002e48:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	495b      	ldr	r1, [pc, #364]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002e4e:	bf0c      	ite	eq
 8002e50:	4b53      	ldreq	r3, [pc, #332]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002e52:	4b54      	ldrne	r3, [pc, #336]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002e54:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x250>)
 8002e58:	4e50      	ldr	r6, [pc, #320]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d077      	beq.n	8002f56 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1da>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002e66:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002e68:	4630      	mov	r0, r6
 8002e6a:	4954      	ldr	r1, [pc, #336]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002e6c:	bf0c      	ite	eq
 8002e6e:	4b4c      	ldreq	r3, [pc, #304]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002e70:	4b4c      	ldrne	r3, [pc, #304]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002e72:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002e74:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x254>)
 8002e76:	4e49      	ldr	r6, [pc, #292]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002e7e:	6863      	ldr	r3, [r4, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d062      	beq.n	8002f4a <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1ce>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002e84:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002e86:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002e88:	4630      	mov	r0, r6
 8002e8a:	bf0c      	ite	eq
 8002e8c:	4b47      	ldreq	r3, [pc, #284]	; (8002fac <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002e8e:	4b48      	ldrne	r3, [pc, #288]	; (8002fb0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x234>)
 8002e90:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002e92:	6863      	ldr	r3, [r4, #4]
 8002e94:	4841      	ldr	r0, [pc, #260]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d051      	beq.n	8002f3e <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1c2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002e9a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x258>)
 8002e9e:	bf0c      	ite	eq
 8002ea0:	4b3f      	ldreq	r3, [pc, #252]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002ea2:	4b40      	ldrne	r3, [pc, #256]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002ea4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	483c      	ldr	r0, [pc, #240]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d041      	beq.n	8002f32 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1b6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002eae:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002eb0:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002eb2:	bf0c      	ite	eq
 8002eb4:	4b3d      	ldreq	r3, [pc, #244]	; (8002fac <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002eb6:	4b3e      	ldrne	r3, [pc, #248]	; (8002fb0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x234>)
 8002eb8:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x25c>)
 8002ebc:	4e37      	ldr	r6, [pc, #220]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002ebe:	7819      	ldrb	r1, [r3, #0]
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8002ec4:	6863      	ldr	r3, [r4, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02d      	beq.n	8002f26 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x1aa>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8002eca:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8002ecc:	4630      	mov	r0, r6
 8002ece:	4943      	ldr	r1, [pc, #268]	; (8002fdc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x260>)
 8002ed0:	bf0c      	ite	eq
 8002ed2:	4b33      	ldreq	r3, [pc, #204]	; (8002fa0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x224>)
			}
			else {
				this->writeHex(s);
 8002ed4:	4b33      	ldrne	r3, [pc, #204]	; (8002fa4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x228>)
 8002ed6:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x264>)
 8002eda:	4e30      	ldr	r6, [pc, #192]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002edc:	7819      	ldrb	r1, [r3, #0]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	b1c3      	cbz	r3, 8002f18 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x19c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8002ee6:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8002ee8:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8002eea:	4630      	mov	r0, r6
 8002eec:	bf0c      	ite	eq
 8002eee:	4b2f      	ldreq	r3, [pc, #188]	; (8002fac <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x230>)
			}
			else {
				this->writeHex(v);
 8002ef0:	4b2f      	ldrne	r3, [pc, #188]	; (8002fb0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x234>)
 8002ef2:	4798      	blx	r3
	return false;
}
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x22c>)
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8002f02:	6863      	ldr	r3, [r4, #4]
 8002f04:	4825      	ldr	r0, [pc, #148]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f47f af4a 	bne.w	8002da0 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x24>
				this->device->write(v);
 8002f0c:	6800      	ldr	r0, [r0, #0]
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	210a      	movs	r1, #10
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4798      	blx	r3
 8002f16:	e749      	b.n	8002dac <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x30>
 8002f18:	6830      	ldr	r0, [r6, #0]
 8002f1a:	6803      	ldr	r3, [r0, #0]
 8002f1c:	210a      	movs	r1, #10
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4798      	blx	r3
 8002f22:	2000      	movs	r0, #0
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002f26:	6830      	ldr	r0, [r6, #0]
 8002f28:	492c      	ldr	r1, [pc, #176]	; (8002fdc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x260>)
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4798      	blx	r3
 8002f30:	e7d2      	b.n	8002ed8 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x15c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8002f32:	6800      	ldr	r0, [r0, #0]
 8002f34:	6803      	ldr	r3, [r0, #0]
 8002f36:	210a      	movs	r1, #10
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4798      	blx	r3
 8002f3c:	e7bd      	b.n	8002eba <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x13e>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	4924      	ldr	r1, [pc, #144]	; (8002fd4 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x258>)
 8002f42:	6803      	ldr	r3, [r0, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4798      	blx	r3
 8002f48:	e7ad      	b.n	8002ea6 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x12a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8002f4a:	6830      	ldr	r0, [r6, #0]
 8002f4c:	6803      	ldr	r3, [r0, #0]
 8002f4e:	210a      	movs	r1, #10
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4798      	blx	r3
 8002f54:	e79d      	b.n	8002e92 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x116>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002f56:	6830      	ldr	r0, [r6, #0]
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4798      	blx	r3
 8002f60:	e788      	b.n	8002e74 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0xf8>
 8002f62:	6830      	ldr	r0, [r6, #0]
 8002f64:	4915      	ldr	r1, [pc, #84]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002f66:	6803      	ldr	r3, [r0, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4798      	blx	r3
 8002f6c:	e773      	b.n	8002e56 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0xda>
 8002f6e:	6830      	ldr	r0, [r6, #0]
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002f72:	6803      	ldr	r3, [r0, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4798      	blx	r3
 8002f78:	e75d      	b.n	8002e36 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0xba>
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	490f      	ldr	r1, [pc, #60]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002f7e:	6803      	ldr	r3, [r0, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4798      	blx	r3
 8002f84:	e747      	b.n	8002e16 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x9a>

		ALWAYS_INLINE IOStream&
		operator << (const int32_t& v)
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x220>)
 8002f88:	4631      	mov	r1, r6
 8002f8a:	47a8      	blx	r5
 8002f8c:	e738      	b.n	8002e00 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x84>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8002f8e:	6830      	ldr	r0, [r6, #0]
 8002f90:	490a      	ldr	r1, [pc, #40]	; (8002fbc <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x240>)
 8002f92:	6803      	ldr	r3, [r0, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4798      	blx	r3
 8002f98:	e719      	b.n	8002dce <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x52>
 8002f9a:	bf00      	nop
 8002f9c:	200013d0 	.word	0x200013d0
 8002fa0:	080079ed 	.word	0x080079ed
 8002fa4:	080079a9 	.word	0x080079a9
 8002fa8:	08009400 	.word	0x08009400
 8002fac:	08007af5 	.word	0x08007af5
 8002fb0:	08007ac1 	.word	0x08007ac1
 8002fb4:	20000674 	.word	0x20000674
 8002fb8:	080078f9 	.word	0x080078f9
 8002fbc:	080098f4 	.word	0x080098f4
 8002fc0:	08000e81 	.word	0x08000e81
 8002fc4:	2000066c 	.word	0x2000066c
 8002fc8:	20000670 	.word	0x20000670
 8002fcc:	2000071c 	.word	0x2000071c
 8002fd0:	20000720 	.word	0x20000720
 8002fd4:	08009418 	.word	0x08009418
 8002fd8:	200006d0 	.word	0x200006d0
 8002fdc:	08009438 	.word	0x08009438
 8002fe0:	200006d1 	.word	0x200006d1
		{
			if (this->mode == Mode::Ascii) {
				this->writeInteger(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(static_cast<uint8_t>(v >> 24));
 8002fe4:	4f07      	ldr	r7, [pc, #28]	; (8003004 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x288>)
 8002fe6:	4808      	ldr	r0, [pc, #32]	; (8003008 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x28c>)
 8002fe8:	0e31      	lsrs	r1, r6, #24
 8002fea:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 16));
 8002fec:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x28c>)
 8002ff2:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v >> 8));
 8002ff4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x28c>)
 8002ffa:	47b8      	blx	r7
				this->writeBin(static_cast<uint8_t>(v & 0xff));
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x28c>)
 8002ffe:	b2f1      	uxtb	r1, r6
 8003000:	47b8      	blx	r7
 8003002:	e6fd      	b.n	8002e00 <_ZN8Handlers17getControlOutputsIL4Axis2EEEbPKci+0x84>
 8003004:	08007af5 	.word	0x08007af5
 8003008:	200013d0 	.word	0x200013d0

0800300c <_ZN8Handlers19getPushButtonStatesEPKci>:
	(void) length;
	Pattern::done();
	return true;
}

static bool getPushButtonStates(const char* cmd, int length){
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800300e:	4c6b      	ldr	r4, [pc, #428]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8094 	beq.w	8003140 <_ZN8Handlers19getPushButtonStatesEPKci+0x134>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003018:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800301a:	4620      	mov	r0, r4
 800301c:	4968      	ldr	r1, [pc, #416]	; (80031c0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b4>)
 800301e:	bf0c      	ite	eq
 8003020:	4b68      	ldreq	r3, [pc, #416]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 8003022:	4b69      	ldrne	r3, [pc, #420]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 8003024:	4798      	blx	r3
private:
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
 8003026:	4b69      	ldr	r3, [pc, #420]	; (80031cc <_ZN8Handlers19getPushButtonStatesEPKci+0x1c0>)
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8003028:	4e64      	ldr	r6, [pc, #400]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 800302a:	6919      	ldr	r1, [r3, #16]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800302c:	4d68      	ldr	r5, [pc, #416]	; (80031d0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c4>)
 800302e:	4630      	mov	r0, r6
 8003030:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 8003034:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80b8 	beq.w	80031ae <_ZN8Handlers19getPushButtonStatesEPKci+0x1a2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800303e:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003040:	4630      	mov	r0, r6
 8003042:	4964      	ldr	r1, [pc, #400]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 8003044:	bf0c      	ite	eq
 8003046:	4b5f      	ldreq	r3, [pc, #380]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 8003048:	4b5f      	ldrne	r3, [pc, #380]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 800304a:	4798      	blx	r3
	GPIO__INPUT(XEND, E, 7);
 800304c:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <_ZN8Handlers19getPushButtonStatesEPKci+0x1c0>)
 800304e:	4e5b      	ldr	r6, [pc, #364]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 8003050:	6919      	ldr	r1, [r3, #16]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003052:	4630      	mov	r0, r6
 8003054:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8003058:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800305a:	6863      	ldr	r3, [r4, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a0 	beq.w	80031a2 <_ZN8Handlers19getPushButtonStatesEPKci+0x196>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003062:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003064:	4630      	mov	r0, r6
 8003066:	495c      	ldr	r1, [pc, #368]	; (80031d8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1cc>)
 8003068:	bf0c      	ite	eq
 800306a:	4b56      	ldreq	r3, [pc, #344]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 800306c:	4b56      	ldrne	r3, [pc, #344]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 800306e:	4798      	blx	r3
	GPIO__INPUT(YFRONT, D, 8);
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <_ZN8Handlers19getPushButtonStatesEPKci+0x1d0>)
 8003072:	4e52      	ldr	r6, [pc, #328]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 8003074:	6919      	ldr	r1, [r3, #16]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003076:	4630      	mov	r0, r6
 8003078:	f3c1 2100 	ubfx	r1, r1, #8, #1
 800307c:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8088 	beq.w	8003196 <_ZN8Handlers19getPushButtonStatesEPKci+0x18a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003086:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003088:	4630      	mov	r0, r6
 800308a:	4952      	ldr	r1, [pc, #328]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 800308c:	bf0c      	ite	eq
 800308e:	4b4d      	ldreq	r3, [pc, #308]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 8003090:	4b4d      	ldrne	r3, [pc, #308]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 8003092:	4798      	blx	r3
	GPIO__INPUT(YEND, D, 9);
 8003094:	4b51      	ldr	r3, [pc, #324]	; (80031dc <_ZN8Handlers19getPushButtonStatesEPKci+0x1d0>)
 8003096:	4e49      	ldr	r6, [pc, #292]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 8003098:	6919      	ldr	r1, [r3, #16]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800309a:	4630      	mov	r0, r6
 800309c:	f3c1 2140 	ubfx	r1, r1, #9, #1
 80030a0:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d070      	beq.n	800318a <_ZN8Handlers19getPushButtonStatesEPKci+0x17e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80030a8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80030aa:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80030ac:	4630      	mov	r0, r6
 80030ae:	bf0c      	ite	eq
 80030b0:	4b4b      	ldreq	r3, [pc, #300]	; (80031e0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1d4>)
			}
			else {
				this->writeHex(v);
 80030b2:	4b4c      	ldrne	r3, [pc, #304]	; (80031e4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1d8>)
 80030b4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80030b6:	6863      	ldr	r3, [r4, #4]
 80030b8:	4840      	ldr	r0, [pc, #256]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d05f      	beq.n	800317e <_ZN8Handlers19getPushButtonStatesEPKci+0x172>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80030be:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80030c0:	4949      	ldr	r1, [pc, #292]	; (80031e8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1dc>)
 80030c2:	bf0c      	ite	eq
 80030c4:	4b3f      	ldreq	r3, [pc, #252]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 80030c6:	4b40      	ldrne	r3, [pc, #256]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 80030c8:	4798      	blx	r3

public:
	static bool init();

	static bool isAtFront(){
		return triggered[0];
 80030ca:	4e48      	ldr	r6, [pc, #288]	; (80031ec <_ZN8Handlers19getPushButtonStatesEPKci+0x1e0>)
 80030cc:	4f3b      	ldr	r7, [pc, #236]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 80030ce:	7831      	ldrb	r1, [r6, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80030d0:	4638      	mov	r0, r7
 80030d2:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80030d4:	6863      	ldr	r3, [r4, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04b      	beq.n	8003172 <_ZN8Handlers19getPushButtonStatesEPKci+0x166>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80030da:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80030dc:	4638      	mov	r0, r7
 80030de:	493d      	ldr	r1, [pc, #244]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 80030e0:	bf0c      	ite	eq
 80030e2:	4b38      	ldreq	r3, [pc, #224]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 80030e4:	4b38      	ldrne	r3, [pc, #224]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 80030e6:	4798      	blx	r3
	}

	static bool isAtEnd(){
		return triggered[1];
 80030e8:	7871      	ldrb	r1, [r6, #1]
 80030ea:	4e34      	ldr	r6, [pc, #208]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80030ec:	4630      	mov	r0, r6
 80030ee:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80030f0:	6863      	ldr	r3, [r4, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d037      	beq.n	8003166 <_ZN8Handlers19getPushButtonStatesEPKci+0x15a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80030f6:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80030f8:	4630      	mov	r0, r6
 80030fa:	4937      	ldr	r1, [pc, #220]	; (80031d8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1cc>)
 80030fc:	bf0c      	ite	eq
 80030fe:	4b31      	ldreq	r3, [pc, #196]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 8003100:	4b31      	ldrne	r3, [pc, #196]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 8003102:	4798      	blx	r3

public:
	static bool init();

	static bool isAtFront(){
		return triggered[0];
 8003104:	4e3a      	ldr	r6, [pc, #232]	; (80031f0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1e4>)
 8003106:	4f2d      	ldr	r7, [pc, #180]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
 8003108:	7831      	ldrb	r1, [r6, #0]
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800310a:	4638      	mov	r0, r7
 800310c:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800310e:	6863      	ldr	r3, [r4, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d022      	beq.n	800315a <_ZN8Handlers19getPushButtonStatesEPKci+0x14e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003114:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003116:	4638      	mov	r0, r7
 8003118:	492e      	ldr	r1, [pc, #184]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 800311a:	bf0c      	ite	eq
 800311c:	4b29      	ldreq	r3, [pc, #164]	; (80031c4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b8>)
			}
			else {
				this->writeHex(s);
 800311e:	4b2a      	ldrne	r3, [pc, #168]	; (80031c8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1bc>)
 8003120:	4798      	blx	r3
	}

	static bool isAtEnd(){
		return triggered[1];
 8003122:	7871      	ldrb	r1, [r6, #1]
 8003124:	4e25      	ldr	r6, [pc, #148]	; (80031bc <_ZN8Handlers19getPushButtonStatesEPKci+0x1b0>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003126:	4630      	mov	r0, r6
 8003128:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800312a:	6863      	ldr	r3, [r4, #4]
 800312c:	b173      	cbz	r3, 800314c <_ZN8Handlers19getPushButtonStatesEPKci+0x140>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800312e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003130:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003132:	4630      	mov	r0, r6
 8003134:	bf0c      	ite	eq
 8003136:	4b2a      	ldreq	r3, [pc, #168]	; (80031e0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1d4>)
			}
			else {
				this->writeHex(v);
 8003138:	4b2a      	ldrne	r3, [pc, #168]	; (80031e4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1d8>)
 800313a:	4798      	blx	r3
	iout << "real states: " << HallSensor<X>::getFrontState() << "-" << HallSensor<X>::getEndState();
	iout << " :: " << HallSensor<Y>::getFrontState() << "-" << HallSensor<Y>::getEndState() << endl;
	iout << "buffered states: " << HallSensor<X>::isAtFront() << "-" << HallSensor<X>::isAtEnd();
	iout << " :: " << HallSensor<Y>::isAtFront() << "-" << HallSensor<Y>::isAtEnd() << endl;
	return false;
}
 800313c:	2000      	movs	r0, #0
 800313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	491f      	ldr	r1, [pc, #124]	; (80031c0 <_ZN8Handlers19getPushButtonStatesEPKci+0x1b4>)
 8003144:	6803      	ldr	r3, [r0, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4798      	blx	r3
 800314a:	e76c      	b.n	8003026 <_ZN8Handlers19getPushButtonStatesEPKci+0x1a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800314c:	6830      	ldr	r0, [r6, #0]
 800314e:	6803      	ldr	r3, [r0, #0]
 8003150:	210a      	movs	r1, #10
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4798      	blx	r3
 8003156:	2000      	movs	r0, #0
 8003158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	491d      	ldr	r1, [pc, #116]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 800315e:	6803      	ldr	r3, [r0, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4798      	blx	r3
 8003164:	e7dd      	b.n	8003122 <_ZN8Handlers19getPushButtonStatesEPKci+0x116>
 8003166:	6830      	ldr	r0, [r6, #0]
 8003168:	491b      	ldr	r1, [pc, #108]	; (80031d8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1cc>)
 800316a:	6803      	ldr	r3, [r0, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4798      	blx	r3
 8003170:	e7c8      	b.n	8003104 <_ZN8Handlers19getPushButtonStatesEPKci+0xf8>
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	4917      	ldr	r1, [pc, #92]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 8003176:	6803      	ldr	r3, [r0, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4798      	blx	r3
 800317c:	e7b4      	b.n	80030e8 <_ZN8Handlers19getPushButtonStatesEPKci+0xdc>
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	4919      	ldr	r1, [pc, #100]	; (80031e8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1dc>)
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4798      	blx	r3
 8003188:	e79f      	b.n	80030ca <_ZN8Handlers19getPushButtonStatesEPKci+0xbe>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800318a:	6830      	ldr	r0, [r6, #0]
 800318c:	6803      	ldr	r3, [r0, #0]
 800318e:	210a      	movs	r1, #10
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4798      	blx	r3
 8003194:	e78f      	b.n	80030b6 <_ZN8Handlers19getPushButtonStatesEPKci+0xaa>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003196:	6830      	ldr	r0, [r6, #0]
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4798      	blx	r3
 80031a0:	e778      	b.n	8003094 <_ZN8Handlers19getPushButtonStatesEPKci+0x88>
 80031a2:	6830      	ldr	r0, [r6, #0]
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <_ZN8Handlers19getPushButtonStatesEPKci+0x1cc>)
 80031a6:	6803      	ldr	r3, [r0, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	4798      	blx	r3
 80031ac:	e760      	b.n	8003070 <_ZN8Handlers19getPushButtonStatesEPKci+0x64>
 80031ae:	6830      	ldr	r0, [r6, #0]
 80031b0:	4908      	ldr	r1, [pc, #32]	; (80031d4 <_ZN8Handlers19getPushButtonStatesEPKci+0x1c8>)
 80031b2:	6803      	ldr	r3, [r0, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4798      	blx	r3
 80031b8:	e748      	b.n	800304c <_ZN8Handlers19getPushButtonStatesEPKci+0x40>
 80031ba:	bf00      	nop
 80031bc:	200013d0 	.word	0x200013d0
 80031c0:	0800943c 	.word	0x0800943c
 80031c4:	080079ed 	.word	0x080079ed
 80031c8:	080079a9 	.word	0x080079a9
 80031cc:	40021000 	.word	0x40021000
 80031d0:	080078f9 	.word	0x080078f9
 80031d4:	0800944c 	.word	0x0800944c
 80031d8:	08009450 	.word	0x08009450
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	08007af5 	.word	0x08007af5
 80031e4:	08007ac1 	.word	0x08007ac1
 80031e8:	08009458 	.word	0x08009458
 80031ec:	200008e0 	.word	0x200008e0
 80031f0:	200008dc 	.word	0x200008dc

080031f4 <_ZN8Handlers18stopPatternHandlerEPKci>:
	}
	static void done(){
		running = 0;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <_ZN8Handlers18stopPatternHandlerEPKci+0x58>)
	(void) length;
	Pattern::resume();
	return true;
}

static bool stopPatternHandler(const char* cmd, int length){
 80031f6:	b510      	push	{r4, lr}
 80031f8:	2200      	movs	r2, #0
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80031fa:	4c15      	ldr	r4, [pc, #84]	; (8003250 <_ZN8Handlers18stopPatternHandlerEPKci+0x5c>)
 80031fc:	701a      	strb	r2, [r3, #0]
		State::set(State::READY);
 80031fe:	2001      	movs	r0, #1
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <_ZN8Handlers18stopPatternHandlerEPKci+0x60>)
 8003202:	4798      	blx	r3
 8003204:	6863      	ldr	r3, [r4, #4]
 8003206:	b18b      	cbz	r3, 800322c <_ZN8Handlers18stopPatternHandlerEPKci+0x38>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003208:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800320a:	4620      	mov	r0, r4
 800320c:	bf0c      	ite	eq
 800320e:	4b12      	ldreq	r3, [pc, #72]	; (8003258 <_ZN8Handlers18stopPatternHandlerEPKci+0x64>)
			}
			else {
				this->writeHex(s);
 8003210:	4b12      	ldrne	r3, [pc, #72]	; (800325c <_ZN8Handlers18stopPatternHandlerEPKci+0x68>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8003212:	4913      	ldr	r1, [pc, #76]	; (8003260 <_ZN8Handlers18stopPatternHandlerEPKci+0x6c>)
			}
			else {
				this->writeHex(s);
 8003214:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <_ZN8Handlers18stopPatternHandlerEPKci+0x5c>)
 800321a:	b183      	cbz	r3, 800323e <_ZN8Handlers18stopPatternHandlerEPKci+0x4a>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800321c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800321e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003220:	bf0c      	ite	eq
 8003222:	4b10      	ldreq	r3, [pc, #64]	; (8003264 <_ZN8Handlers18stopPatternHandlerEPKci+0x70>)
			}
			else {
				this->writeHex(v);
 8003224:	4b10      	ldrne	r3, [pc, #64]	; (8003268 <_ZN8Handlers18stopPatternHandlerEPKci+0x74>)
 8003226:	4798      	blx	r3
	(void) cmd;
	(void) length;
	Pattern::done();
	return true;
}
 8003228:	2001      	movs	r0, #1
 800322a:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	490c      	ldr	r1, [pc, #48]	; (8003260 <_ZN8Handlers18stopPatternHandlerEPKci+0x6c>)
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003236:	6863      	ldr	r3, [r4, #4]
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <_ZN8Handlers18stopPatternHandlerEPKci+0x5c>)
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ee      	bne.n	800321c <_ZN8Handlers18stopPatternHandlerEPKci+0x28>
				this->device->write(v);
 800323e:	6800      	ldr	r0, [r0, #0]
 8003240:	6803      	ldr	r3, [r0, #0]
 8003242:	210a      	movs	r1, #10
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4798      	blx	r3
 8003248:	2001      	movs	r0, #1
 800324a:	bd10      	pop	{r4, pc}
 800324c:	200008d0 	.word	0x200008d0
 8003250:	200013bc 	.word	0x200013bc
 8003254:	080067d5 	.word	0x080067d5
 8003258:	080079ed 	.word	0x080079ed
 800325c:	080079a9 	.word	0x080079a9
 8003260:	0800928c 	.word	0x0800928c
 8003264:	08007af5 	.word	0x08007af5
 8003268:	08007ac1 	.word	0x08007ac1

0800326c <_ZN8Handlers19setTriggerThresholdEPKci>:
	commandOut << cmd << endl;
	return false;
}

static bool setTriggerThreshold(const char* cmd, int length){
	float param = atof2(cmd, length, 0);
 800326c:	2200      	movs	r2, #0
	}
	commandOut << cmd << endl;
	return false;
}

static bool setTriggerThreshold(const char* cmd, int length){
 800326e:	b510      	push	{r4, lr}
	float param = atof2(cmd, length, 0);
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <_ZN8Handlers19setTriggerThresholdEPKci+0x78>)
 8003272:	4798      	blx	r3
 8003274:	ee07 0a90 	vmov	s15, r0
	if(param == 0){
 8003278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d00d      	beq.n	800329e <_ZN8Handlers19setTriggerThresholdEPKci+0x32>
	}
	static float encoderToMM(int encoder){
		return float(encoder)/float(MOTOR_ENC_PER_REV*MOTOR_GEAR_RATIO);
	}
	static int mumToEncoder(float mum){
		return int(mum*2 + 0.5f);
 8003282:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800328a:	ee77 7a87 	vadd.f32	s15, s15, s14
		iout << "invalid argument for trigger threshold" << endl;
		return false;
	}
	int threshold = Transform::mumToEncoder(param);
	Trigger::setThreshold(threshold);
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <_ZN8Handlers19setTriggerThresholdEPKci+0x7c>)
 8003290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003294:	ee17 0a90 	vmov	r0, s15
 8003298:	4798      	blx	r3
	return true;
 800329a:	2001      	movs	r0, #1
}
 800329c:	bd10      	pop	{r4, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800329e:	4c13      	ldr	r4, [pc, #76]	; (80032ec <_ZN8Handlers19setTriggerThresholdEPKci+0x80>)
 80032a0:	6863      	ldr	r3, [r4, #4]
 80032a2:	b18b      	cbz	r3, 80032c8 <_ZN8Handlers19setTriggerThresholdEPKci+0x5c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80032a4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80032a6:	4620      	mov	r0, r4
 80032a8:	4911      	ldr	r1, [pc, #68]	; (80032f0 <_ZN8Handlers19setTriggerThresholdEPKci+0x84>)
 80032aa:	bf0c      	ite	eq
 80032ac:	4b11      	ldreq	r3, [pc, #68]	; (80032f4 <_ZN8Handlers19setTriggerThresholdEPKci+0x88>)
			}
			else {
				this->writeHex(s);
 80032ae:	4b12      	ldrne	r3, [pc, #72]	; (80032f8 <_ZN8Handlers19setTriggerThresholdEPKci+0x8c>)
 80032b0:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80032b2:	6864      	ldr	r4, [r4, #4]
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <_ZN8Handlers19setTriggerThresholdEPKci+0x80>)
 80032b6:	b16c      	cbz	r4, 80032d4 <_ZN8Handlers19setTriggerThresholdEPKci+0x68>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80032b8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80032ba:	2c02      	cmp	r4, #2
				this->writeBin(v);
 80032bc:	bf0c      	ite	eq
 80032be:	4b0f      	ldreq	r3, [pc, #60]	; (80032fc <_ZN8Handlers19setTriggerThresholdEPKci+0x90>)
			}
			else {
				this->writeHex(v);
 80032c0:	4b0f      	ldrne	r3, [pc, #60]	; (8003300 <_ZN8Handlers19setTriggerThresholdEPKci+0x94>)
 80032c2:	4798      	blx	r3
 80032c4:	2000      	movs	r0, #0
 80032c6:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	4909      	ldr	r1, [pc, #36]	; (80032f0 <_ZN8Handlers19setTriggerThresholdEPKci+0x84>)
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4798      	blx	r3
 80032d2:	e7ee      	b.n	80032b2 <_ZN8Handlers19setTriggerThresholdEPKci+0x46>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80032d4:	6800      	ldr	r0, [r0, #0]
 80032d6:	6803      	ldr	r3, [r0, #0]
 80032d8:	210a      	movs	r1, #10
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4798      	blx	r3
 80032de:	4620      	mov	r0, r4
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	08000791 	.word	0x08000791
 80032e8:	08000491 	.word	0x08000491
 80032ec:	200013d0 	.word	0x200013d0
 80032f0:	0800946c 	.word	0x0800946c
 80032f4:	080079ed 	.word	0x080079ed
 80032f8:	080079a9 	.word	0x080079a9
 80032fc:	08007af5 	.word	0x08007af5
 8003300:	08007ac1 	.word	0x08007ac1

08003304 <_ZN8Handlers20enableSystickHandlerEPKci>:
}

static bool enableSystickHandler(const char* cmd, int length){
	(void) cmd;
	(void) length;
	bool enable = atoi2(cmd, 1, 1);
 8003304:	2101      	movs	r1, #1
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
	return true;
}

static bool enableSystickHandler(const char* cmd, int length){
 8003306:	b570      	push	{r4, r5, r6, lr}
	(void) cmd;
	(void) length;
	bool enable = atoi2(cmd, 1, 1);
 8003308:	460a      	mov	r2, r1
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <_ZN8Handlers20enableSystickHandlerEPKci+0x70>)
 800330c:	4798      	blx	r3
 800330e:	1c05      	adds	r5, r0, #0
 8003310:	bf18      	it	ne
 8003312:	2501      	movne	r5, #1
	if(enable){
 8003314:	b9dd      	cbnz	r5, 800334e <_ZN8Handlers20enableSystickHandlerEPKci+0x4a>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003316:	4c18      	ldr	r4, [pc, #96]	; (8003378 <_ZN8Handlers20enableSystickHandlerEPKci+0x74>)
		Utils::enableSystick();
	}else{
		Utils::disableSystick();
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <_ZN8Handlers20enableSystickHandlerEPKci+0x78>)
 800331a:	4798      	blx	r3
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	b1e3      	cbz	r3, 800335a <_ZN8Handlers20enableSystickHandlerEPKci+0x56>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003320:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003322:	4620      	mov	r0, r4
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <_ZN8Handlers20enableSystickHandlerEPKci+0x7c>)
 8003326:	bf0c      	ite	eq
 8003328:	4b16      	ldreq	r3, [pc, #88]	; (8003384 <_ZN8Handlers20enableSystickHandlerEPKci+0x80>)
			}
			else {
				this->writeHex(s);
 800332a:	4b17      	ldrne	r3, [pc, #92]	; (8003388 <_ZN8Handlers20enableSystickHandlerEPKci+0x84>)
 800332c:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 800332e:	4e12      	ldr	r6, [pc, #72]	; (8003378 <_ZN8Handlers20enableSystickHandlerEPKci+0x74>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <_ZN8Handlers20enableSystickHandlerEPKci+0x88>)
 8003332:	4630      	mov	r0, r6
 8003334:	4629      	mov	r1, r5
 8003336:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	b1a3      	cbz	r3, 8003366 <_ZN8Handlers20enableSystickHandlerEPKci+0x62>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800333c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800333e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003340:	4630      	mov	r0, r6
 8003342:	bf0c      	ite	eq
 8003344:	4b12      	ldreq	r3, [pc, #72]	; (8003390 <_ZN8Handlers20enableSystickHandlerEPKci+0x8c>)
			}
			else {
				this->writeHex(v);
 8003346:	4b13      	ldrne	r3, [pc, #76]	; (8003394 <_ZN8Handlers20enableSystickHandlerEPKci+0x90>)
 8003348:	4798      	blx	r3
	}else{
		Utils::disableSystick();
	}
	dout << "systick enable " << enable << endl;
	return true;
}
 800334a:	2001      	movs	r0, #1
 800334c:	bd70      	pop	{r4, r5, r6, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800334e:	4c0a      	ldr	r4, [pc, #40]	; (8003378 <_ZN8Handlers20enableSystickHandlerEPKci+0x74>)
static bool enableSystickHandler(const char* cmd, int length){
	(void) cmd;
	(void) length;
	bool enable = atoi2(cmd, 1, 1);
	if(enable){
		Utils::enableSystick();
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <_ZN8Handlers20enableSystickHandlerEPKci+0x94>)
 8003352:	4798      	blx	r3
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e2      	bne.n	8003320 <_ZN8Handlers20enableSystickHandlerEPKci+0x1c>
				this->device->write(s);
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	4908      	ldr	r1, [pc, #32]	; (8003380 <_ZN8Handlers20enableSystickHandlerEPKci+0x7c>)
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4798      	blx	r3
 8003364:	e7e3      	b.n	800332e <_ZN8Handlers20enableSystickHandlerEPKci+0x2a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003366:	6830      	ldr	r0, [r6, #0]
 8003368:	6803      	ldr	r3, [r0, #0]
 800336a:	210a      	movs	r1, #10
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4798      	blx	r3
	}else{
		Utils::disableSystick();
	}
	dout << "systick enable " << enable << endl;
	return true;
}
 8003370:	2001      	movs	r0, #1
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	08000585 	.word	0x08000585
 8003378:	200013bc 	.word	0x200013bc
 800337c:	08006991 	.word	0x08006991
 8003380:	08009494 	.word	0x08009494
 8003384:	080079ed 	.word	0x080079ed
 8003388:	080079a9 	.word	0x080079a9
 800338c:	080078f9 	.word	0x080078f9
 8003390:	08007af5 	.word	0x08007af5
 8003394:	08007ac1 	.word	0x08007ac1
 8003398:	0800697d 	.word	0x0800697d

0800339c <_ZN8Handlers13getLaserErrorEPKci>:
	Trigger::enable(param);
	dout << "trigger enable " << param << endl;
	return true;
}

static bool getLaserError(const char* cmd, int length){
 800339c:	b538      	push	{r3, r4, r5, lr}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800339e:	4c14      	ldr	r4, [pc, #80]	; (80033f0 <_ZN8Handlers13getLaserErrorEPKci+0x54>)
 80033a0:	6863      	ldr	r3, [r4, #4]
 80033a2:	b1c3      	cbz	r3, 80033d6 <_ZN8Handlers13getLaserErrorEPKci+0x3a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80033a4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80033a6:	4620      	mov	r0, r4
 80033a8:	4912      	ldr	r1, [pc, #72]	; (80033f4 <_ZN8Handlers13getLaserErrorEPKci+0x58>)
 80033aa:	bf0c      	ite	eq
 80033ac:	4b12      	ldreq	r3, [pc, #72]	; (80033f8 <_ZN8Handlers13getLaserErrorEPKci+0x5c>)
			}
			else {
				this->writeHex(s);
 80033ae:	4b13      	ldrne	r3, [pc, #76]	; (80033fc <_ZN8Handlers13getLaserErrorEPKci+0x60>)
 80033b0:	4798      	blx	r3
	(void) cmd;
	(void) length;
	iout << "Laser error: " << Laser::getLastError() << endl;
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <_ZN8Handlers13getLaserErrorEPKci+0x64>)
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 80033b4:	4d0e      	ldr	r5, [pc, #56]	; (80033f0 <_ZN8Handlers13getLaserErrorEPKci+0x54>)
}

static bool getLaserError(const char* cmd, int length){
	(void) cmd;
	(void) length;
	iout << "Laser error: " << Laser::getLastError() << endl;
 80033b6:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <_ZN8Handlers13getLaserErrorEPKci+0x68>)
 80033ba:	4601      	mov	r1, r0
 80033bc:	4628      	mov	r0, r5
 80033be:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	b173      	cbz	r3, 80033e2 <_ZN8Handlers13getLaserErrorEPKci+0x46>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80033c4:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80033c6:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80033c8:	4628      	mov	r0, r5
 80033ca:	bf0c      	ite	eq
 80033cc:	4b0e      	ldreq	r3, [pc, #56]	; (8003408 <_ZN8Handlers13getLaserErrorEPKci+0x6c>)
			}
			else {
				this->writeHex(v);
 80033ce:	4b0f      	ldrne	r3, [pc, #60]	; (800340c <_ZN8Handlers13getLaserErrorEPKci+0x70>)
 80033d0:	4798      	blx	r3
	return false;
}
 80033d2:	2000      	movs	r0, #0
 80033d4:	bd38      	pop	{r3, r4, r5, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <_ZN8Handlers13getLaserErrorEPKci+0x58>)
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4798      	blx	r3
 80033e0:	e7e7      	b.n	80033b2 <_ZN8Handlers13getLaserErrorEPKci+0x16>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80033e2:	6828      	ldr	r0, [r5, #0]
 80033e4:	6803      	ldr	r3, [r0, #0]
 80033e6:	210a      	movs	r1, #10
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4798      	blx	r3
 80033ec:	2000      	movs	r0, #0
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	200013d0 	.word	0x200013d0
 80033f4:	080094a4 	.word	0x080094a4
 80033f8:	080079ed 	.word	0x080079ed
 80033fc:	080079a9 	.word	0x080079a9
 8003400:	08001ea5 	.word	0x08001ea5
 8003404:	080078f9 	.word	0x080078f9
 8003408:	08007af5 	.word	0x08007af5
 800340c:	08007ac1 	.word	0x08007ac1

08003410 <_ZN8Handlers13enableTriggerEPKci>:
	}
	dout << "systick enable " << enable << endl;
	return true;
}

static bool enableTrigger(const char* cmd, int length){
 8003410:	b570      	push	{r4, r5, r6, lr}
	(void) cmd;
	(void) length;
	bool param = atoi2(cmd, 1, 2);
 8003412:	2101      	movs	r1, #1
 8003414:	2202      	movs	r2, #2
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <_ZN8Handlers13enableTriggerEPKci+0x64>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003418:	4c17      	ldr	r4, [pc, #92]	; (8003478 <_ZN8Handlers13enableTriggerEPKci+0x68>)
 800341a:	4798      	blx	r3
 800341c:	1c05      	adds	r5, r0, #0
 800341e:	bf18      	it	ne
 8003420:	2501      	movne	r5, #1
	Trigger::enable(param);
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <_ZN8Handlers13enableTriggerEPKci+0x6c>)
 8003424:	4628      	mov	r0, r5
 8003426:	4798      	blx	r3
 8003428:	6863      	ldr	r3, [r4, #4]
 800342a:	b1b3      	cbz	r3, 800345a <_ZN8Handlers13enableTriggerEPKci+0x4a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800342c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800342e:	4620      	mov	r0, r4
 8003430:	4913      	ldr	r1, [pc, #76]	; (8003480 <_ZN8Handlers13enableTriggerEPKci+0x70>)
 8003432:	bf0c      	ite	eq
 8003434:	4b13      	ldreq	r3, [pc, #76]	; (8003484 <_ZN8Handlers13enableTriggerEPKci+0x74>)
			}
			else {
				this->writeHex(s);
 8003436:	4b14      	ldrne	r3, [pc, #80]	; (8003488 <_ZN8Handlers13enableTriggerEPKci+0x78>)
 8003438:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 800343a:	4e0f      	ldr	r6, [pc, #60]	; (8003478 <_ZN8Handlers13enableTriggerEPKci+0x68>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <_ZN8Handlers13enableTriggerEPKci+0x7c>)
 800343e:	4630      	mov	r0, r6
 8003440:	4629      	mov	r1, r5
 8003442:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	b173      	cbz	r3, 8003466 <_ZN8Handlers13enableTriggerEPKci+0x56>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003448:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800344a:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800344c:	4630      	mov	r0, r6
 800344e:	bf0c      	ite	eq
 8003450:	4b0f      	ldreq	r3, [pc, #60]	; (8003490 <_ZN8Handlers13enableTriggerEPKci+0x80>)
			}
			else {
				this->writeHex(v);
 8003452:	4b10      	ldrne	r3, [pc, #64]	; (8003494 <_ZN8Handlers13enableTriggerEPKci+0x84>)
 8003454:	4798      	blx	r3
	(void) length;
	bool param = atoi2(cmd, 1, 2);
	Trigger::enable(param);
	dout << "trigger enable " << param << endl;
	return true;
}
 8003456:	2001      	movs	r0, #1
 8003458:	bd70      	pop	{r4, r5, r6, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	4908      	ldr	r1, [pc, #32]	; (8003480 <_ZN8Handlers13enableTriggerEPKci+0x70>)
 800345e:	6803      	ldr	r3, [r0, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4798      	blx	r3
 8003464:	e7e9      	b.n	800343a <_ZN8Handlers13enableTriggerEPKci+0x2a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003466:	6830      	ldr	r0, [r6, #0]
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	210a      	movs	r1, #10
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4798      	blx	r3
 8003470:	2001      	movs	r0, #1
 8003472:	bd70      	pop	{r4, r5, r6, pc}
 8003474:	08000585 	.word	0x08000585
 8003478:	200013bc 	.word	0x200013bc
 800347c:	080004a5 	.word	0x080004a5
 8003480:	080094b4 	.word	0x080094b4
 8003484:	080079ed 	.word	0x080079ed
 8003488:	080079a9 	.word	0x080079a9
 800348c:	080078f9 	.word	0x080078f9
 8003490:	08007af5 	.word	0x08007af5
 8003494:	08007ac1 	.word	0x08007ac1

08003498 <_ZN8Handlers16execLaserCommandEPKci>:
	(void) length;
	Trigger::forceTrigger();
	return false;
}

static bool execLaserCommand(const char* cmd, int length){
 8003498:	b538      	push	{r3, r4, r5, lr}
	//TODO
	(void) length;
	const char* result = Laser::exec(cmd);
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <_ZN8Handlers16execLaserCommandEPKci+0x78>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800349c:	4c1d      	ldr	r4, [pc, #116]	; (8003514 <_ZN8Handlers16execLaserCommandEPKci+0x7c>)
 800349e:	4798      	blx	r3
 80034a0:	6863      	ldr	r3, [r4, #4]
 80034a2:	4605      	mov	r5, r0
 80034a4:	b1d3      	cbz	r3, 80034dc <_ZN8Handlers16execLaserCommandEPKci+0x44>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80034a6:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80034a8:	4620      	mov	r0, r4
 80034aa:	bf0c      	ite	eq
 80034ac:	4b1a      	ldreq	r3, [pc, #104]	; (8003518 <_ZN8Handlers16execLaserCommandEPKci+0x80>)
			}
			else {
				this->writeHex(s);
 80034ae:	4b1b      	ldrne	r3, [pc, #108]	; (800351c <_ZN8Handlers16execLaserCommandEPKci+0x84>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 80034b0:	491b      	ldr	r1, [pc, #108]	; (8003520 <_ZN8Handlers16execLaserCommandEPKci+0x88>)
			}
			else {
				this->writeHex(s);
 80034b2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	4817      	ldr	r0, [pc, #92]	; (8003514 <_ZN8Handlers16execLaserCommandEPKci+0x7c>)
 80034b8:	b1cb      	cbz	r3, 80034ee <_ZN8Handlers16execLaserCommandEPKci+0x56>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80034ba:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80034bc:	bf0c      	ite	eq
 80034be:	4b16      	ldreq	r3, [pc, #88]	; (8003518 <_ZN8Handlers16execLaserCommandEPKci+0x80>)
			}
			else {
				this->writeHex(s);
 80034c0:	4b16      	ldrne	r3, [pc, #88]	; (800351c <_ZN8Handlers16execLaserCommandEPKci+0x84>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 80034c2:	4629      	mov	r1, r5
			}
			else {
				this->writeHex(s);
 80034c4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	4812      	ldr	r0, [pc, #72]	; (8003514 <_ZN8Handlers16execLaserCommandEPKci+0x7c>)
 80034ca:	b1cb      	cbz	r3, 8003500 <_ZN8Handlers16execLaserCommandEPKci+0x68>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80034cc:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80034ce:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80034d0:	bf0c      	ite	eq
 80034d2:	4b14      	ldreq	r3, [pc, #80]	; (8003524 <_ZN8Handlers16execLaserCommandEPKci+0x8c>)
			}
			else {
				this->writeHex(v);
 80034d4:	4b14      	ldrne	r3, [pc, #80]	; (8003528 <_ZN8Handlers16execLaserCommandEPKci+0x90>)
 80034d6:	4798      	blx	r3
	iout << "EXEC: " << result << endl;
	return false;
}
 80034d8:	2000      	movs	r0, #0
 80034da:	bd38      	pop	{r3, r4, r5, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	4910      	ldr	r1, [pc, #64]	; (8003520 <_ZN8Handlers16execLaserCommandEPKci+0x88>)
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	480a      	ldr	r0, [pc, #40]	; (8003514 <_ZN8Handlers16execLaserCommandEPKci+0x7c>)
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <_ZN8Handlers16execLaserCommandEPKci+0x22>
				this->device->write(s);
 80034ee:	6800      	ldr	r0, [r0, #0]
 80034f0:	6803      	ldr	r3, [r0, #0]
 80034f2:	4629      	mov	r1, r5
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80034f8:	6863      	ldr	r3, [r4, #4]
 80034fa:	4806      	ldr	r0, [pc, #24]	; (8003514 <_ZN8Handlers16execLaserCommandEPKci+0x7c>)
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <_ZN8Handlers16execLaserCommandEPKci+0x34>
				this->device->write(v);
 8003500:	6800      	ldr	r0, [r0, #0]
 8003502:	6803      	ldr	r3, [r0, #0]
 8003504:	210a      	movs	r1, #10
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4798      	blx	r3
 800350a:	2000      	movs	r0, #0
 800350c:	bd38      	pop	{r3, r4, r5, pc}
 800350e:	bf00      	nop
 8003510:	080020fd 	.word	0x080020fd
 8003514:	200013d0 	.word	0x200013d0
 8003518:	080079ed 	.word	0x080079ed
 800351c:	080079a9 	.word	0x080079a9
 8003520:	080094c4 	.word	0x080094c4
 8003524:	08007af5 	.word	0x08007af5
 8003528:	08007ac1 	.word	0x08007ac1

0800352c <_ZN8Handlers13mirrorCommandEPKci>:

static bool mirrorCommand(const char* cmd, int length){
	//TODO
	(void) cmd;
	(void) length;
	if(length < 1){
 800352c:	2900      	cmp	r1, #0
	const char* result = Laser::exec(cmd);
	iout << "EXEC: " << result << endl;
	return false;
}

static bool mirrorCommand(const char* cmd, int length){
 800352e:	b510      	push	{r4, lr}
 8003530:	4602      	mov	r2, r0
	//TODO
	(void) cmd;
	(void) length;
	if(length < 1){
 8003532:	dd15      	ble.n	8003560 <_ZN8Handlers13mirrorCommandEPKci+0x34>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003534:	4c1b      	ldr	r4, [pc, #108]	; (80035a4 <_ZN8Handlers13mirrorCommandEPKci+0x78>)
 8003536:	6863      	ldr	r3, [r4, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d026      	beq.n	800358a <_ZN8Handlers13mirrorCommandEPKci+0x5e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800353c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800353e:	4620      	mov	r0, r4
 8003540:	4611      	mov	r1, r2
 8003542:	bf0c      	ite	eq
 8003544:	4b18      	ldreq	r3, [pc, #96]	; (80035a8 <_ZN8Handlers13mirrorCommandEPKci+0x7c>)
			}
			else {
				this->writeHex(s);
 8003546:	4b19      	ldrne	r3, [pc, #100]	; (80035ac <_ZN8Handlers13mirrorCommandEPKci+0x80>)
 8003548:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	4815      	ldr	r0, [pc, #84]	; (80035a4 <_ZN8Handlers13mirrorCommandEPKci+0x78>)
 800354e:	b1ab      	cbz	r3, 800357c <_ZN8Handlers13mirrorCommandEPKci+0x50>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003550:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003552:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003554:	bf0c      	ite	eq
 8003556:	4b16      	ldreq	r3, [pc, #88]	; (80035b0 <_ZN8Handlers13mirrorCommandEPKci+0x84>)
			}
			else {
				this->writeHex(v);
 8003558:	4b16      	ldrne	r3, [pc, #88]	; (80035b4 <_ZN8Handlers13mirrorCommandEPKci+0x88>)
 800355a:	4798      	blx	r3
		iout << "no command found to mirror" << endl;
		return false;
	}
	commandOut << cmd << endl;
	return false;
}
 800355c:	2000      	movs	r0, #0
 800355e:	bd10      	pop	{r4, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003560:	4c15      	ldr	r4, [pc, #84]	; (80035b8 <_ZN8Handlers13mirrorCommandEPKci+0x8c>)
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	b1bb      	cbz	r3, 8003596 <_ZN8Handlers13mirrorCommandEPKci+0x6a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003566:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003568:	4620      	mov	r0, r4
 800356a:	4914      	ldr	r1, [pc, #80]	; (80035bc <_ZN8Handlers13mirrorCommandEPKci+0x90>)
 800356c:	bf0c      	ite	eq
 800356e:	4b0e      	ldreq	r3, [pc, #56]	; (80035a8 <_ZN8Handlers13mirrorCommandEPKci+0x7c>)
			}
			else {
				this->writeHex(s);
 8003570:	4b0e      	ldrne	r3, [pc, #56]	; (80035ac <_ZN8Handlers13mirrorCommandEPKci+0x80>)
 8003572:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	4810      	ldr	r0, [pc, #64]	; (80035b8 <_ZN8Handlers13mirrorCommandEPKci+0x8c>)
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e9      	bne.n	8003550 <_ZN8Handlers13mirrorCommandEPKci+0x24>
				this->device->write(v);
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	6803      	ldr	r3, [r0, #0]
 8003580:	210a      	movs	r1, #10
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4798      	blx	r3
 8003586:	2000      	movs	r0, #0
 8003588:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	6803      	ldr	r3, [r0, #0]
 800358e:	4611      	mov	r1, r2
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4798      	blx	r3
 8003594:	e7d9      	b.n	800354a <_ZN8Handlers13mirrorCommandEPKci+0x1e>
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	4908      	ldr	r1, [pc, #32]	; (80035bc <_ZN8Handlers13mirrorCommandEPKci+0x90>)
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4798      	blx	r3
 80035a0:	e7e8      	b.n	8003574 <_ZN8Handlers13mirrorCommandEPKci+0x48>
 80035a2:	bf00      	nop
 80035a4:	2000118c 	.word	0x2000118c
 80035a8:	080079ed 	.word	0x080079ed
 80035ac:	080079a9 	.word	0x080079a9
 80035b0:	08007af5 	.word	0x08007af5
 80035b4:	08007ac1 	.word	0x08007ac1
 80035b8:	200013d0 	.word	0x200013d0
 80035bc:	080094cc 	.word	0x080094cc

080035c0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci>:
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
 80035c0:	b530      	push	{r4, r5, lr}
 80035c2:	ed2d 8b02 	vpush	{d8}
	float pos = atof2(cmd, length, 99999.0f);
 80035c6:	ed9f 8a33 	vldr	s16, [pc, #204]	; 8003694 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xd4>
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
 80035ca:	b083      	sub	sp, #12
	float pos = atof2(cmd, length, 99999.0f);
 80035cc:	ee18 2a10 	vmov	r2, s16
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xd8>)
 80035d2:	4798      	blx	r3
 80035d4:	ee07 0a90 	vmov	s15, r0
	if(pos == 99999.0f){
 80035d8:	eef4 7a48 	vcmp.f32	s15, s16
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return true;
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
 80035e0:	9001      	str	r0, [sp, #4]
	if(pos == 99999.0f){
 80035e2:	d104      	bne.n	80035ee <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x2e>
		return false;
 80035e4:	2000      	movs	r0, #0
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
}
 80035e6:	b003      	add	sp, #12
 80035e8:	ecbd 8b02 	vpop	{d8}
 80035ec:	bd30      	pop	{r4, r5, pc}
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xdc>)
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
 80035f0:	4c2b      	ldr	r4, [pc, #172]	; (80036a0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xe0>)
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 80035f2:	4798      	blx	r3

#include "project.h"

struct Transform{
	static int mmToEncoder(float mm){
		return int(MOTOR_ENC_PER_REV*MOTOR_GEAR_RATIO*mm + 0.5f);
 80035f4:	eddd 6a01 	vldr	s13, [sp, #4]
 80035f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80036a4 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xe4>
 80035fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003600:	ee46 7a87 	vmla.f32	s15, s13, s14
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
 8003604:	2001      	movs	r0, #1
 8003606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xe8>)
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
 800360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003610:	edcd 7a01 	vstr	s15, [sp, #4]
	Control<ALL>::enablePositionControl(true);
 8003614:	4798      	blx	r3
	pos = Control<axis>::getIsPosition() + pos;
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xec>)
 8003618:	4798      	blx	r3
 800361a:	ee07 0a90 	vmov	s15, r0
 800361e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003622:	eddd 7a01 	vldr	s15, [sp, #4]
 8003626:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xf0>)
	Control<axis>::setShallPosition(pos);
 800362c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
 8003630:	edcd 7a01 	vstr	s15, [sp, #4]
 8003634:	4798      	blx	r3
	Control<ALL>::resetVPid();
 8003636:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xf4>)
 8003638:	4798      	blx	r3
	pos_shall = position;
 800363a:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xf8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800363c:	4620      	mov	r0, r4
 800363e:	ed83 8a00 	vstr	s16, [r3]
 8003642:	2102      	movs	r1, #2
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xfc>)
 8003646:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	b1b3      	cbz	r3, 800367a <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xba>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800364c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800364e:	4620      	mov	r0, r4
 8003650:	491b      	ldr	r1, [pc, #108]	; (80036c0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x100>)
 8003652:	bf0c      	ite	eq
 8003654:	4b1b      	ldreq	r3, [pc, #108]	; (80036c4 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x104>)
			}
			else {
				this->writeHex(s);
 8003656:	4b1c      	ldrne	r3, [pc, #112]	; (80036c8 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x108>)
 8003658:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 800365a:	4d11      	ldr	r5, [pc, #68]	; (80036a0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xe0>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x10c>)
 800365e:	4628      	mov	r0, r5
 8003660:	a901      	add	r1, sp, #4
 8003662:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	b173      	cbz	r3, 8003686 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0xc6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003668:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800366a:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800366c:	4628      	mov	r0, r5
 800366e:	bf0c      	ite	eq
 8003670:	4b17      	ldreq	r3, [pc, #92]	; (80036d0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x110>)
			}
			else {
				this->writeHex(v);
 8003672:	4b18      	ldrne	r3, [pc, #96]	; (80036d4 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x114>)
 8003674:	4798      	blx	r3
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
 8003676:	2001      	movs	r0, #1
 8003678:	e7b5      	b.n	80035e6 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x26>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	4910      	ldr	r1, [pc, #64]	; (80036c0 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x100>)
 800367e:	6803      	ldr	r3, [r0, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4798      	blx	r3
 8003684:	e7e9      	b.n	800365a <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x9a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003686:	6828      	ldr	r0, [r5, #0]
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	210a      	movs	r1, #10
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4798      	blx	r3
 8003690:	2001      	movs	r0, #1
 8003692:	e7a8      	b.n	80035e6 <_ZN8Handlers11moveHandlerIL4Axis2EEEbPKci+0x26>
 8003694:	47c34f80 	.word	0x47c34f80
 8003698:	08000791 	.word	0x08000791
 800369c:	0800699d 	.word	0x0800699d
 80036a0:	200013bc 	.word	0x200013bc
 80036a4:	44fa0000 	.word	0x44fa0000
 80036a8:	08000ef9 	.word	0x08000ef9
 80036ac:	08000e81 	.word	0x08000e81
 80036b0:	08000eb1 	.word	0x08000eb1
 80036b4:	08000e95 	.word	0x08000e95
 80036b8:	20000674 	.word	0x20000674
 80036bc:	080078f9 	.word	0x080078f9
 80036c0:	080094e8 	.word	0x080094e8
 80036c4:	080079ed 	.word	0x080079ed
 80036c8:	080079a9 	.word	0x080079a9
 80036cc:	08007b2d 	.word	0x08007b2d
 80036d0:	08007af5 	.word	0x08007af5
 80036d4:	08007ac1 	.word	0x08007ac1

080036d8 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci>:


struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
 80036d8:	b530      	push	{r4, r5, lr}
 80036da:	ed2d 8b02 	vpush	{d8}
	float pos = atof2(cmd, length, 99999.0f);
 80036de:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8003798 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xc0>


struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
 80036e2:	b083      	sub	sp, #12
	float pos = atof2(cmd, length, 99999.0f);
 80036e4:	ee18 2a10 	vmov	r2, s16
 80036e8:	4b2c      	ldr	r3, [pc, #176]	; (800379c <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xc4>)
 80036ea:	4798      	blx	r3
 80036ec:	ee07 0a90 	vmov	s15, r0
	if(pos == 99999.0f){
 80036f0:	eef4 7a48 	vcmp.f32	s15, s16
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
 80036f8:	9001      	str	r0, [sp, #4]
	if(pos == 99999.0f){
 80036fa:	d104      	bne.n	8003706 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0x2e>
		return false;
 80036fc:	2000      	movs	r0, #0
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
}
 80036fe:	b003      	add	sp, #12
 8003700:	ecbd 8b02 	vpop	{d8}
 8003704:	bd30      	pop	{r4, r5, pc}
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xc8>)
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
 8003708:	4c26      	ldr	r4, [pc, #152]	; (80037a4 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xcc>)
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 800370a:	4798      	blx	r3
 800370c:	eddd 6a01 	vldr	s13, [sp, #4]
 8003710:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80037a8 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xd0>
 8003714:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003718:	ee46 7a87 	vmla.f32	s15, s13, s14
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
 800371c:	2001      	movs	r0, #1
 800371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xd4>)
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
 8003724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003728:	edcd 7a01 	vstr	s15, [sp, #4]
	Control<ALL>::enablePositionControl(true);
 800372c:	4798      	blx	r3
	Control<axis>::setShallPosition(pos);
 800372e:	ed9d 8a01 	vldr	s16, [sp, #4]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xd8>)
 8003734:	4798      	blx	r3
	Control<ALL>::resetVPid();
 8003736:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xdc>)
 8003738:	4798      	blx	r3
 800373a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
	pos_shall = position;
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xe0>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003740:	4620      	mov	r0, r4
 8003742:	ed83 8a00 	vstr	s16, [r3]
 8003746:	2102      	movs	r1, #2
 8003748:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xe4>)
 800374a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	b1b3      	cbz	r3, 800377e <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xa6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003750:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003752:	4620      	mov	r0, r4
 8003754:	491a      	ldr	r1, [pc, #104]	; (80037c0 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xe8>)
 8003756:	bf0c      	ite	eq
 8003758:	4b1a      	ldreq	r3, [pc, #104]	; (80037c4 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xec>)
			}
			else {
				this->writeHex(s);
 800375a:	4b1b      	ldrne	r3, [pc, #108]	; (80037c8 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xf0>)
 800375c:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 800375e:	4d11      	ldr	r5, [pc, #68]	; (80037a4 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xcc>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xf4>)
 8003762:	4628      	mov	r0, r5
 8003764:	a901      	add	r1, sp, #4
 8003766:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	b173      	cbz	r3, 800378a <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xb2>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800376c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800376e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003770:	4628      	mov	r0, r5
 8003772:	bf0c      	ite	eq
 8003774:	4b16      	ldreq	r3, [pc, #88]	; (80037d0 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xf8>)
			}
			else {
				this->writeHex(v);
 8003776:	4b17      	ldrne	r3, [pc, #92]	; (80037d4 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xfc>)
 8003778:	4798      	blx	r3
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
 800377a:	2001      	movs	r0, #1
 800377c:	e7bf      	b.n	80036fe <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0x26>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	490f      	ldr	r1, [pc, #60]	; (80037c0 <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0xe8>)
 8003782:	6803      	ldr	r3, [r0, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4798      	blx	r3
 8003788:	e7e9      	b.n	800375e <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0x86>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800378a:	6828      	ldr	r0, [r5, #0]
 800378c:	6803      	ldr	r3, [r0, #0]
 800378e:	210a      	movs	r1, #10
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4798      	blx	r3
 8003794:	2001      	movs	r0, #1
 8003796:	e7b2      	b.n	80036fe <_ZN8Handlers11gotoHandlerIL4Axis2EEEbPKci+0x26>
 8003798:	47c34f80 	.word	0x47c34f80
 800379c:	08000791 	.word	0x08000791
 80037a0:	0800699d 	.word	0x0800699d
 80037a4:	200013bc 	.word	0x200013bc
 80037a8:	44fa0000 	.word	0x44fa0000
 80037ac:	08000ef9 	.word	0x08000ef9
 80037b0:	08000eb1 	.word	0x08000eb1
 80037b4:	08000e95 	.word	0x08000e95
 80037b8:	20000674 	.word	0x20000674
 80037bc:	080078f9 	.word	0x080078f9
 80037c0:	080094e8 	.word	0x080094e8
 80037c4:	080079ed 	.word	0x080079ed
 80037c8:	080079a9 	.word	0x080079a9
 80037cc:	08007b2d 	.word	0x08007b2d
 80037d0:	08007af5 	.word	0x08007af5
 80037d4:	08007ac1 	.word	0x08007ac1

080037d8 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci>:


struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
 80037d8:	b530      	push	{r4, r5, lr}
 80037da:	ed2d 8b02 	vpush	{d8}
	float pos = atof2(cmd, length, 99999.0f);
 80037de:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8003898 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xc0>


struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
 80037e2:	b083      	sub	sp, #12
	float pos = atof2(cmd, length, 99999.0f);
 80037e4:	ee18 2a10 	vmov	r2, s16
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xc4>)
 80037ea:	4798      	blx	r3
 80037ec:	ee07 0a90 	vmov	s15, r0
	if(pos == 99999.0f){
 80037f0:	eef4 7a48 	vcmp.f32	s15, s16
 80037f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

struct Handlers{

template<Axis axis>
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
 80037f8:	9001      	str	r0, [sp, #4]
	if(pos == 99999.0f){
 80037fa:	d104      	bne.n	8003806 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0x2e>
		return false;
 80037fc:	2000      	movs	r0, #0
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
}
 80037fe:	b003      	add	sp, #12
 8003800:	ecbd 8b02 	vpop	{d8}
 8003804:	bd30      	pop	{r4, r5, pc}
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xc8>)
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
 8003808:	4c26      	ldr	r4, [pc, #152]	; (80038a4 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xcc>)
static bool gotoHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 800380a:	4798      	blx	r3
 800380c:	eddd 6a01 	vldr	s13, [sp, #4]
 8003810:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80038a8 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xd0>
 8003814:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003818:	ee46 7a87 	vmla.f32	s15, s13, s14
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
 800381c:	2001      	movs	r0, #1
 800381e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xd4>)
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
 8003824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003828:	edcd 7a01 	vstr	s15, [sp, #4]
	Control<ALL>::enablePositionControl(true);
 800382c:	4798      	blx	r3
	Control<axis>::setShallPosition(pos);
 800382e:	ed9d 8a01 	vldr	s16, [sp, #4]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xd8>)
 8003834:	4798      	blx	r3
	Control<ALL>::resetVPid();
 8003836:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xdc>)
 8003838:	4798      	blx	r3
 800383a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
	pos_shall = position;
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xe0>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003840:	4620      	mov	r0, r4
 8003842:	ed83 8a00 	vstr	s16, [r3]
 8003846:	2100      	movs	r1, #0
 8003848:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xe4>)
 800384a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800384c:	6863      	ldr	r3, [r4, #4]
 800384e:	b1b3      	cbz	r3, 800387e <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xa6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003850:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003852:	4620      	mov	r0, r4
 8003854:	491a      	ldr	r1, [pc, #104]	; (80038c0 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xe8>)
 8003856:	bf0c      	ite	eq
 8003858:	4b1a      	ldreq	r3, [pc, #104]	; (80038c4 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xec>)
			}
			else {
				this->writeHex(s);
 800385a:	4b1b      	ldrne	r3, [pc, #108]	; (80038c8 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xf0>)
 800385c:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 800385e:	4d11      	ldr	r5, [pc, #68]	; (80038a4 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xcc>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xf4>)
 8003862:	4628      	mov	r0, r5
 8003864:	a901      	add	r1, sp, #4
 8003866:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003868:	6863      	ldr	r3, [r4, #4]
 800386a:	b173      	cbz	r3, 800388a <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xb2>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800386c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800386e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003870:	4628      	mov	r0, r5
 8003872:	bf0c      	ite	eq
 8003874:	4b16      	ldreq	r3, [pc, #88]	; (80038d0 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xf8>)
			}
			else {
				this->writeHex(v);
 8003876:	4b17      	ldrne	r3, [pc, #92]	; (80038d4 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xfc>)
 8003878:	4798      	blx	r3
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
 800387a:	2001      	movs	r0, #1
 800387c:	e7bf      	b.n	80037fe <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0x26>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800387e:	6820      	ldr	r0, [r4, #0]
 8003880:	490f      	ldr	r1, [pc, #60]	; (80038c0 <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0xe8>)
 8003882:	6803      	ldr	r3, [r0, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4798      	blx	r3
 8003888:	e7e9      	b.n	800385e <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0x86>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800388a:	6828      	ldr	r0, [r5, #0]
 800388c:	6803      	ldr	r3, [r0, #0]
 800388e:	210a      	movs	r1, #10
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4798      	blx	r3
 8003894:	2001      	movs	r0, #1
 8003896:	e7b2      	b.n	80037fe <_ZN8Handlers11gotoHandlerIL4Axis0EEEbPKci+0x26>
 8003898:	47c34f80 	.word	0x47c34f80
 800389c:	08000791 	.word	0x08000791
 80038a0:	0800699d 	.word	0x0800699d
 80038a4:	200013bc 	.word	0x200013bc
 80038a8:	44fa0000 	.word	0x44fa0000
 80038ac:	08000ef9 	.word	0x08000ef9
 80038b0:	08000eb1 	.word	0x08000eb1
 80038b4:	08000e95 	.word	0x08000e95
 80038b8:	20000680 	.word	0x20000680
 80038bc:	080078f9 	.word	0x080078f9
 80038c0:	080094e8 	.word	0x080094e8
 80038c4:	080079ed 	.word	0x080079ed
 80038c8:	080079a9 	.word	0x080079a9
 80038cc:	08007b2d 	.word	0x08007b2d
 80038d0:	08007af5 	.word	0x08007af5
 80038d4:	08007ac1 	.word	0x08007ac1

080038d8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci>:
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
 80038d8:	b530      	push	{r4, r5, lr}
 80038da:	ed2d 8b02 	vpush	{d8}
	float pos = atof2(cmd, length, 99999.0f);
 80038de:	ed9f 8a33 	vldr	s16, [pc, #204]	; 80039ac <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xd4>
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
 80038e2:	b083      	sub	sp, #12
	float pos = atof2(cmd, length, 99999.0f);
 80038e4:	ee18 2a10 	vmov	r2, s16
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xd8>)
 80038ea:	4798      	blx	r3
 80038ec:	ee07 0a90 	vmov	s15, r0
	if(pos == 99999.0f){
 80038f0:	eef4 7a48 	vcmp.f32	s15, s16
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return true;
}

template<Axis axis>
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
 80038f8:	9001      	str	r0, [sp, #4]
	if(pos == 99999.0f){
 80038fa:	d104      	bne.n	8003906 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x2e>
		return false;
 80038fc:	2000      	movs	r0, #0
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
}
 80038fe:	b003      	add	sp, #12
 8003900:	ecbd 8b02 	vpop	{d8}
 8003904:	bd30      	pop	{r4, r5, pc}
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xdc>)
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
 8003908:	4c2b      	ldr	r4, [pc, #172]	; (80039b8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xe0>)
static bool moveHandler(const char* cmd, int length){
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
 800390a:	4798      	blx	r3
 800390c:	eddd 6a01 	vldr	s13, [sp, #4]
 8003910:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80039bc <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xe4>
 8003914:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8003918:	ee46 7a87 	vmla.f32	s15, s13, s14
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
 800391c:	2001      	movs	r0, #1
 800391e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xe8>)
	float pos = atof2(cmd, length, 99999.0f);
	if(pos == 99999.0f){
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
 8003924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003928:	edcd 7a01 	vstr	s15, [sp, #4]
	Control<ALL>::enablePositionControl(true);
 800392c:	4798      	blx	r3
	pos = Control<axis>::getIsPosition() + pos;
 800392e:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xec>)
 8003930:	4798      	blx	r3
 8003932:	ee07 0a90 	vmov	s15, r0
 8003936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800393a:	eddd 7a01 	vldr	s15, [sp, #4]
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xf0>)
	Control<axis>::setShallPosition(pos);
 8003944:	eebd 8ae7 	vcvt.s32.f32	s16, s15
		return false;
	}
	Utils::startLoggingControl();
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
 8003948:	edcd 7a01 	vstr	s15, [sp, #4]
 800394c:	4798      	blx	r3
	Control<ALL>::resetVPid();
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xf4>)
 8003950:	4798      	blx	r3
	pos_shall = position;
 8003952:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xf8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003954:	4620      	mov	r0, r4
 8003956:	ed83 8a00 	vstr	s16, [r3]
 800395a:	2100      	movs	r1, #0
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xfc>)
 800395e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	b1b3      	cbz	r3, 8003992 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xba>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003964:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003966:	4620      	mov	r0, r4
 8003968:	491b      	ldr	r1, [pc, #108]	; (80039d8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x100>)
 800396a:	bf0c      	ite	eq
 800396c:	4b1b      	ldreq	r3, [pc, #108]	; (80039dc <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x104>)
			}
			else {
				this->writeHex(s);
 800396e:	4b1c      	ldrne	r3, [pc, #112]	; (80039e0 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x108>)
 8003970:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003972:	4d11      	ldr	r5, [pc, #68]	; (80039b8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xe0>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x10c>)
 8003976:	4628      	mov	r0, r5
 8003978:	a901      	add	r1, sp, #4
 800397a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800397c:	6863      	ldr	r3, [r4, #4]
 800397e:	b173      	cbz	r3, 800399e <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0xc6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003980:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003982:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003984:	4628      	mov	r0, r5
 8003986:	bf0c      	ite	eq
 8003988:	4b17      	ldreq	r3, [pc, #92]	; (80039e8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x110>)
			}
			else {
				this->writeHex(v);
 800398a:	4b18      	ldrne	r3, [pc, #96]	; (80039ec <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x114>)
 800398c:	4798      	blx	r3
	pos = Transform::mmToEncoder(pos);
	Control<ALL>::enablePositionControl(true);
	pos = Control<axis>::getIsPosition() + pos;
	Control<axis>::setShallPosition(pos);
	dout << axis << " going to " << pos << endl;
	return true;
 800398e:	2001      	movs	r0, #1
 8003990:	e7b5      	b.n	80038fe <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x26>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	4910      	ldr	r1, [pc, #64]	; (80039d8 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x100>)
 8003996:	6803      	ldr	r3, [r0, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	4798      	blx	r3
 800399c:	e7e9      	b.n	8003972 <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x9a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800399e:	6828      	ldr	r0, [r5, #0]
 80039a0:	6803      	ldr	r3, [r0, #0]
 80039a2:	210a      	movs	r1, #10
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4798      	blx	r3
 80039a8:	2001      	movs	r0, #1
 80039aa:	e7a8      	b.n	80038fe <_ZN8Handlers11moveHandlerIL4Axis0EEEbPKci+0x26>
 80039ac:	47c34f80 	.word	0x47c34f80
 80039b0:	08000791 	.word	0x08000791
 80039b4:	0800699d 	.word	0x0800699d
 80039b8:	200013bc 	.word	0x200013bc
 80039bc:	44fa0000 	.word	0x44fa0000
 80039c0:	08000ef9 	.word	0x08000ef9
 80039c4:	08000e89 	.word	0x08000e89
 80039c8:	08000eb1 	.word	0x08000eb1
 80039cc:	08000e95 	.word	0x08000e95
 80039d0:	20000680 	.word	0x20000680
 80039d4:	080078f9 	.word	0x080078f9
 80039d8:	080094e8 	.word	0x080094e8
 80039dc:	080079ed 	.word	0x080079ed
 80039e0:	080079a9 	.word	0x080079a9
 80039e4:	08007b2d 	.word	0x08007b2d
 80039e8:	08007af5 	.word	0x08007af5
 80039ec:	08007ac1 	.word	0x08007ac1

080039f0 <_ZN8Handlers18setMaxSpeedHandlerEPKci>:
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
}

static bool setMaxSpeedHandler(const char* cmd, int length){
 80039f0:	b530      	push	{r4, r5, lr}
	float speed = atof2(cmd, length, 2.f);
 80039f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
}

static bool setMaxSpeedHandler(const char* cmd, int length){
 80039f6:	b083      	sub	sp, #12
	float speed = atof2(cmd, length, 2.f);
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xbc>)
 80039fa:	4798      	blx	r3
 80039fc:	ee07 0a90 	vmov	s15, r0
	if(speed == 2.f){
 8003a00:	eeb0 7a00 	vmov.f32	s14, #0
 8003a04:	eef4 7a47 	vcmp.f32	s15, s14
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	dout << axis << " set speed to " << speed << endl;
	return true;
}

static bool setMaxSpeedHandler(const char* cmd, int length){
	float speed = atof2(cmd, length, 2.f);
 8003a0c:	9001      	str	r0, [sp, #4]
	if(speed == 2.f){
 8003a0e:	d01e      	beq.n	8003a4e <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x5e>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003a10:	4c27      	ldr	r4, [pc, #156]	; (8003ab0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xc0>)
		cerr << "speed param must be between 0 and 1" << endl;
		return false;
	}
	Control<ALL>::setMaxSpeed(speed);
 8003a12:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xc4>)
 8003a14:	4798      	blx	r3
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02d      	beq.n	8003a78 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x88>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003a1c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4925      	ldr	r1, [pc, #148]	; (8003ab8 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xc8>)
 8003a22:	bf0c      	ite	eq
 8003a24:	4b25      	ldreq	r3, [pc, #148]	; (8003abc <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xcc>)
			}
			else {
				this->writeHex(s);
 8003a26:	4b26      	ldrne	r3, [pc, #152]	; (8003ac0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xd0>)
 8003a28:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003a2a:	4d21      	ldr	r5, [pc, #132]	; (8003ab0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xc0>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xd4>)
 8003a2e:	4628      	mov	r0, r5
 8003a30:	a901      	add	r1, sp, #4
 8003a32:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003a34:	6863      	ldr	r3, [r4, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d024      	beq.n	8003a84 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x94>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003a3a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003a3c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003a3e:	4628      	mov	r0, r5
 8003a40:	bf0c      	ite	eq
 8003a42:	4b21      	ldreq	r3, [pc, #132]	; (8003ac8 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xd8>)
			}
			else {
				this->writeHex(v);
 8003a44:	4b21      	ldrne	r3, [pc, #132]	; (8003acc <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xdc>)
 8003a46:	4798      	blx	r3
		cerr << "speed param must be between 0 and 1" << endl;
		return false;
	}
	Control<ALL>::setMaxSpeed(speed);
	dout << " set speed to " << speed << endl;
	return true;
 8003a48:	2001      	movs	r0, #1
}
 8003a4a:	b003      	add	sp, #12
 8003a4c:	bd30      	pop	{r4, r5, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003a4e:	4c20      	ldr	r4, [pc, #128]	; (8003ad0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xe0>)
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	b32b      	cbz	r3, 8003aa0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xb0>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003a54:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003a56:	4620      	mov	r0, r4
 8003a58:	491e      	ldr	r1, [pc, #120]	; (8003ad4 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xe4>)
 8003a5a:	bf0c      	ite	eq
 8003a5c:	4b17      	ldreq	r3, [pc, #92]	; (8003abc <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xcc>)
			}
			else {
				this->writeHex(s);
 8003a5e:	4b18      	ldrne	r3, [pc, #96]	; (8003ac0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xd0>)
 8003a60:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003a62:	6864      	ldr	r4, [r4, #4]
 8003a64:	481a      	ldr	r0, [pc, #104]	; (8003ad0 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xe0>)
 8003a66:	b1a4      	cbz	r4, 8003a92 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xa2>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003a68:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003a6a:	2c02      	cmp	r4, #2
				this->writeBin(v);
 8003a6c:	bf0c      	ite	eq
 8003a6e:	4b16      	ldreq	r3, [pc, #88]	; (8003ac8 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xd8>)
			}
			else {
				this->writeHex(v);
 8003a70:	4b16      	ldrne	r3, [pc, #88]	; (8003acc <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xdc>)
 8003a72:	4798      	blx	r3
 8003a74:	2000      	movs	r0, #0
 8003a76:	e7e8      	b.n	8003a4a <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x5a>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	490f      	ldr	r1, [pc, #60]	; (8003ab8 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xc8>)
 8003a7c:	6803      	ldr	r3, [r0, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4798      	blx	r3
 8003a82:	e7d2      	b.n	8003a2a <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x3a>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003a84:	6828      	ldr	r0, [r5, #0]
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	210a      	movs	r1, #10
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4798      	blx	r3
		cerr << "speed param must be between 0 and 1" << endl;
		return false;
	}
	Control<ALL>::setMaxSpeed(speed);
	dout << " set speed to " << speed << endl;
	return true;
 8003a8e:	2001      	movs	r0, #1
 8003a90:	e7db      	b.n	8003a4a <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x5a>
 8003a92:	6800      	ldr	r0, [r0, #0]
 8003a94:	6803      	ldr	r3, [r0, #0]
 8003a96:	210a      	movs	r1, #10
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	4798      	blx	r3
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	e7d4      	b.n	8003a4a <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x5a>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0xe4>)
 8003aa4:	6803      	ldr	r3, [r0, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4798      	blx	r3
 8003aaa:	e7da      	b.n	8003a62 <_ZN8Handlers18setMaxSpeedHandlerEPKci+0x72>
 8003aac:	08000791 	.word	0x08000791
 8003ab0:	200013bc 	.word	0x200013bc
 8003ab4:	08000f75 	.word	0x08000f75
 8003ab8:	08009518 	.word	0x08009518
 8003abc:	080079ed 	.word	0x080079ed
 8003ac0:	080079a9 	.word	0x080079a9
 8003ac4:	08007b2d 	.word	0x08007b2d
 8003ac8:	08007af5 	.word	0x08007af5
 8003acc:	08007ac1 	.word	0x08007ac1
 8003ad0:	20001184 	.word	0x20001184
 8003ad4:	080094f4 	.word	0x080094f4

08003ad8 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci>:
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
 8003ad8:	b570      	push	{r4, r5, r6, lr}
	float speed = atof2(cmd, length, 2.f);
 8003ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
 8003ade:	b082      	sub	sp, #8
	float speed = atof2(cmd, length, 2.f);
 8003ae0:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x128>)
 8003ae2:	4798      	blx	r3
 8003ae4:	ee07 0a90 	vmov	s15, r0
	if(speed == 2.f){
 8003ae8:	eeb0 7a00 	vmov.f32	s14, #0
 8003aec:	eef4 7a47 	vcmp.f32	s15, s14
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
	float speed = atof2(cmd, length, 2.f);
 8003af4:	9001      	str	r0, [sp, #4]
	if(speed == 2.f){
 8003af6:	d044      	beq.n	8003b82 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xaa>
		cerr << "speed param must be between -1 and 1" << endl;
		return false;
	}
	Utils::startLoggingControl();
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x12c>)
	Control<ALL>::enablePositionControl(false);
 8003afa:	4e43      	ldr	r6, [pc, #268]	; (8003c08 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x130>)
	float speed = atof2(cmd, length, 2.f);
	if(speed == 2.f){
		cerr << "speed param must be between -1 and 1" << endl;
		return false;
	}
	Utils::startLoggingControl();
 8003afc:	4798      	blx	r3
	Control<ALL>::enablePositionControl(false);
 8003afe:	2000      	movs	r0, #0
 8003b00:	47b0      	blx	r6
	Control<ALL>::enableSpeedControl(true);
 8003b02:	2001      	movs	r0, #1
 8003b04:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x134>)
 8003b06:	4798      	blx	r3
	Control<axis>::setShallSpeed(speed);
 8003b08:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x138>)
 8003b0a:	9801      	ldr	r0, [sp, #4]
 8003b0c:	4798      	blx	r3
 8003b0e:	4604      	mov	r4, r0
 8003b10:	460d      	mov	r5, r1

//max speed is 5500rpm*400 counts/rev
template<Axis axis>
void Control<axis>::setShallSpeed(double speed){
	//disable position control
	Control<ALL>::enablePositionControl(false);
 8003b12:	2000      	movs	r0, #0
 8003b14:	47b0      	blx	r6
	if(speed > 1)
 8003b16:	4620      	mov	r0, r4
 8003b18:	4629      	mov	r1, r5
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x13c>)
 8003b1e:	4e3e      	ldr	r6, [pc, #248]	; (8003c18 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x140>)
 8003b20:	47b0      	blx	r6
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d043      	beq.n	8003bae <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xd6>
		speed = 1;
 8003b26:	4d3b      	ldr	r5, [pc, #236]	; (8003c14 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x13c>)
 8003b28:	2400      	movs	r4, #0
	if(speed < -1)
		speed = -1;
	v_shall = speed*MOTOR_MAX_SPEED;
 8003b2a:	a333      	add	r3, pc, #204	; (adr r3, 8003bf8 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x120>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	4620      	mov	r0, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	4c39      	ldr	r4, [pc, #228]	; (8003c1c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x144>)
	dout << axis << " set speed to " << speed << endl;
 8003b36:	4e3a      	ldr	r6, [pc, #232]	; (8003c20 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x148>)
 8003b38:	47a0      	blx	r4
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x14c>)
 8003b3c:	4798      	blx	r3
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x150>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003b40:	2102      	movs	r1, #2
 8003b42:	6018      	str	r0, [r3, #0]
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x154>)
 8003b46:	4630      	mov	r0, r6
 8003b48:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003b4a:	6873      	ldr	r3, [r6, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d040      	beq.n	8003bd2 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xfa>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003b50:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003b52:	4630      	mov	r0, r6
 8003b54:	4936      	ldr	r1, [pc, #216]	; (8003c30 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x158>)
 8003b56:	bf0c      	ite	eq
 8003b58:	4b36      	ldreq	r3, [pc, #216]	; (8003c34 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x15c>)
			}
			else {
				this->writeHex(s);
 8003b5a:	4b37      	ldrne	r3, [pc, #220]	; (8003c38 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x160>)
 8003b5c:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003b5e:	4c30      	ldr	r4, [pc, #192]	; (8003c20 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x148>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003b60:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x164>)
 8003b62:	4620      	mov	r0, r4
 8003b64:	a901      	add	r1, sp, #4
 8003b66:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003b68:	6873      	ldr	r3, [r6, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xec>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003b6e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003b70:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003b72:	4620      	mov	r0, r4
 8003b74:	bf0c      	ite	eq
 8003b76:	4b32      	ldreq	r3, [pc, #200]	; (8003c40 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x168>)
			}
			else {
				this->writeHex(v);
 8003b78:	4b32      	ldrne	r3, [pc, #200]	; (8003c44 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x16c>)
 8003b7a:	4798      	blx	r3
	Utils::startLoggingControl();
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(true);
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
 8003b7c:	2001      	movs	r0, #1
}
 8003b7e:	b002      	add	sp, #8
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003b82:	4c31      	ldr	r4, [pc, #196]	; (8003c48 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x170>)
 8003b84:	6863      	ldr	r3, [r4, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d030      	beq.n	8003bec <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x114>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003b8a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	492f      	ldr	r1, [pc, #188]	; (8003c4c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x174>)
 8003b90:	bf0c      	ite	eq
 8003b92:	4b28      	ldreq	r3, [pc, #160]	; (8003c34 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x15c>)
			}
			else {
				this->writeHex(s);
 8003b94:	4b28      	ldrne	r3, [pc, #160]	; (8003c38 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x160>)
 8003b96:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	482b      	ldr	r0, [pc, #172]	; (8003c48 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x170>)
 8003b9c:	b1fc      	cbz	r4, 8003bde <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x106>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003b9e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003ba0:	2c02      	cmp	r4, #2
				this->writeBin(v);
 8003ba2:	bf0c      	ite	eq
 8003ba4:	4b26      	ldreq	r3, [pc, #152]	; (8003c40 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x168>)
			}
			else {
				this->writeHex(v);
 8003ba6:	4b27      	ldrne	r3, [pc, #156]	; (8003c44 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x16c>)
 8003ba8:	4798      	blx	r3
 8003baa:	2000      	movs	r0, #0
 8003bac:	e7e7      	b.n	8003b7e <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xa6>
void Control<axis>::setShallSpeed(double speed){
	//disable position control
	Control<ALL>::enablePositionControl(false);
	if(speed > 1)
		speed = 1;
	if(speed < -1)
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x178>)
 8003bb6:	4e27      	ldr	r6, [pc, #156]	; (8003c54 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x17c>)
 8003bb8:	47b0      	blx	r6
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0b5      	beq.n	8003b2a <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x52>
		speed = -1;
 8003bbe:	2400      	movs	r4, #0
 8003bc0:	4d23      	ldr	r5, [pc, #140]	; (8003c50 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x178>)
 8003bc2:	e7b2      	b.n	8003b2a <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x52>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	6803      	ldr	r3, [r0, #0]
 8003bc8:	210a      	movs	r1, #10
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4798      	blx	r3
	Utils::startLoggingControl();
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(true);
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e7d5      	b.n	8003b7e <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xa6>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003bd2:	6830      	ldr	r0, [r6, #0]
 8003bd4:	4916      	ldr	r1, [pc, #88]	; (8003c30 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x158>)
 8003bd6:	6803      	ldr	r3, [r0, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4798      	blx	r3
 8003bdc:	e7bf      	b.n	8003b5e <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x86>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	210a      	movs	r1, #10
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4798      	blx	r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	e7c8      	b.n	8003b7e <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xa6>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	4917      	ldr	r1, [pc, #92]	; (8003c4c <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0x174>)
 8003bf0:	6803      	ldr	r3, [r0, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4798      	blx	r3
 8003bf6:	e7cf      	b.n	8003b98 <_ZN8Handlers15setSpeedHandlerIL4Axis2EEEbPKci+0xc0>
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	40e7ed00 	.word	0x40e7ed00
 8003c00:	08000791 	.word	0x08000791
 8003c04:	0800699d 	.word	0x0800699d
 8003c08:	08000ef9 	.word	0x08000ef9
 8003c0c:	08000ecd 	.word	0x08000ecd
 8003c10:	08008175 	.word	0x08008175
 8003c14:	3ff00000 	.word	0x3ff00000
 8003c18:	0800873d 	.word	0x0800873d
 8003c1c:	0800821d 	.word	0x0800821d
 8003c20:	200013bc 	.word	0x200013bc
 8003c24:	08008751 	.word	0x08008751
 8003c28:	2000066c 	.word	0x2000066c
 8003c2c:	080078f9 	.word	0x080078f9
 8003c30:	08009518 	.word	0x08009518
 8003c34:	080079ed 	.word	0x080079ed
 8003c38:	080079a9 	.word	0x080079a9
 8003c3c:	08007b2d 	.word	0x08007b2d
 8003c40:	08007af5 	.word	0x08007af5
 8003c44:	08007ac1 	.word	0x08007ac1
 8003c48:	20001184 	.word	0x20001184
 8003c4c:	08009528 	.word	0x08009528
 8003c50:	bff00000 	.word	0xbff00000
 8003c54:	08008701 	.word	0x08008701

08003c58 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci>:
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
 8003c58:	b570      	push	{r4, r5, r6, lr}
	float speed = atof2(cmd, length, 2.f);
 8003c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	dout << axis << " going to " << pos << endl;
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
 8003c5e:	b082      	sub	sp, #8
	float speed = atof2(cmd, length, 2.f);
 8003c60:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x128>)
 8003c62:	4798      	blx	r3
 8003c64:	ee07 0a90 	vmov	s15, r0
	if(speed == 2.f){
 8003c68:	eeb0 7a00 	vmov.f32	s14, #0
 8003c6c:	eef4 7a47 	vcmp.f32	s15, s14
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	return true;
}

template<Axis axis>
static bool setSpeedHandler(const char* cmd, int length){
	float speed = atof2(cmd, length, 2.f);
 8003c74:	9001      	str	r0, [sp, #4]
	if(speed == 2.f){
 8003c76:	d044      	beq.n	8003d02 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xaa>
		cerr << "speed param must be between -1 and 1" << endl;
		return false;
	}
	Utils::startLoggingControl();
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x12c>)
	Control<ALL>::enablePositionControl(false);
 8003c7a:	4e43      	ldr	r6, [pc, #268]	; (8003d88 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x130>)
	float speed = atof2(cmd, length, 2.f);
	if(speed == 2.f){
		cerr << "speed param must be between -1 and 1" << endl;
		return false;
	}
	Utils::startLoggingControl();
 8003c7c:	4798      	blx	r3
	Control<ALL>::enablePositionControl(false);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	47b0      	blx	r6
	Control<ALL>::enableSpeedControl(true);
 8003c82:	2001      	movs	r0, #1
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x134>)
 8003c86:	4798      	blx	r3
	Control<axis>::setShallSpeed(speed);
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x138>)
 8003c8a:	9801      	ldr	r0, [sp, #4]
 8003c8c:	4798      	blx	r3
 8003c8e:	4604      	mov	r4, r0
 8003c90:	460d      	mov	r5, r1

//max speed is 5500rpm*400 counts/rev
template<Axis axis>
void Control<axis>::setShallSpeed(double speed){
	//disable position control
	Control<ALL>::enablePositionControl(false);
 8003c92:	2000      	movs	r0, #0
 8003c94:	47b0      	blx	r6
	if(speed > 1)
 8003c96:	4620      	mov	r0, r4
 8003c98:	4629      	mov	r1, r5
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x13c>)
 8003c9e:	4e3e      	ldr	r6, [pc, #248]	; (8003d98 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x140>)
 8003ca0:	47b0      	blx	r6
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d043      	beq.n	8003d2e <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xd6>
		speed = 1;
 8003ca6:	4d3b      	ldr	r5, [pc, #236]	; (8003d94 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x13c>)
 8003ca8:	2400      	movs	r4, #0
	if(speed < -1)
		speed = -1;
	v_shall = speed*MOTOR_MAX_SPEED;
 8003caa:	a333      	add	r3, pc, #204	; (adr r3, 8003d78 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x120>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	4c39      	ldr	r4, [pc, #228]	; (8003d9c <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x144>)
	dout << axis << " set speed to " << speed << endl;
 8003cb6:	4e3a      	ldr	r6, [pc, #232]	; (8003da0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x148>)
 8003cb8:	47a0      	blx	r4
 8003cba:	4b3a      	ldr	r3, [pc, #232]	; (8003da4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x14c>)
 8003cbc:	4798      	blx	r3
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x150>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	6018      	str	r0, [r3, #0]
 8003cc4:	4b39      	ldr	r3, [pc, #228]	; (8003dac <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x154>)
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003cca:	6873      	ldr	r3, [r6, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d040      	beq.n	8003d52 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xfa>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003cd0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	4936      	ldr	r1, [pc, #216]	; (8003db0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x158>)
 8003cd6:	bf0c      	ite	eq
 8003cd8:	4b36      	ldreq	r3, [pc, #216]	; (8003db4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x15c>)
			}
			else {
				this->writeHex(s);
 8003cda:	4b37      	ldrne	r3, [pc, #220]	; (8003db8 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x160>)
 8003cdc:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003cde:	4c30      	ldr	r4, [pc, #192]	; (8003da0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x148>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8003ce0:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x164>)
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	a901      	add	r1, sp, #4
 8003ce6:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003ce8:	6873      	ldr	r3, [r6, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02a      	beq.n	8003d44 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xec>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003cee:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003cf0:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	bf0c      	ite	eq
 8003cf6:	4b32      	ldreq	r3, [pc, #200]	; (8003dc0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x168>)
			}
			else {
				this->writeHex(v);
 8003cf8:	4b32      	ldrne	r3, [pc, #200]	; (8003dc4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x16c>)
 8003cfa:	4798      	blx	r3
	Utils::startLoggingControl();
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(true);
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
 8003cfc:	2001      	movs	r0, #1
}
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003d02:	4c31      	ldr	r4, [pc, #196]	; (8003dc8 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x170>)
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d030      	beq.n	8003d6c <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x114>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003d0a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	492f      	ldr	r1, [pc, #188]	; (8003dcc <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x174>)
 8003d10:	bf0c      	ite	eq
 8003d12:	4b28      	ldreq	r3, [pc, #160]	; (8003db4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x15c>)
			}
			else {
				this->writeHex(s);
 8003d14:	4b28      	ldrne	r3, [pc, #160]	; (8003db8 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x160>)
 8003d16:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003d18:	6864      	ldr	r4, [r4, #4]
 8003d1a:	482b      	ldr	r0, [pc, #172]	; (8003dc8 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x170>)
 8003d1c:	b1fc      	cbz	r4, 8003d5e <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x106>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003d1e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003d20:	2c02      	cmp	r4, #2
				this->writeBin(v);
 8003d22:	bf0c      	ite	eq
 8003d24:	4b26      	ldreq	r3, [pc, #152]	; (8003dc0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x168>)
			}
			else {
				this->writeHex(v);
 8003d26:	4b27      	ldrne	r3, [pc, #156]	; (8003dc4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x16c>)
 8003d28:	4798      	blx	r3
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e7e7      	b.n	8003cfe <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xa6>
void Control<axis>::setShallSpeed(double speed){
	//disable position control
	Control<ALL>::enablePositionControl(false);
	if(speed > 1)
		speed = 1;
	if(speed < -1)
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	2200      	movs	r2, #0
 8003d34:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x178>)
 8003d36:	4e27      	ldr	r6, [pc, #156]	; (8003dd4 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x17c>)
 8003d38:	47b0      	blx	r6
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d0b5      	beq.n	8003caa <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x52>
		speed = -1;
 8003d3e:	2400      	movs	r4, #0
 8003d40:	4d23      	ldr	r5, [pc, #140]	; (8003dd0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x178>)
 8003d42:	e7b2      	b.n	8003caa <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x52>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	6803      	ldr	r3, [r0, #0]
 8003d48:	210a      	movs	r1, #10
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4798      	blx	r3
	Utils::startLoggingControl();
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(true);
	Control<axis>::setShallSpeed(speed);
	dout << axis << " set speed to " << speed << endl;
	return true;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7d5      	b.n	8003cfe <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xa6>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003d52:	6830      	ldr	r0, [r6, #0]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x158>)
 8003d56:	6803      	ldr	r3, [r0, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4798      	blx	r3
 8003d5c:	e7bf      	b.n	8003cde <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x86>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003d5e:	6800      	ldr	r0, [r0, #0]
 8003d60:	6803      	ldr	r3, [r0, #0]
 8003d62:	210a      	movs	r1, #10
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	4798      	blx	r3
 8003d68:	4620      	mov	r0, r4
 8003d6a:	e7c8      	b.n	8003cfe <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xa6>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003d6c:	6820      	ldr	r0, [r4, #0]
 8003d6e:	4917      	ldr	r1, [pc, #92]	; (8003dcc <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0x174>)
 8003d70:	6803      	ldr	r3, [r0, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4798      	blx	r3
 8003d76:	e7cf      	b.n	8003d18 <_ZN8Handlers15setSpeedHandlerIL4Axis0EEEbPKci+0xc0>
 8003d78:	00000000 	.word	0x00000000
 8003d7c:	40e7ed00 	.word	0x40e7ed00
 8003d80:	08000791 	.word	0x08000791
 8003d84:	0800699d 	.word	0x0800699d
 8003d88:	08000ef9 	.word	0x08000ef9
 8003d8c:	08000ecd 	.word	0x08000ecd
 8003d90:	08008175 	.word	0x08008175
 8003d94:	3ff00000 	.word	0x3ff00000
 8003d98:	0800873d 	.word	0x0800873d
 8003d9c:	0800821d 	.word	0x0800821d
 8003da0:	200013bc 	.word	0x200013bc
 8003da4:	08008751 	.word	0x08008751
 8003da8:	20000678 	.word	0x20000678
 8003dac:	080078f9 	.word	0x080078f9
 8003db0:	08009518 	.word	0x08009518
 8003db4:	080079ed 	.word	0x080079ed
 8003db8:	080079a9 	.word	0x080079a9
 8003dbc:	08007b2d 	.word	0x08007b2d
 8003dc0:	08007af5 	.word	0x08007af5
 8003dc4:	08007ac1 	.word	0x08007ac1
 8003dc8:	20001184 	.word	0x20001184
 8003dcc:	08009528 	.word	0x08009528
 8003dd0:	bff00000 	.word	0xbff00000
 8003dd4:	08008701 	.word	0x08008701

08003dd8 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci>:
	dout << " set speed to " << speed << endl;
	return true;
}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int speed = atoi2(cmd, length, INT_MAX);
 8003dda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003dde:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0x9c>)
 8003de0:	4798      	blx	r3
	if(speed == INT_MAX){
 8003de2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003de6:	4298      	cmp	r0, r3
	return true;
}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
 8003de8:	4605      	mov	r5, r0
	if(speed == INT_MAX){
 8003dea:	d034      	beq.n	8003e56 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0x7e>
		return false;
	}
	xpcc::stm32::SysTickTimer::enable();
 8003dec:	4822      	ldr	r0, [pc, #136]	; (8003e78 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xa0>)
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xa4>)
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003df0:	4c23      	ldr	r4, [pc, #140]	; (8003e80 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xa8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003df2:	4e24      	ldr	r6, [pc, #144]	; (8003e84 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xac>)
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
	if(speed == INT_MAX){
		return false;
	}
	xpcc::stm32::SysTickTimer::enable();
 8003df4:	4798      	blx	r3
 8003df6:	2005      	movs	r0, #5
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xb0>)
 8003dfa:	4798      	blx	r3
 8003dfc:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xb4>)
	if(speed > 1200){
		speed = 1200;
	}else if(speed < -1200){
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	429d      	cmp	r5, r3
 8003e02:	bfb8      	it	lt
 8003e04:	461d      	movlt	r5, r3
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xb8>)
 8003e08:	4798      	blx	r3
 8003e0a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8003e0e:	bfa8      	it	ge
 8003e10:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
	Control<ALL>::enableSpeedControl(false);
 8003e14:	2000      	movs	r0, #0
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xbc>)
 8003e18:	4798      	blx	r3
	Motor<axis>::setSpeed(speed);
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xc0>)
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	4798      	blx	r3
 8003e20:	4620      	mov	r0, r4
 8003e22:	2100      	movs	r1, #0
 8003e24:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	b1bb      	cbz	r3, 8003e5a <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0x82>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003e2a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xc4>)
 8003e30:	bf0c      	ite	eq
 8003e32:	4b1b      	ldreq	r3, [pc, #108]	; (8003ea0 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xc8>)
			}
			else {
				this->writeHex(s);
 8003e34:	4b1b      	ldrne	r3, [pc, #108]	; (8003ea4 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xcc>)
 8003e36:	4798      	blx	r3
	dout << axis << " set pwm to " << speed << endl;
 8003e38:	4f11      	ldr	r7, [pc, #68]	; (8003e80 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xa8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	b183      	cbz	r3, 8003e66 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0x8e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003e44:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003e46:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003e48:	4638      	mov	r0, r7
 8003e4a:	bf0c      	ite	eq
 8003e4c:	4b16      	ldreq	r3, [pc, #88]	; (8003ea8 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xd0>)
			}
			else {
				this->writeHex(v);
 8003e4e:	4b17      	ldrne	r3, [pc, #92]	; (8003eac <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xd4>)
 8003e50:	4798      	blx	r3
	return true;
 8003e52:	2001      	movs	r0, #1
 8003e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
	if(speed == INT_MAX){
		return false;
 8003e56:	2000      	movs	r0, #0
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
	return true;
}
 8003e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	490f      	ldr	r1, [pc, #60]	; (8003e9c <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0xc4>)
 8003e5e:	6803      	ldr	r3, [r0, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4798      	blx	r3
 8003e64:	e7e8      	b.n	8003e38 <_ZN8Handlers13setPwmHandlerIL4Axis0EEEbPKci+0x60>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	6803      	ldr	r3, [r0, #0]
 8003e6a:	210a      	movs	r1, #10
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4798      	blx	r3
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
	return true;
 8003e70:	2001      	movs	r0, #1
 8003e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e74:	08000585 	.word	0x08000585
 8003e78:	0002903f 	.word	0x0002903f
 8003e7c:	08006e49 	.word	0x08006e49
 8003e80:	200013bc 	.word	0x200013bc
 8003e84:	080078f9 	.word	0x080078f9
 8003e88:	20000011 	.word	0x20000011
 8003e8c:	fffffb50 	.word	0xfffffb50
 8003e90:	08000ef9 	.word	0x08000ef9
 8003e94:	08000ecd 	.word	0x08000ecd
 8003e98:	080025ed 	.word	0x080025ed
 8003e9c:	08009550 	.word	0x08009550
 8003ea0:	080079ed 	.word	0x080079ed
 8003ea4:	080079a9 	.word	0x080079a9
 8003ea8:	08007af5 	.word	0x08007af5
 8003eac:	08007ac1 	.word	0x08007ac1

08003eb0 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci>:
	dout << " set speed to " << speed << endl;
	return true;
}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int speed = atoi2(cmd, length, INT_MAX);
 8003eb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0x9c>)
 8003eb8:	4798      	blx	r3
	if(speed == INT_MAX){
 8003eba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003ebe:	4298      	cmp	r0, r3
	return true;
}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
 8003ec0:	4605      	mov	r5, r0
	if(speed == INT_MAX){
 8003ec2:	d034      	beq.n	8003f2e <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0x7e>
		return false;
	}
	xpcc::stm32::SysTickTimer::enable();
 8003ec4:	4822      	ldr	r0, [pc, #136]	; (8003f50 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xa0>)
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xa4>)
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8003ec8:	4c23      	ldr	r4, [pc, #140]	; (8003f58 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xa8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003eca:	4e24      	ldr	r6, [pc, #144]	; (8003f5c <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xac>)
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
	if(speed == INT_MAX){
		return false;
	}
	xpcc::stm32::SysTickTimer::enable();
 8003ecc:	4798      	blx	r3
 8003ece:	2005      	movs	r0, #5
 8003ed0:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xb0>)
 8003ed2:	4798      	blx	r3
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xb4>)
	if(speed > 1200){
		speed = 1200;
	}else if(speed < -1200){
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	bfb8      	it	lt
 8003edc:	461d      	movlt	r5, r3
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xb8>)
 8003ee0:	4798      	blx	r3
 8003ee2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8003ee6:	bfa8      	it	ge
 8003ee8:	f44f 6596 	movge.w	r5, #1200	; 0x4b0
	Control<ALL>::enableSpeedControl(false);
 8003eec:	2000      	movs	r0, #0
 8003eee:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xbc>)
 8003ef0:	4798      	blx	r3
	Motor<axis>::setSpeed(speed);
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xc0>)
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	4798      	blx	r3
 8003ef8:	4620      	mov	r0, r4
 8003efa:	2102      	movs	r1, #2
 8003efc:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	b1bb      	cbz	r3, 8003f32 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0x82>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8003f02:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8003f04:	4620      	mov	r0, r4
 8003f06:	491b      	ldr	r1, [pc, #108]	; (8003f74 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xc4>)
 8003f08:	bf0c      	ite	eq
 8003f0a:	4b1b      	ldreq	r3, [pc, #108]	; (8003f78 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xc8>)
			}
			else {
				this->writeHex(s);
 8003f0c:	4b1b      	ldrne	r3, [pc, #108]	; (8003f7c <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xcc>)
 8003f0e:	4798      	blx	r3
	dout << axis << " set pwm to " << speed << endl;
 8003f10:	4f11      	ldr	r7, [pc, #68]	; (8003f58 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xa8>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8003f12:	4629      	mov	r1, r5
 8003f14:	4638      	mov	r0, r7
 8003f16:	47b0      	blx	r6
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	b183      	cbz	r3, 8003f3e <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0x8e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8003f1c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8003f1e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8003f20:	4638      	mov	r0, r7
 8003f22:	bf0c      	ite	eq
 8003f24:	4b16      	ldreq	r3, [pc, #88]	; (8003f80 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xd0>)
			}
			else {
				this->writeHex(v);
 8003f26:	4b17      	ldrne	r3, [pc, #92]	; (8003f84 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xd4>)
 8003f28:	4798      	blx	r3
	return true;
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

template<Axis axis>
static bool setPwmHandler(const char* cmd, int length){
	int speed = atoi2(cmd, length, INT_MAX);
	if(speed == INT_MAX){
		return false;
 8003f2e:	2000      	movs	r0, #0
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
	return true;
}
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	490f      	ldr	r1, [pc, #60]	; (8003f74 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0xc4>)
 8003f36:	6803      	ldr	r3, [r0, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4798      	blx	r3
 8003f3c:	e7e8      	b.n	8003f10 <_ZN8Handlers13setPwmHandlerIL4Axis2EEEbPKci+0x60>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	6803      	ldr	r3, [r0, #0]
 8003f42:	210a      	movs	r1, #10
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4798      	blx	r3
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
	return true;
 8003f48:	2001      	movs	r0, #1
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f4c:	08000585 	.word	0x08000585
 8003f50:	0002903f 	.word	0x0002903f
 8003f54:	08006e49 	.word	0x08006e49
 8003f58:	200013bc 	.word	0x200013bc
 8003f5c:	080078f9 	.word	0x080078f9
 8003f60:	20000011 	.word	0x20000011
 8003f64:	fffffb50 	.word	0xfffffb50
 8003f68:	08000ef9 	.word	0x08000ef9
 8003f6c:	08000ecd 	.word	0x08000ecd
 8003f70:	08002629 	.word	0x08002629
 8003f74:	08009550 	.word	0x08009550
 8003f78:	080079ed 	.word	0x080079ed
 8003f7c:	080079a9 	.word	0x080079a9
 8003f80:	08007af5 	.word	0x08007af5
 8003f84:	08007ac1 	.word	0x08007ac1

08003f88 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 8003f8e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8003f92:	b17b      	cbz	r3, 8003fb4 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8003f94:	4c33      	ldr	r4, [pc, #204]	; (8004064 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xdc>)
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	f240 1129 	movw	r1, #297	; 0x129
 8003f9c:	428a      	cmp	r2, r1
 8003f9e:	d00b      	beq.n	8003fb8 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 8003fa0:	2b0a      	cmp	r3, #10
 8003fa2:	d034      	beq.n	800400e <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x86>
			flush();
			return;
		}

		text[pos++] = c;
 8003fa4:	4830      	ldr	r0, [pc, #192]	; (8004068 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe0>)
 8003fa6:	1c51      	adds	r1, r2, #1
 8003fa8:	5483      	strb	r3, [r0, r2]
 8003faa:	6021      	str	r1, [r4, #0]
 8003fac:	f817 3b01 	ldrb.w	r3, [r7], #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ef      	bne.n	8003f94 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8003fb8:	4d2b      	ldr	r5, [pc, #172]	; (8004068 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe0>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8003fba:	4e2c      	ldr	r6, [pc, #176]	; (800406c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe4>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8003fbc:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8003fc0:	204d      	movs	r0, #77	; 0x4d
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8003fc2:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8003fc6:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8003fc8:	47b0      	blx	r6
     * @param specifier the specifier of the message
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
 8003fca:	6821      	ldr	r1, [r4, #0]
 8003fcc:	1869      	adds	r1, r5, r1
		while(data != pEnd){
 8003fce:	42a9      	cmp	r1, r5
 8003fd0:	d043      	beq.n	800405a <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xd2>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	462b      	mov	r3, r5
			checksum ^= *data;
 8003fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 8003fda:	4299      	cmp	r1, r3
			checksum ^= *data;
 8003fdc:	ea80 0002 	eor.w	r0, r0, r2
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 8003fe0:	d1f9      	bne.n	8003fd6 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x4e>
 8003fe2:	f080 004d 	eor.w	r0, r0, #77	; 0x4d
 8003fe6:	b2c0      	uxtb	r0, r0
}

template<char prefix, bool useChecksum, bool enable, int TEXT_BUFFER_SIZE>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::calcChecksum(){
	char check = Checksum::getFor(text, pos, prefix);
	uart.write(check);
 8003fe8:	47b0      	blx	r6

	uart.write(prefix);
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8003fea:	202c      	movs	r0, #44	; 0x2c
 8003fec:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8003ff4:	45a8      	cmp	r8, r5
 8003ff6:	d005      	beq.n	8004004 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x7c>
 8003ff8:	4d1b      	ldr	r5, [pc, #108]	; (8004068 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe0>)
		uart.write(*ptr);
 8003ffa:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003ffe:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004000:	45a8      	cmp	r8, r5
 8004002:	d1fa      	bne.n	8003ffa <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x72>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004004:	200a      	movs	r0, #10
 8004006:	47b0      	blx	r6

	pos = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	e7bf      	b.n	8003f8e <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800400e:	204d      	movs	r0, #77	; 0x4d
 8004010:	4e16      	ldr	r6, [pc, #88]	; (800406c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe4>)
     * @param specifier the specifier of the message
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
 8004012:	4d15      	ldr	r5, [pc, #84]	; (8004068 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe0>)
 8004014:	47b0      	blx	r6
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	1869      	adds	r1, r5, r1
		while(data != pEnd){
 800401a:	42a9      	cmp	r1, r5
 800401c:	d01f      	beq.n	800405e <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xd6>
 800401e:	2000      	movs	r0, #0
 8004020:	462b      	mov	r3, r5
			checksum ^= *data;
 8004022:	f813 2b01 	ldrb.w	r2, [r3], #1
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 8004026:	4299      	cmp	r1, r3
			checksum ^= *data;
 8004028:	ea80 0002 	eor.w	r0, r0, r2
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 800402c:	d1f9      	bne.n	8004022 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x9a>
 800402e:	f080 004d 	eor.w	r0, r0, #77	; 0x4d
 8004032:	b2c0      	uxtb	r0, r0
}

template<char prefix, bool useChecksum, bool enable, int TEXT_BUFFER_SIZE>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::calcChecksum(){
	char check = Checksum::getFor(text, pos, prefix);
	uart.write(check);
 8004034:	47b0      	blx	r6

	uart.write(prefix);
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004036:	202c      	movs	r0, #44	; 0x2c
 8004038:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004040:	45a8      	cmp	r8, r5
 8004042:	d0df      	beq.n	8004004 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x7c>
 8004044:	4d08      	ldr	r5, [pc, #32]	; (8004068 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xe0>)
		uart.write(*ptr);
 8004046:	f815 0b01 	ldrb.w	r0, [r5], #1
 800404a:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 800404c:	45a8      	cmp	r8, r5
 800404e:	d1fa      	bne.n	8004046 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xbe>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004050:	200a      	movs	r0, #10
 8004052:	47b0      	blx	r6

	pos = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	e799      	b.n	8003f8e <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x6>
 800405a:	204d      	movs	r0, #77	; 0x4d
 800405c:	e7c4      	b.n	8003fe8 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0x60>
 800405e:	204d      	movs	r0, #77	; 0x4d
 8004060:	e7e8      	b.n	8004034 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEPKc+0xac>
 8004062:	bf00      	nop
 8004064:	20000f1c 	.word	0x20000f1c
 8004068:	20000f20 	.word	0x20000f20
 800406c:	08007359 	.word	0x08007359

08004070 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004072:	4c1b      	ldr	r4, [pc, #108]	; (80040e0 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x70>)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f240 1229 	movw	r2, #297	; 0x129
 800407a:	4293      	cmp	r3, r2
 800407c:	d006      	beq.n	800408c <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 800407e:	290a      	cmp	r1, #10
 8004080:	d01d      	beq.n	80040be <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 8004082:	4818      	ldr	r0, [pc, #96]	; (80040e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x74>)
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	54c1      	strb	r1, [r0, r3]
 8004088:	6022      	str	r2, [r4, #0]
 800408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800408c:	4d15      	ldr	r5, [pc, #84]	; (80040e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800408e:	4e16      	ldr	r6, [pc, #88]	; (80040e8 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004090:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004094:	2044      	movs	r0, #68	; 0x44
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004096:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800409a:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800409c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800409e:	202c      	movs	r0, #44	; 0x2c
 80040a0:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80040a2:	6827      	ldr	r7, [r4, #0]
 80040a4:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80040a6:	42af      	cmp	r7, r5
 80040a8:	d004      	beq.n	80040b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80040aa:	f815 0b01 	ldrb.w	r0, [r5], #1
 80040ae:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80040b0:	42af      	cmp	r7, r5
 80040b2:	d1fa      	bne.n	80040aa <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80040b4:	200a      	movs	r0, #10
 80040b6:	47b0      	blx	r6

	pos = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80040be:	2044      	movs	r0, #68	; 0x44
 80040c0:	4e09      	ldr	r6, [pc, #36]	; (80040e8 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80040c2:	4d08      	ldr	r5, [pc, #32]	; (80040e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80040c4:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80040c6:	202c      	movs	r0, #44	; 0x2c
 80040c8:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80040ca:	6827      	ldr	r7, [r4, #0]
 80040cc:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80040ce:	42af      	cmp	r7, r5
 80040d0:	d0f0      	beq.n	80040b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80040d2:	f815 0b01 	ldrb.w	r0, [r5], #1
 80040d6:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80040d8:	42af      	cmp	r7, r5
 80040da:	d1fa      	bne.n	80040d2 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x62>
 80040dc:	e7ea      	b.n	80040b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEc+0x44>
 80040de:	bf00      	nop
 80040e0:	20000dec 	.word	0x20000dec
 80040e4:	20000df0 	.word	0x20000df0
 80040e8:	08007359 	.word	0x08007359

080040ec <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 80040f2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80040f6:	b17b      	cbz	r3, 8004118 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 80040f8:	4c20      	ldr	r4, [pc, #128]	; (800417c <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	f240 1129 	movw	r1, #297	; 0x129
 8004100:	428a      	cmp	r2, r1
 8004102:	d00b      	beq.n	800411c <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 8004104:	2b0a      	cmp	r3, #10
 8004106:	d023      	beq.n	8004150 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004108:	481d      	ldr	r0, [pc, #116]	; (8004180 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 800410a:	1c51      	adds	r1, r2, #1
 800410c:	5483      	strb	r3, [r0, r2]
 800410e:	6021      	str	r1, [r4, #0]
 8004110:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ef      	bne.n	80040f8 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800411c:	4d18      	ldr	r5, [pc, #96]	; (8004180 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800411e:	4e19      	ldr	r6, [pc, #100]	; (8004184 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004120:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004124:	2044      	movs	r0, #68	; 0x44
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004126:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800412a:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800412c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800412e:	202c      	movs	r0, #44	; 0x2c
 8004130:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004138:	45a8      	cmp	r8, r5
 800413a:	d004      	beq.n	8004146 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 800413c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004140:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004142:	45a8      	cmp	r8, r5
 8004144:	d1fa      	bne.n	800413c <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004146:	200a      	movs	r0, #10
 8004148:	47b0      	blx	r6

	pos = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	e7d0      	b.n	80040f2 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004150:	2044      	movs	r0, #68	; 0x44
 8004152:	4e0c      	ldr	r6, [pc, #48]	; (8004184 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004154:	4d0a      	ldr	r5, [pc, #40]	; (8004180 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004156:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004158:	202c      	movs	r0, #44	; 0x2c
 800415a:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004162:	45a8      	cmp	r8, r5
 8004164:	d0ef      	beq.n	8004146 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 8004166:	f815 0b01 	ldrb.w	r0, [r5], #1
 800416a:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 800416c:	45a8      	cmp	r8, r5
 800416e:	d1fa      	bne.n	8004166 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004170:	200a      	movs	r0, #10
 8004172:	47b0      	blx	r6

	pos = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	e7bb      	b.n	80040f2 <_ZN4xpcc15IODeviceWrapperI6StreamILc68ELb0ELb1ELi300EEE5writeEPKc+0x6>
 800417a:	bf00      	nop
 800417c:	20000dec 	.word	0x20000dec
 8004180:	20000df0 	.word	0x20000df0
 8004184:	08007359 	.word	0x08007359

08004188 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 800418a:	4c1b      	ldr	r4, [pc, #108]	; (80041f8 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x70>)
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	f240 1229 	movw	r2, #297	; 0x129
 8004192:	4293      	cmp	r3, r2
 8004194:	d006      	beq.n	80041a4 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 8004196:	290a      	cmp	r1, #10
 8004198:	d01d      	beq.n	80041d6 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 800419a:	4818      	ldr	r0, [pc, #96]	; (80041fc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x74>)
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	54c1      	strb	r1, [r0, r3]
 80041a0:	6022      	str	r2, [r4, #0]
 80041a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80041a4:	4d15      	ldr	r5, [pc, #84]	; (80041fc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80041a6:	4e16      	ldr	r6, [pc, #88]	; (8004200 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80041a8:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80041ac:	204b      	movs	r0, #75	; 0x4b
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80041ae:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80041b2:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80041b4:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80041b6:	202c      	movs	r0, #44	; 0x2c
 80041b8:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80041ba:	6827      	ldr	r7, [r4, #0]
 80041bc:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80041be:	42af      	cmp	r7, r5
 80041c0:	d004      	beq.n	80041cc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80041c2:	f815 0b01 	ldrb.w	r0, [r5], #1
 80041c6:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80041c8:	42af      	cmp	r7, r5
 80041ca:	d1fa      	bne.n	80041c2 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80041cc:	200a      	movs	r0, #10
 80041ce:	47b0      	blx	r6

	pos = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80041d6:	204b      	movs	r0, #75	; 0x4b
 80041d8:	4e09      	ldr	r6, [pc, #36]	; (8004200 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80041da:	4d08      	ldr	r5, [pc, #32]	; (80041fc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80041dc:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80041de:	202c      	movs	r0, #44	; 0x2c
 80041e0:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80041e2:	6827      	ldr	r7, [r4, #0]
 80041e4:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80041e6:	42af      	cmp	r7, r5
 80041e8:	d0f0      	beq.n	80041cc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80041ea:	f815 0b01 	ldrb.w	r0, [r5], #1
 80041ee:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80041f0:	42af      	cmp	r7, r5
 80041f2:	d1fa      	bne.n	80041ea <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x62>
 80041f4:	e7ea      	b.n	80041cc <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEc+0x44>
 80041f6:	bf00      	nop
 80041f8:	2000092c 	.word	0x2000092c
 80041fc:	20000930 	.word	0x20000930
 8004200:	08007359 	.word	0x08007359

08004204 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 8004204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004208:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 800420a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800420e:	b17b      	cbz	r3, 8004230 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004210:	4c20      	ldr	r4, [pc, #128]	; (8004294 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	f240 1129 	movw	r1, #297	; 0x129
 8004218:	428a      	cmp	r2, r1
 800421a:	d00b      	beq.n	8004234 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 800421c:	2b0a      	cmp	r3, #10
 800421e:	d023      	beq.n	8004268 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004220:	481d      	ldr	r0, [pc, #116]	; (8004298 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 8004222:	1c51      	adds	r1, r2, #1
 8004224:	5483      	strb	r3, [r0, r2]
 8004226:	6021      	str	r1, [r4, #0]
 8004228:	f817 3b01 	ldrb.w	r3, [r7], #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ef      	bne.n	8004210 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004234:	4d18      	ldr	r5, [pc, #96]	; (8004298 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004236:	4e19      	ldr	r6, [pc, #100]	; (800429c <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004238:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800423c:	204b      	movs	r0, #75	; 0x4b
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800423e:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8004242:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004244:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004246:	202c      	movs	r0, #44	; 0x2c
 8004248:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004250:	45a8      	cmp	r8, r5
 8004252:	d004      	beq.n	800425e <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 8004254:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004258:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 800425a:	45a8      	cmp	r8, r5
 800425c:	d1fa      	bne.n	8004254 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 800425e:	200a      	movs	r0, #10
 8004260:	47b0      	blx	r6

	pos = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	e7d0      	b.n	800420a <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004268:	204b      	movs	r0, #75	; 0x4b
 800426a:	4e0c      	ldr	r6, [pc, #48]	; (800429c <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800426c:	4d0a      	ldr	r5, [pc, #40]	; (8004298 <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800426e:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004270:	202c      	movs	r0, #44	; 0x2c
 8004272:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 800427a:	45a8      	cmp	r8, r5
 800427c:	d0ef      	beq.n	800425e <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 800427e:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004282:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004284:	45a8      	cmp	r8, r5
 8004286:	d1fa      	bne.n	800427e <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004288:	200a      	movs	r0, #10
 800428a:	47b0      	blx	r6

	pos = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	e7bb      	b.n	800420a <_ZN4xpcc15IODeviceWrapperI6StreamILc75ELb0ELb1ELi300EEE5writeEPKc+0x6>
 8004292:	bf00      	nop
 8004294:	2000092c 	.word	0x2000092c
 8004298:	20000930 	.word	0x20000930
 800429c:	08007359 	.word	0x08007359

080042a0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 80042a2:	4c1b      	ldr	r4, [pc, #108]	; (8004310 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x70>)
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f240 1229 	movw	r2, #297	; 0x129
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d006      	beq.n	80042bc <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 80042ae:	290a      	cmp	r1, #10
 80042b0:	d01d      	beq.n	80042ee <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 80042b2:	4818      	ldr	r0, [pc, #96]	; (8004314 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x74>)
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	54c1      	strb	r1, [r0, r3]
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80042bc:	4d15      	ldr	r5, [pc, #84]	; (8004314 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80042be:	4e16      	ldr	r6, [pc, #88]	; (8004318 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80042c0:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80042c4:	2043      	movs	r0, #67	; 0x43
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80042c6:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80042ca:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80042cc:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80042ce:	202c      	movs	r0, #44	; 0x2c
 80042d0:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80042d2:	6827      	ldr	r7, [r4, #0]
 80042d4:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80042d6:	42af      	cmp	r7, r5
 80042d8:	d004      	beq.n	80042e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80042da:	f815 0b01 	ldrb.w	r0, [r5], #1
 80042de:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80042e0:	42af      	cmp	r7, r5
 80042e2:	d1fa      	bne.n	80042da <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80042e4:	200a      	movs	r0, #10
 80042e6:	47b0      	blx	r6

	pos = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80042ee:	2043      	movs	r0, #67	; 0x43
 80042f0:	4e09      	ldr	r6, [pc, #36]	; (8004318 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80042f2:	4d08      	ldr	r5, [pc, #32]	; (8004314 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80042f4:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80042f6:	202c      	movs	r0, #44	; 0x2c
 80042f8:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80042fa:	6827      	ldr	r7, [r4, #0]
 80042fc:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80042fe:	42af      	cmp	r7, r5
 8004300:	d0f0      	beq.n	80042e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 8004302:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004306:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004308:	42af      	cmp	r7, r5
 800430a:	d1fa      	bne.n	8004302 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x62>
 800430c:	e7ea      	b.n	80042e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEc+0x44>
 800430e:	bf00      	nop
 8004310:	20000a5c 	.word	0x20000a5c
 8004314:	20000a60 	.word	0x20000a60
 8004318:	08007359 	.word	0x08007359

0800431c <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 8004322:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004326:	b17b      	cbz	r3, 8004348 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004328:	4c20      	ldr	r4, [pc, #128]	; (80043ac <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	f240 1129 	movw	r1, #297	; 0x129
 8004330:	428a      	cmp	r2, r1
 8004332:	d00b      	beq.n	800434c <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 8004334:	2b0a      	cmp	r3, #10
 8004336:	d023      	beq.n	8004380 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004338:	481d      	ldr	r0, [pc, #116]	; (80043b0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 800433a:	1c51      	adds	r1, r2, #1
 800433c:	5483      	strb	r3, [r0, r2]
 800433e:	6021      	str	r1, [r4, #0]
 8004340:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ef      	bne.n	8004328 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800434c:	4d18      	ldr	r5, [pc, #96]	; (80043b0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800434e:	4e19      	ldr	r6, [pc, #100]	; (80043b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004350:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004354:	2043      	movs	r0, #67	; 0x43
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004356:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800435a:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800435c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004368:	45a8      	cmp	r8, r5
 800436a:	d004      	beq.n	8004376 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 800436c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004370:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004372:	45a8      	cmp	r8, r5
 8004374:	d1fa      	bne.n	800436c <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004376:	200a      	movs	r0, #10
 8004378:	47b0      	blx	r6

	pos = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	e7d0      	b.n	8004322 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004380:	2043      	movs	r0, #67	; 0x43
 8004382:	4e0c      	ldr	r6, [pc, #48]	; (80043b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004384:	4d0a      	ldr	r5, [pc, #40]	; (80043b0 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004386:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004388:	202c      	movs	r0, #44	; 0x2c
 800438a:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004392:	45a8      	cmp	r8, r5
 8004394:	d0ef      	beq.n	8004376 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 8004396:	f815 0b01 	ldrb.w	r0, [r5], #1
 800439a:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 800439c:	45a8      	cmp	r8, r5
 800439e:	d1fa      	bne.n	8004396 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80043a0:	200a      	movs	r0, #10
 80043a2:	47b0      	blx	r6

	pos = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	e7bb      	b.n	8004322 <_ZN4xpcc15IODeviceWrapperI6StreamILc67ELb0ELb1ELi300EEE5writeEPKc+0x6>
 80043aa:	bf00      	nop
 80043ac:	20000a5c 	.word	0x20000a5c
 80043b0:	20000a60 	.word	0x20000a60
 80043b4:	08007359 	.word	0x08007359

080043b8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 80043ba:	4c1b      	ldr	r4, [pc, #108]	; (8004428 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x70>)
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	f240 1229 	movw	r2, #297	; 0x129
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d006      	beq.n	80043d4 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 80043c6:	290a      	cmp	r1, #10
 80043c8:	d01d      	beq.n	8004406 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 80043ca:	4818      	ldr	r0, [pc, #96]	; (800442c <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x74>)
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	54c1      	strb	r1, [r0, r3]
 80043d0:	6022      	str	r2, [r4, #0]
 80043d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80043d4:	4d15      	ldr	r5, [pc, #84]	; (800442c <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80043d6:	4e16      	ldr	r6, [pc, #88]	; (8004430 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80043d8:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80043dc:	2049      	movs	r0, #73	; 0x49
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80043de:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80043e2:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80043e4:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80043ea:	6827      	ldr	r7, [r4, #0]
 80043ec:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80043ee:	42af      	cmp	r7, r5
 80043f0:	d004      	beq.n	80043fc <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 80043f2:	f815 0b01 	ldrb.w	r0, [r5], #1
 80043f6:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80043f8:	42af      	cmp	r7, r5
 80043fa:	d1fa      	bne.n	80043f2 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80043fc:	200a      	movs	r0, #10
 80043fe:	47b0      	blx	r6

	pos = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004406:	2049      	movs	r0, #73	; 0x49
 8004408:	4e09      	ldr	r6, [pc, #36]	; (8004430 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800440a:	4d08      	ldr	r5, [pc, #32]	; (800442c <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800440c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800440e:	202c      	movs	r0, #44	; 0x2c
 8004410:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004412:	6827      	ldr	r7, [r4, #0]
 8004414:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 8004416:	42af      	cmp	r7, r5
 8004418:	d0f0      	beq.n	80043fc <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 800441a:	f815 0b01 	ldrb.w	r0, [r5], #1
 800441e:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004420:	42af      	cmp	r7, r5
 8004422:	d1fa      	bne.n	800441a <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x62>
 8004424:	e7ea      	b.n	80043fc <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEc+0x44>
 8004426:	bf00      	nop
 8004428:	20000b8c 	.word	0x20000b8c
 800442c:	20000b90 	.word	0x20000b90
 8004430:	08007359 	.word	0x08007359

08004434 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 8004434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 800443a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800443e:	b17b      	cbz	r3, 8004460 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004440:	4c20      	ldr	r4, [pc, #128]	; (80044c4 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	f240 1129 	movw	r1, #297	; 0x129
 8004448:	428a      	cmp	r2, r1
 800444a:	d00b      	beq.n	8004464 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 800444c:	2b0a      	cmp	r3, #10
 800444e:	d023      	beq.n	8004498 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004450:	481d      	ldr	r0, [pc, #116]	; (80044c8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 8004452:	1c51      	adds	r1, r2, #1
 8004454:	5483      	strb	r3, [r0, r2]
 8004456:	6021      	str	r1, [r4, #0]
 8004458:	f817 3b01 	ldrb.w	r3, [r7], #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004464:	4d18      	ldr	r5, [pc, #96]	; (80044c8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004466:	4e19      	ldr	r6, [pc, #100]	; (80044cc <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004468:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800446c:	2049      	movs	r0, #73	; 0x49
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800446e:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8004472:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004474:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004476:	202c      	movs	r0, #44	; 0x2c
 8004478:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004480:	45a8      	cmp	r8, r5
 8004482:	d004      	beq.n	800448e <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 8004484:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004488:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 800448a:	45a8      	cmp	r8, r5
 800448c:	d1fa      	bne.n	8004484 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 800448e:	200a      	movs	r0, #10
 8004490:	47b0      	blx	r6

	pos = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	e7d0      	b.n	800443a <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004498:	2049      	movs	r0, #73	; 0x49
 800449a:	4e0c      	ldr	r6, [pc, #48]	; (80044cc <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800449c:	4d0a      	ldr	r5, [pc, #40]	; (80044c8 <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800449e:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80044a0:	202c      	movs	r0, #44	; 0x2c
 80044a2:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 80044aa:	45a8      	cmp	r8, r5
 80044ac:	d0ef      	beq.n	800448e <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 80044ae:	f815 0b01 	ldrb.w	r0, [r5], #1
 80044b2:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80044b4:	45a8      	cmp	r8, r5
 80044b6:	d1fa      	bne.n	80044ae <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80044b8:	200a      	movs	r0, #10
 80044ba:	47b0      	blx	r6

	pos = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	e7bb      	b.n	800443a <_ZN4xpcc15IODeviceWrapperI6StreamILc73ELb0ELb1ELi300EEE5writeEPKc+0x6>
 80044c2:	bf00      	nop
 80044c4:	20000b8c 	.word	0x20000b8c
 80044c8:	20000b90 	.word	0x20000b90
 80044cc:	08007359 	.word	0x08007359

080044d0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 80044d2:	4c1b      	ldr	r4, [pc, #108]	; (8004540 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x70>)
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f240 1229 	movw	r2, #297	; 0x129
 80044da:	4293      	cmp	r3, r2
 80044dc:	d006      	beq.n	80044ec <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 80044de:	290a      	cmp	r1, #10
 80044e0:	d01d      	beq.n	800451e <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 80044e2:	4818      	ldr	r0, [pc, #96]	; (8004544 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x74>)
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	54c1      	strb	r1, [r0, r3]
 80044e8:	6022      	str	r2, [r4, #0]
 80044ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80044ec:	4d15      	ldr	r5, [pc, #84]	; (8004544 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80044ee:	4e16      	ldr	r6, [pc, #88]	; (8004548 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80044f0:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80044f4:	2045      	movs	r0, #69	; 0x45
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 80044f6:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80044fa:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80044fc:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80044fe:	202c      	movs	r0, #44	; 0x2c
 8004500:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004502:	6827      	ldr	r7, [r4, #0]
 8004504:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 8004506:	42af      	cmp	r7, r5
 8004508:	d004      	beq.n	8004514 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 800450a:	f815 0b01 	ldrb.w	r0, [r5], #1
 800450e:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004510:	42af      	cmp	r7, r5
 8004512:	d1fa      	bne.n	800450a <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004514:	200a      	movs	r0, #10
 8004516:	47b0      	blx	r6

	pos = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800451e:	2045      	movs	r0, #69	; 0x45
 8004520:	4e09      	ldr	r6, [pc, #36]	; (8004548 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004522:	4d08      	ldr	r5, [pc, #32]	; (8004544 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004524:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004526:	202c      	movs	r0, #44	; 0x2c
 8004528:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800452a:	6827      	ldr	r7, [r4, #0]
 800452c:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 800452e:	42af      	cmp	r7, r5
 8004530:	d0f0      	beq.n	8004514 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 8004532:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004536:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004538:	42af      	cmp	r7, r5
 800453a:	d1fa      	bne.n	8004532 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x62>
 800453c:	e7ea      	b.n	8004514 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEc+0x44>
 800453e:	bf00      	nop
 8004540:	20000cbc 	.word	0x20000cbc
 8004544:	20000cc0 	.word	0x20000cc0
 8004548:	08007359 	.word	0x08007359

0800454c <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 800454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004550:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 8004552:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004556:	b17b      	cbz	r3, 8004578 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004558:	4c20      	ldr	r4, [pc, #128]	; (80045dc <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	f240 1129 	movw	r1, #297	; 0x129
 8004560:	428a      	cmp	r2, r1
 8004562:	d00b      	beq.n	800457c <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 8004564:	2b0a      	cmp	r3, #10
 8004566:	d023      	beq.n	80045b0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004568:	481d      	ldr	r0, [pc, #116]	; (80045e0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 800456a:	1c51      	adds	r1, r2, #1
 800456c:	5483      	strb	r3, [r0, r2]
 800456e:	6021      	str	r1, [r4, #0]
 8004570:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ef      	bne.n	8004558 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800457c:	4d18      	ldr	r5, [pc, #96]	; (80045e0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800457e:	4e19      	ldr	r6, [pc, #100]	; (80045e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004580:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004584:	2045      	movs	r0, #69	; 0x45
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004586:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800458a:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800458c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800458e:	202c      	movs	r0, #44	; 0x2c
 8004590:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 8004598:	45a8      	cmp	r8, r5
 800459a:	d004      	beq.n	80045a6 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 800459c:	f815 0b01 	ldrb.w	r0, [r5], #1
 80045a0:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80045a2:	45a8      	cmp	r8, r5
 80045a4:	d1fa      	bne.n	800459c <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80045a6:	200a      	movs	r0, #10
 80045a8:	47b0      	blx	r6

	pos = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	e7d0      	b.n	8004552 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80045b0:	2045      	movs	r0, #69	; 0x45
 80045b2:	4e0c      	ldr	r6, [pc, #48]	; (80045e4 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80045b4:	4d0a      	ldr	r5, [pc, #40]	; (80045e0 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80045b6:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80045b8:	202c      	movs	r0, #44	; 0x2c
 80045ba:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 80045c2:	45a8      	cmp	r8, r5
 80045c4:	d0ef      	beq.n	80045a6 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 80045c6:	f815 0b01 	ldrb.w	r0, [r5], #1
 80045ca:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80045cc:	45a8      	cmp	r8, r5
 80045ce:	d1fa      	bne.n	80045c6 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80045d0:	200a      	movs	r0, #10
 80045d2:	47b0      	blx	r6

	pos = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	e7bb      	b.n	8004552 <_ZN4xpcc15IODeviceWrapperI6StreamILc69ELb0ELb1ELi300EEE5writeEPKc+0x6>
 80045da:	bf00      	nop
 80045dc:	20000cbc 	.word	0x20000cbc
 80045e0:	20000cc0 	.word	0x20000cc0
 80045e4:	08007359 	.word	0x08007359

080045e8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 80045ea:	4c1b      	ldr	r4, [pc, #108]	; (8004658 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x70>)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f240 1229 	movw	r2, #297	; 0x129
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d006      	beq.n	8004604 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 80045f6:	290a      	cmp	r1, #10
 80045f8:	d01d      	beq.n	8004636 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x4e>
			flush();
			return;
		}

		text[pos++] = c;
 80045fa:	4818      	ldr	r0, [pc, #96]	; (800465c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x74>)
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	54c1      	strb	r1, [r0, r3]
 8004600:	6022      	str	r2, [r4, #0]
 8004602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004604:	4d15      	ldr	r5, [pc, #84]	; (800465c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004606:	4e16      	ldr	r6, [pc, #88]	; (8004660 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x78>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004608:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800460c:	2050      	movs	r0, #80	; 0x50
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800460e:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8004612:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004614:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004616:	202c      	movs	r0, #44	; 0x2c
 8004618:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800461a:	6827      	ldr	r7, [r4, #0]
 800461c:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 800461e:	42af      	cmp	r7, r5
 8004620:	d004      	beq.n	800462c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 8004622:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004626:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004628:	42af      	cmp	r7, r5
 800462a:	d1fa      	bne.n	8004622 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x3a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 800462c:	200a      	movs	r0, #10
 800462e:	47b0      	blx	r6

	pos = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004636:	2050      	movs	r0, #80	; 0x50
 8004638:	4e09      	ldr	r6, [pc, #36]	; (8004660 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x78>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800463a:	4d08      	ldr	r5, [pc, #32]	; (800465c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x74>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800463c:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800463e:	202c      	movs	r0, #44	; 0x2c
 8004640:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004642:	6827      	ldr	r7, [r4, #0]
 8004644:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 8004646:	42af      	cmp	r7, r5
 8004648:	d0f0      	beq.n	800462c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x44>
		uart.write(*ptr);
 800464a:	f815 0b01 	ldrb.w	r0, [r5], #1
 800464e:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004650:	42af      	cmp	r7, r5
 8004652:	d1fa      	bne.n	800464a <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x62>
 8004654:	e7ea      	b.n	800462c <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEc+0x44>
 8004656:	bf00      	nop
 8004658:	2000104c 	.word	0x2000104c
 800465c:	20001050 	.word	0x20001050
 8004660:	08007359 	.word	0x08007359

08004664 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc>:
		{
			T::write(c);
		}
		
		virtual void
		write(const char *s)
 8004664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004668:	460f      	mov	r7, r1
		{
			char c;
			while ((c = *s++)) {
 800466a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800466e:	b17b      	cbz	r3, 8004690 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x2c>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004670:	4c20      	ldr	r4, [pc, #128]	; (80046f4 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x90>)
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	f240 1129 	movw	r1, #297	; 0x129
 8004678:	428a      	cmp	r2, r1
 800467a:	d00b      	beq.n	8004694 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x30>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 800467c:	2b0a      	cmp	r3, #10
 800467e:	d023      	beq.n	80046c8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x64>
			flush();
			return;
		}

		text[pos++] = c;
 8004680:	481d      	ldr	r0, [pc, #116]	; (80046f8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x94>)
 8004682:	1c51      	adds	r1, r2, #1
 8004684:	5483      	strb	r3, [r0, r2]
 8004686:	6021      	str	r1, [r4, #0]
 8004688:	f817 3b01 	ldrb.w	r3, [r7], #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ef      	bne.n	8004670 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0xc>
				T::write(static_cast<uint8_t>(c));
			}
		}
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004694:	4d18      	ldr	r5, [pc, #96]	; (80046f8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004696:	4e19      	ldr	r6, [pc, #100]	; (80046fc <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x98>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004698:	f885 3129 	strb.w	r3, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800469c:	2050      	movs	r0, #80	; 0x50
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800469e:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80046a2:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80046a4:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80046a6:	202c      	movs	r0, #44	; 0x2c
 80046a8:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 80046b0:	45a8      	cmp	r8, r5
 80046b2:	d004      	beq.n	80046be <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 80046b4:	f815 0b01 	ldrb.w	r0, [r5], #1
 80046b8:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80046ba:	45a8      	cmp	r8, r5
 80046bc:	d1fa      	bne.n	80046b4 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x50>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80046be:	200a      	movs	r0, #10
 80046c0:	47b0      	blx	r6

	pos = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	e7d0      	b.n	800466a <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x6>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80046c8:	2050      	movs	r0, #80	; 0x50
 80046ca:	4e0c      	ldr	r6, [pc, #48]	; (80046fc <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x98>)
		calcChecksum();
	}
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80046cc:	4d0a      	ldr	r5, [pc, #40]	; (80046f8 <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x94>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 80046ce:	47b0      	blx	r6
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 80046d0:	202c      	movs	r0, #44	; 0x2c
 80046d2:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	eb05 0803 	add.w	r8, r5, r3

	while(ptr != end){
 80046da:	45a8      	cmp	r8, r5
 80046dc:	d0ef      	beq.n	80046be <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x5a>
		uart.write(*ptr);
 80046de:	f815 0b01 	ldrb.w	r0, [r5], #1
 80046e2:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80046e4:	45a8      	cmp	r8, r5
 80046e6:	d1fa      	bne.n	80046de <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x7a>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 80046e8:	200a      	movs	r0, #10
 80046ea:	47b0      	blx	r6

	pos = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	e7bb      	b.n	800466a <_ZN4xpcc15IODeviceWrapperI6StreamILc80ELb0ELb1ELi300EEE5writeEPKc+0x6>
 80046f2:	bf00      	nop
 80046f4:	2000104c 	.word	0x2000104c
 80046f8:	20001050 	.word	0x20001050
 80046fc:	08007359 	.word	0x08007359

08004700 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc>:
		IODeviceWrapper()
		{
		}
		
		virtual void
		write(char c)
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::write(char c){
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
 8004702:	4c2e      	ldr	r4, [pc, #184]	; (80047bc <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xbc>)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	f240 1229 	movw	r2, #297	; 0x129
 800470a:	4293      	cmp	r3, r2
 800470c:	d006      	beq.n	800471c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x1c>
			//text[pos+1] = '\n';
			//text[pos+2] = '\0';
			flush();
			return;
		}
		if(c == '\n'){
 800470e:	290a      	cmp	r1, #10
 8004710:	d02e      	beq.n	8004770 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x70>
			flush();
			return;
		}

		text[pos++] = c;
 8004712:	482b      	ldr	r0, [pc, #172]	; (80047c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc0>)
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	54c1      	strb	r1, [r0, r3]
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 800471c:	4d28      	ldr	r5, [pc, #160]	; (80047c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc0>)
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800471e:	4e29      	ldr	r6, [pc, #164]	; (80047c4 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc4>)
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004720:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004724:	204d      	movs	r0, #77	; 0x4d
	if(!enable){
		return;
	}
	//if(prefix != 'M'){
		if(pos == TEXT_BUFFER_SIZE-3){
			text[pos++] = c;
 8004726:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800472a:	6023      	str	r3, [r4, #0]
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 800472c:	47b0      	blx	r6
     * @param specifier the specifier of the message
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	1869      	adds	r1, r5, r1
		while(data != pEnd){
 8004732:	42a9      	cmp	r1, r5
 8004734:	d03d      	beq.n	80047b2 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xb2>
 8004736:	2000      	movs	r0, #0
 8004738:	462b      	mov	r3, r5
			checksum ^= *data;
 800473a:	f813 2b01 	ldrb.w	r2, [r3], #1
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 800473e:	4299      	cmp	r1, r3
			checksum ^= *data;
 8004740:	ea80 0002 	eor.w	r0, r0, r2
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 8004744:	d1f9      	bne.n	800473a <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x3a>
 8004746:	f080 004d 	eor.w	r0, r0, #77	; 0x4d
 800474a:	b2c0      	uxtb	r0, r0
}

template<char prefix, bool useChecksum, bool enable, int TEXT_BUFFER_SIZE>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::calcChecksum(){
	char check = Checksum::getFor(text, pos, prefix);
	uart.write(check);
 800474c:	47b0      	blx	r6

	uart.write(prefix);
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 800474e:	202c      	movs	r0, #44	; 0x2c
 8004750:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 8004752:	6827      	ldr	r7, [r4, #0]
 8004754:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 8004756:	42af      	cmp	r7, r5
 8004758:	d005      	beq.n	8004766 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x66>
 800475a:	4d19      	ldr	r5, [pc, #100]	; (80047c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc0>)
		uart.write(*ptr);
 800475c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004760:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 8004762:	42af      	cmp	r7, r5
 8004764:	d1fa      	bne.n	800475c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x5c>
		ptr++;
	}

	//coutRaw << " l: " << pos;

	uart.write('\n');
 8004766:	200a      	movs	r0, #10
 8004768:	47b0      	blx	r6

	pos = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::flush(){
	if(!enable){
		return;
	}

	uart.write(prefix);
 8004770:	204d      	movs	r0, #77	; 0x4d
 8004772:	4e14      	ldr	r6, [pc, #80]	; (80047c4 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc4>)
     * @param specifier the specifier of the message
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
 8004774:	4d12      	ldr	r5, [pc, #72]	; (80047c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc0>)
 8004776:	47b0      	blx	r6
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	1869      	adds	r1, r5, r1
		while(data != pEnd){
 800477c:	42a9      	cmp	r1, r5
 800477e:	d01a      	beq.n	80047b6 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xb6>
 8004780:	2000      	movs	r0, #0
 8004782:	462b      	mov	r3, r5
			checksum ^= *data;
 8004784:	f813 2b01 	ldrb.w	r2, [r3], #1
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 8004788:	4299      	cmp	r1, r3
			checksum ^= *data;
 800478a:	ea80 0002 	eor.w	r0, r0, r2
     * @return computed checksum
     */
    static char getFor(const char* data, int length, char specifier){
		char checksum = 0x0;
		const char* const pEnd = data+length;
		while(data != pEnd){
 800478e:	d1f9      	bne.n	8004784 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x84>
 8004790:	f080 004d 	eor.w	r0, r0, #77	; 0x4d
 8004794:	b2c0      	uxtb	r0, r0
}

template<char prefix, bool useChecksum, bool enable, int TEXT_BUFFER_SIZE>
void Stream<prefix, useChecksum, enable, TEXT_BUFFER_SIZE>::calcChecksum(){
	char check = Checksum::getFor(text, pos, prefix);
	uart.write(check);
 8004796:	47b0      	blx	r6

	uart.write(prefix);
	if(useChecksum){
		calcChecksum();
	}
	uart.write(',');
 8004798:	202c      	movs	r0, #44	; 0x2c
 800479a:	47b0      	blx	r6

	const char* ptr = &text[0];
	const char* end = &text[pos];
 800479c:	6827      	ldr	r7, [r4, #0]
 800479e:	19ef      	adds	r7, r5, r7

	while(ptr != end){
 80047a0:	42af      	cmp	r7, r5
 80047a2:	d0e0      	beq.n	8004766 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x66>
 80047a4:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xc0>)
		uart.write(*ptr);
 80047a6:	f815 0b01 	ldrb.w	r0, [r5], #1
 80047aa:	47b0      	blx	r6
	uart.write(',');

	const char* ptr = &text[0];
	const char* end = &text[pos];

	while(ptr != end){
 80047ac:	42af      	cmp	r7, r5
 80047ae:	d1fa      	bne.n	80047a6 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0xa6>
 80047b0:	e7d9      	b.n	8004766 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x66>
 80047b2:	204d      	movs	r0, #77	; 0x4d
 80047b4:	e7ca      	b.n	800474c <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x4c>
 80047b6:	204d      	movs	r0, #77	; 0x4d
 80047b8:	e7ed      	b.n	8004796 <_ZN4xpcc15IODeviceWrapperI6StreamILc77ELb1ELb1ELi300EEE5writeEc+0x96>
 80047ba:	bf00      	nop
 80047bc:	20000f1c 	.word	0x20000f1c
 80047c0:	20000f20 	.word	0x20000f20
 80047c4:	08007359 	.word	0x08007359

080047c8 <_ZN8Handlers18linePatternHandlerEPKci>:
	//Pattern::start();
	//i = 0;
	return false;
}

static bool linePatternHandler(const char* cmd, int length){
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		dout << "Pattern done" << endl;
	}
	static int isRunning(){
		return running && !paused;
 80047cc:	4f59      	ldr	r7, [pc, #356]	; (8004934 <_ZN8Handlers18linePatternHandlerEPKci+0x16c>)
 80047ce:	783b      	ldrb	r3, [r7, #0]
 80047d0:	b11b      	cbz	r3, 80047da <_ZN8Handlers18linePatternHandlerEPKci+0x12>
 80047d2:	4b59      	ldr	r3, [pc, #356]	; (8004938 <_ZN8Handlers18linePatternHandlerEPKci+0x170>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d039      	beq.n	800484e <_ZN8Handlers18linePatternHandlerEPKci+0x86>
	if(Pattern::isRunning()){
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
 80047da:	4c58      	ldr	r4, [pc, #352]	; (800493c <_ZN8Handlers18linePatternHandlerEPKci+0x174>)
 80047dc:	4e58      	ldr	r6, [pc, #352]	; (8004940 <_ZN8Handlers18linePatternHandlerEPKci+0x178>)
 80047de:	f8d4 9000 	ldr.w	r9, [r4]
 80047e2:	4d58      	ldr	r5, [pc, #352]	; (8004944 <_ZN8Handlers18linePatternHandlerEPKci+0x17c>)
 80047e4:	47b0      	blx	r6
 80047e6:	f845 0039 	str.w	r0, [r5, r9, lsl #3]
	points[i].y = Control<Y>::getIsPosition();
 80047ea:	f8d4 8000 	ldr.w	r8, [r4]
 80047ee:	47b0      	blx	r6
	i++;
 80047f0:	6823      	ldr	r3, [r4, #0]
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
	points[i].y = Control<Y>::getIsPosition();
 80047f2:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
	i++;
 80047f6:	3301      	adds	r3, #1

	if(i < 2){
 80047f8:	2b01      	cmp	r3, #1
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
	points[i].y = Control<Y>::getIsPosition();
 80047fa:	f8c8 0004 	str.w	r0, [r8, #4]
	i++;
 80047fe:	6023      	str	r3, [r4, #0]

	if(i < 2){
 8004800:	dd77      	ble.n	80048f2 <_ZN8Handlers18linePatternHandlerEPKci+0x12a>
		return false;
	}

	if(i == 3){
 8004802:	2b03      	cmp	r3, #3
 8004804:	d039      	beq.n	800487a <_ZN8Handlers18linePatternHandlerEPKci+0xb2>
		Pattern::start();
		i = 0;
		return true;
	}

	Utils::enableSystick();
 8004806:	4b50      	ldr	r3, [pc, #320]	; (8004948 <_ZN8Handlers18linePatternHandlerEPKci+0x180>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004808:	4c50      	ldr	r4, [pc, #320]	; (800494c <_ZN8Handlers18linePatternHandlerEPKci+0x184>)
 800480a:	4798      	blx	r3
	Control<ALL>::enablePositionControl(true);
 800480c:	2001      	movs	r0, #1
 800480e:	4b50      	ldr	r3, [pc, #320]	; (8004950 <_ZN8Handlers18linePatternHandlerEPKci+0x188>)
 8004810:	4798      	blx	r3
	//execute pattern
	LinePattern line;
	line.configure(points);
 8004812:	4628      	mov	r0, r5
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <_ZN8Handlers18linePatternHandlerEPKci+0x18c>)
 8004816:	4798      	blx	r3
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 8004818:	4a4f      	ldr	r2, [pc, #316]	; (8004958 <_ZN8Handlers18linePatternHandlerEPKci+0x190>)
 800481a:	4b50      	ldr	r3, [pc, #320]	; (800495c <_ZN8Handlers18linePatternHandlerEPKci+0x194>)
	Pattern::setPattern(line);
	Trigger::enable(true);
 800481c:	2001      	movs	r0, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <_ZN8Handlers18linePatternHandlerEPKci+0x198>)
 8004822:	4798      	blx	r3
 8004824:	6863      	ldr	r3, [r4, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d066      	beq.n	80048f8 <_ZN8Handlers18linePatternHandlerEPKci+0x130>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800482a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800482c:	4620      	mov	r0, r4
 800482e:	494d      	ldr	r1, [pc, #308]	; (8004964 <_ZN8Handlers18linePatternHandlerEPKci+0x19c>)
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004830:	d015      	beq.n	800485e <_ZN8Handlers18linePatternHandlerEPKci+0x96>
				this->writeBin(s);
			}
			else {
				this->writeHex(s);
 8004832:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <_ZN8Handlers18linePatternHandlerEPKci+0x1a0>)
 8004834:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004836:	6864      	ldr	r4, [r4, #4]
 8004838:	b1b4      	cbz	r4, 8004868 <_ZN8Handlers18linePatternHandlerEPKci+0xa0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800483a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800483c:	2c02      	cmp	r4, #2
				this->writeBin(v);
 800483e:	bf0c      	ite	eq
 8004840:	4b4a      	ldreq	r3, [pc, #296]	; (800496c <_ZN8Handlers18linePatternHandlerEPKci+0x1a4>)
			}
			else {
				this->writeHex(v);
 8004842:	4b4b      	ldrne	r3, [pc, #300]	; (8004970 <_ZN8Handlers18linePatternHandlerEPKci+0x1a8>)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004844:	4841      	ldr	r0, [pc, #260]	; (800494c <_ZN8Handlers18linePatternHandlerEPKci+0x184>)
			}
			else {
				this->writeHex(v);
 8004846:	4798      	blx	r3
 8004848:	2000      	movs	r0, #0
 800484a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800484e:	4c3f      	ldr	r4, [pc, #252]	; (800494c <_ZN8Handlers18linePatternHandlerEPKci+0x184>)
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d047      	beq.n	80048e6 <_ZN8Handlers18linePatternHandlerEPKci+0x11e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004856:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004858:	4620      	mov	r0, r4
 800485a:	4946      	ldr	r1, [pc, #280]	; (8004974 <_ZN8Handlers18linePatternHandlerEPKci+0x1ac>)
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800485c:	d1e9      	bne.n	8004832 <_ZN8Handlers18linePatternHandlerEPKci+0x6a>
				this->writeBin(s);
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <_ZN8Handlers18linePatternHandlerEPKci+0x1b0>)
 8004860:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004862:	6864      	ldr	r4, [r4, #4]
 8004864:	2c00      	cmp	r4, #0
 8004866:	d1e8      	bne.n	800483a <_ZN8Handlers18linePatternHandlerEPKci+0x72>
				this->device->write(v);
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <_ZN8Handlers18linePatternHandlerEPKci+0x184>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	6803      	ldr	r3, [r0, #0]
 800486e:	210a      	movs	r1, #10
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4798      	blx	r3
	iout << "pattern recorded, send command once more to start it" << endl;
	//Pattern::start();
	//i = 0;
	return false;
 8004874:	4620      	mov	r0, r4
 8004876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
 800487a:	2301      	movs	r3, #1
 800487c:	703b      	strb	r3, [r7, #0]
		paused = false;
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <_ZN8Handlers18linePatternHandlerEPKci+0x170>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004880:	4d3e      	ldr	r5, [pc, #248]	; (800497c <_ZN8Handlers18linePatternHandlerEPKci+0x1b4>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
		State::set(State::SCANNING_RECTANGLE);
 8004886:	2004      	movs	r0, #4
 8004888:	4b3d      	ldr	r3, [pc, #244]	; (8004980 <_ZN8Handlers18linePatternHandlerEPKci+0x1b8>)
 800488a:	4798      	blx	r3
 800488c:	686b      	ldr	r3, [r5, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d038      	beq.n	8004904 <_ZN8Handlers18linePatternHandlerEPKci+0x13c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004892:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004894:	4628      	mov	r0, r5
 8004896:	493b      	ldr	r1, [pc, #236]	; (8004984 <_ZN8Handlers18linePatternHandlerEPKci+0x1bc>)
 8004898:	bf0c      	ite	eq
 800489a:	4b37      	ldreq	r3, [pc, #220]	; (8004978 <_ZN8Handlers18linePatternHandlerEPKci+0x1b0>)
			}
			else {
				this->writeHex(s);
 800489c:	4b32      	ldrne	r3, [pc, #200]	; (8004968 <_ZN8Handlers18linePatternHandlerEPKci+0x1a0>)
 800489e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80048a0:	686b      	ldr	r3, [r5, #4]
 80048a2:	4836      	ldr	r0, [pc, #216]	; (800497c <_ZN8Handlers18linePatternHandlerEPKci+0x1b4>)
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d03f      	beq.n	8004928 <_ZN8Handlers18linePatternHandlerEPKci+0x160>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80048a8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80048aa:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80048ac:	bf0c      	ite	eq
 80048ae:	4b2f      	ldreq	r3, [pc, #188]	; (800496c <_ZN8Handlers18linePatternHandlerEPKci+0x1a4>)
			}
			else {
				this->writeHex(v);
 80048b0:	4b2f      	ldrne	r3, [pc, #188]	; (8004970 <_ZN8Handlers18linePatternHandlerEPKci+0x1a8>)
 80048b2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80048b4:	4d34      	ldr	r5, [pc, #208]	; (8004988 <_ZN8Handlers18linePatternHandlerEPKci+0x1c0>)
 80048b6:	686b      	ldr	r3, [r5, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02f      	beq.n	800491c <_ZN8Handlers18linePatternHandlerEPKci+0x154>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80048bc:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80048be:	4628      	mov	r0, r5
 80048c0:	4932      	ldr	r1, [pc, #200]	; (800498c <_ZN8Handlers18linePatternHandlerEPKci+0x1c4>)
 80048c2:	bf0c      	ite	eq
 80048c4:	4b2c      	ldreq	r3, [pc, #176]	; (8004978 <_ZN8Handlers18linePatternHandlerEPKci+0x1b0>)
			}
			else {
				this->writeHex(s);
 80048c6:	4b28      	ldrne	r3, [pc, #160]	; (8004968 <_ZN8Handlers18linePatternHandlerEPKci+0x1a0>)
 80048c8:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80048ca:	686b      	ldr	r3, [r5, #4]
 80048cc:	482e      	ldr	r0, [pc, #184]	; (8004988 <_ZN8Handlers18linePatternHandlerEPKci+0x1c0>)
 80048ce:	b1fb      	cbz	r3, 8004910 <_ZN8Handlers18linePatternHandlerEPKci+0x148>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80048d0:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80048d2:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80048d4:	bf0c      	ite	eq
 80048d6:	4b25      	ldreq	r3, [pc, #148]	; (800496c <_ZN8Handlers18linePatternHandlerEPKci+0x1a4>)
			}
			else {
				this->writeHex(v);
 80048d8:	4b25      	ldrne	r3, [pc, #148]	; (8004970 <_ZN8Handlers18linePatternHandlerEPKci+0x1a8>)
 80048da:	4798      	blx	r3
		return false;
	}

	if(i == 3){
		Pattern::start();
		i = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	6023      	str	r3, [r4, #0]
		return true;
 80048e0:	2001      	movs	r0, #1
 80048e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	4922      	ldr	r1, [pc, #136]	; (8004974 <_ZN8Handlers18linePatternHandlerEPKci+0x1ac>)
 80048ea:	6803      	ldr	r3, [r0, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4798      	blx	r3
 80048f0:	e7a1      	b.n	8004836 <_ZN8Handlers18linePatternHandlerEPKci+0x6e>
	points[i].x = Control<Y>::getIsPosition();
	points[i].y = Control<Y>::getIsPosition();
	i++;

	if(i < 2){
		return false;
 80048f2:	2000      	movs	r0, #0
 80048f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	491a      	ldr	r1, [pc, #104]	; (8004964 <_ZN8Handlers18linePatternHandlerEPKci+0x19c>)
 80048fc:	6803      	ldr	r3, [r0, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4798      	blx	r3
 8004902:	e798      	b.n	8004836 <_ZN8Handlers18linePatternHandlerEPKci+0x6e>
 8004904:	6828      	ldr	r0, [r5, #0]
 8004906:	491f      	ldr	r1, [pc, #124]	; (8004984 <_ZN8Handlers18linePatternHandlerEPKci+0x1bc>)
 8004908:	6803      	ldr	r3, [r0, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4798      	blx	r3
 800490e:	e7c7      	b.n	80048a0 <_ZN8Handlers18linePatternHandlerEPKci+0xd8>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004910:	6800      	ldr	r0, [r0, #0]
 8004912:	6803      	ldr	r3, [r0, #0]
 8004914:	210a      	movs	r1, #10
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4798      	blx	r3
 800491a:	e7df      	b.n	80048dc <_ZN8Handlers18linePatternHandlerEPKci+0x114>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800491c:	6828      	ldr	r0, [r5, #0]
 800491e:	491b      	ldr	r1, [pc, #108]	; (800498c <_ZN8Handlers18linePatternHandlerEPKci+0x1c4>)
 8004920:	6803      	ldr	r3, [r0, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4798      	blx	r3
 8004926:	e7d0      	b.n	80048ca <_ZN8Handlers18linePatternHandlerEPKci+0x102>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004928:	6800      	ldr	r0, [r0, #0]
 800492a:	6803      	ldr	r3, [r0, #0]
 800492c:	210a      	movs	r1, #10
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4798      	blx	r3
 8004932:	e7bf      	b.n	80048b4 <_ZN8Handlers18linePatternHandlerEPKci+0xec>
 8004934:	200008d0 	.word	0x200008d0
 8004938:	200008d8 	.word	0x200008d8
 800493c:	200008e4 	.word	0x200008e4
 8004940:	08000e81 	.word	0x08000e81
 8004944:	200008e8 	.word	0x200008e8
 8004948:	0800697d 	.word	0x0800697d
 800494c:	200013d0 	.word	0x200013d0
 8004950:	08000ef9 	.word	0x08000ef9
 8004954:	08002221 	.word	0x08002221
 8004958:	080022e1 	.word	0x080022e1
 800495c:	200008d4 	.word	0x200008d4
 8004960:	080004a5 	.word	0x080004a5
 8004964:	080095a0 	.word	0x080095a0
 8004968:	080079a9 	.word	0x080079a9
 800496c:	08007af5 	.word	0x08007af5
 8004970:	08007ac1 	.word	0x08007ac1
 8004974:	08009560 	.word	0x08009560
 8004978:	080079ed 	.word	0x080079ed
 800497c:	200013bc 	.word	0x200013bc
 8004980:	080067d5 	.word	0x080067d5
 8004984:	08009584 	.word	0x08009584
 8004988:	2000118c 	.word	0x2000118c
 800498c:	08009594 	.word	0x08009594

08004990 <_ZN8Handlers24rectanglePatternHandler3EPKci>:
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
	return false;
}

static bool rectanglePatternHandler3(const char* cmd, int length){
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		running = 0;
		State::set(State::READY);
		dout << "Pattern done" << endl;
	}
	static int isRunning(){
		return running && !paused;
 8004994:	4f8b      	ldr	r7, [pc, #556]	; (8004bc4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x234>)
 8004996:	783b      	ldrb	r3, [r7, #0]
 8004998:	b083      	sub	sp, #12
 800499a:	4681      	mov	r9, r0
 800499c:	4688      	mov	r8, r1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01a      	beq.n	80049d8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x48>
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x238>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b9bb      	cbnz	r3, 80049d8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x48>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80049a8:	4d88      	ldr	r5, [pc, #544]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 80049aa:	686b      	ldr	r3, [r5, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d075      	beq.n	8004a9c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x10c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80049b0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80049b2:	4628      	mov	r0, r5
 80049b4:	4986      	ldr	r1, [pc, #536]	; (8004bd0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x240>)
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80049b6:	d051      	beq.n	8004a5c <_ZN8Handlers24rectanglePatternHandler3EPKci+0xcc>
				this->writeBin(s);
			}
			else {
				this->writeHex(s);
 80049b8:	4b86      	ldr	r3, [pc, #536]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 80049ba:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80049bc:	686b      	ldr	r3, [r5, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d072      	beq.n	8004aa8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x118>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80049c2:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80049c4:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80049c6:	4881      	ldr	r0, [pc, #516]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 80049c8:	bf0c      	ite	eq
 80049ca:	4b83      	ldreq	r3, [pc, #524]	; (8004bd8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x248>)
			}
			else {
				this->writeHex(v);
 80049cc:	4b83      	ldrne	r3, [pc, #524]	; (8004bdc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x24c>)
 80049ce:	4798      	blx	r3
	Trigger::enable(true);
	iout << "pattern recorded, send command once more to start it" << endl;
	//Pattern::start();
	//i = 0;
	return false;
}
 80049d0:	2000      	movs	r0, #0
 80049d2:	b003      	add	sp, #12
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(Pattern::isRunning()){
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
 80049d8:	4c81      	ldr	r4, [pc, #516]	; (8004be0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x250>)
 80049da:	4e82      	ldr	r6, [pc, #520]	; (8004be4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x254>)
 80049dc:	f8d4 b000 	ldr.w	fp, [r4]
 80049e0:	4d81      	ldr	r5, [pc, #516]	; (8004be8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x258>)
 80049e2:	47b0      	blx	r6
 80049e4:	f845 003b 	str.w	r0, [r5, fp, lsl #3]
	points[i].y = Control<Y>::getIsPosition();
 80049e8:	f8d4 a000 	ldr.w	sl, [r4]
 80049ec:	47b0      	blx	r6
	i++;
 80049ee:	6823      	ldr	r3, [r4, #0]
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
	points[i].y = Control<Y>::getIsPosition();
 80049f0:	eb05 05ca 	add.w	r5, r5, sl, lsl #3
	i++;
 80049f4:	3301      	adds	r3, #1

	if(i < 4){
 80049f6:	2b03      	cmp	r3, #3
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	points[i].x = Control<Y>::getIsPosition();
	points[i].y = Control<Y>::getIsPosition();
 80049f8:	6068      	str	r0, [r5, #4]
	i++;
 80049fa:	6023      	str	r3, [r4, #0]

	if(i < 4){
 80049fc:	dde8      	ble.n	80049d0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x40>
		return false;
	}

	if(i == 5){
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d076      	beq.n	8004af0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x160>
		Pattern::start();
	}

	const char* currentPos;
	int samplingResolution = atoi2(currentPos, &currentPos);
 8004a02:	a902      	add	r1, sp, #8
 8004a04:	4b79      	ldr	r3, [pc, #484]	; (8004bec <_ZN8Handlers24rectanglePatternHandler3EPKci+0x25c>)
 8004a06:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8004a0a:	4798      	blx	r3

	//sanity checks:
	if(length <= 0 ){
 8004a0c:	f1b8 0f00 	cmp.w	r8, #0
	if(i == 5){
		Pattern::start();
	}

	const char* currentPos;
	int samplingResolution = atoi2(currentPos, &currentPos);
 8004a10:	4606      	mov	r6, r0

	//sanity checks:
	if(length <= 0 ){
 8004a12:	f340 80ae 	ble.w	8004b72 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x1e2>
		iout << "no sampling resolution provided" << endl;
		i = 0;
		return false;
	}
	if(currentPos - cmd > length){
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	ebc9 0303 	rsb	r3, r9, r3
 8004a1c:	4598      	cmp	r8, r3
 8004a1e:	db4a      	blt.n	8004ab6 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x126>
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		i = 0;
		return false;
	}
	if(samplingResolution < CONTROLX_DEADBAND || samplingResolution > 100000){
 8004a20:	4b73      	ldr	r3, [pc, #460]	; (8004bf0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x260>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004a22:	4d6a      	ldr	r5, [pc, #424]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 8004a24:	4298      	cmp	r0, r3
 8004a26:	d81c      	bhi.n	8004a62 <_ZN8Handlers24rectanglePatternHandler3EPKci+0xd2>
		iout << "sampling resolution param is out of bounds: " << samplingResolution << endl;
		i = 0;
		return false;
	}

	Utils::enableSystick();
 8004a28:	4b72      	ldr	r3, [pc, #456]	; (8004bf4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x264>)
 8004a2a:	4798      	blx	r3
	Control<ALL>::enablePositionControl(true);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x268>)
 8004a30:	4798      	blx	r3
	//execute pattern
	QuadrangleZigZag zRect;
	zRect.configure(points, samplingResolution);
 8004a32:	4631      	mov	r1, r6
 8004a34:	486c      	ldr	r0, [pc, #432]	; (8004be8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x258>)
 8004a36:	4b71      	ldr	r3, [pc, #452]	; (8004bfc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x26c>)
 8004a38:	4798      	blx	r3
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 8004a3a:	4a71      	ldr	r2, [pc, #452]	; (8004c00 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x270>)
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x274>)
	Pattern::setPattern(zRect);
	Trigger::setThreshold(samplingResolution);
 8004a3e:	4630      	mov	r0, r6
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x278>)
 8004a44:	4798      	blx	r3
	Trigger::enable(true);
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x27c>)
 8004a48:	2001      	movs	r0, #1
 8004a4a:	4798      	blx	r3
 8004a4c:	686b      	ldr	r3, [r5, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8089 	beq.w	8004b66 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x1d6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004a54:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004a56:	4628      	mov	r0, r5
 8004a58:	496d      	ldr	r1, [pc, #436]	; (8004c10 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x280>)
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004a5a:	d1ad      	bne.n	80049b8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x28>
				this->writeBin(s);
 8004a5c:	4b6d      	ldr	r3, [pc, #436]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
 8004a5e:	4798      	blx	r3
 8004a60:	e7ac      	b.n	80049bc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2c>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004a62:	686b      	ldr	r3, [r5, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80a0 	beq.w	8004baa <_ZN8Handlers24rectanglePatternHandler3EPKci+0x21a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004a6a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	496a      	ldr	r1, [pc, #424]	; (8004c18 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x288>)
 8004a70:	bf0c      	ite	eq
 8004a72:	4b68      	ldreq	r3, [pc, #416]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
			}
			else {
				this->writeHex(s);
 8004a74:	4b57      	ldrne	r3, [pc, #348]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 8004a76:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8004a78:	4f54      	ldr	r7, [pc, #336]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8004a7a:	4b68      	ldr	r3, [pc, #416]	; (8004c1c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x28c>)
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004a82:	686b      	ldr	r3, [r5, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 808a 	beq.w	8004b9e <_ZN8Handlers24rectanglePatternHandler3EPKci+0x20e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d02b      	beq.n	8004aea <_ZN8Handlers24rectanglePatternHandler3EPKci+0x15a>
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 8004a92:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x24c>)
 8004a94:	4798      	blx	r3
		i = 0;
		return false;
	}
	if(samplingResolution < CONTROLX_DEADBAND || samplingResolution > 100000){
		iout << "sampling resolution param is out of bounds: " << samplingResolution << endl;
		i = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	e799      	b.n	80049d0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x40>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004a9c:	6828      	ldr	r0, [r5, #0]
 8004a9e:	494c      	ldr	r1, [pc, #304]	; (8004bd0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x240>)
 8004aa0:	6803      	ldr	r3, [r0, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4798      	blx	r3
 8004aa6:	e789      	b.n	80049bc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004aa8:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	6803      	ldr	r3, [r0, #0]
 8004aae:	210a      	movs	r1, #10
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4798      	blx	r3
 8004ab4:	e78c      	b.n	80049d0 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x40>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004ab6:	4d5a      	ldr	r5, [pc, #360]	; (8004c20 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x290>)
 8004ab8:	686b      	ldr	r3, [r5, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80c0 	beq.w	8004c40 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2b0>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004ac0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	4957      	ldr	r1, [pc, #348]	; (8004c24 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x294>)
 8004ac6:	bf0c      	ite	eq
 8004ac8:	4b52      	ldreq	r3, [pc, #328]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
			}
			else {
				this->writeHex(s);
 8004aca:	4b42      	ldrne	r3, [pc, #264]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 8004acc:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8004ace:	9901      	ldr	r1, [sp, #4]
		iout << "no sampling resolution provided" << endl;
		i = 0;
		return false;
	}
	if(currentPos - cmd > length){
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
 8004ad0:	4e53      	ldr	r6, [pc, #332]	; (8004c20 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x290>)
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x28c>)
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	ebc9 0101 	rsb	r1, r9, r1
 8004ada:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004adc:	686b      	ldr	r3, [r5, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d069      	beq.n	8004bb6 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x226>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004ae2:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004ae4:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004ae6:	4630      	mov	r0, r6
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004ae8:	d1d3      	bne.n	8004a92 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x102>
				this->writeBin(v);
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x248>)
 8004aec:	4798      	blx	r3
 8004aee:	e7d2      	b.n	8004a96 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x106>
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
 8004af0:	2301      	movs	r3, #1
 8004af2:	703b      	strb	r3, [r7, #0]
		paused = false;
 8004af4:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x238>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004af6:	4d4c      	ldr	r5, [pc, #304]	; (8004c28 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x298>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
		State::set(State::SCANNING_RECTANGLE);
 8004afc:	2004      	movs	r0, #4
 8004afe:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x29c>)
 8004b00:	4798      	blx	r3
 8004b02:	686b      	ldr	r3, [r5, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d028      	beq.n	8004b5a <_ZN8Handlers24rectanglePatternHandler3EPKci+0x1ca>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004b08:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	4948      	ldr	r1, [pc, #288]	; (8004c30 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2a0>)
 8004b0e:	bf0c      	ite	eq
 8004b10:	4b40      	ldreq	r3, [pc, #256]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
			}
			else {
				this->writeHex(s);
 8004b12:	4b30      	ldrne	r3, [pc, #192]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 8004b14:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004b16:	686b      	ldr	r3, [r5, #4]
 8004b18:	4843      	ldr	r0, [pc, #268]	; (8004c28 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x298>)
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80a2 	beq.w	8004c64 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2d4>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004b20:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004b22:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004b24:	bf0c      	ite	eq
 8004b26:	4b2c      	ldreq	r3, [pc, #176]	; (8004bd8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x248>)
			}
			else {
				this->writeHex(v);
 8004b28:	4b2c      	ldrne	r3, [pc, #176]	; (8004bdc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x24c>)
 8004b2a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004b2c:	4d41      	ldr	r5, [pc, #260]	; (8004c34 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2a4>)
 8004b2e:	686b      	ldr	r3, [r5, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8091 	beq.w	8004c58 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2c8>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004b36:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004b38:	4628      	mov	r0, r5
 8004b3a:	493f      	ldr	r1, [pc, #252]	; (8004c38 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2a8>)
 8004b3c:	bf0c      	ite	eq
 8004b3e:	4b35      	ldreq	r3, [pc, #212]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
			}
			else {
				this->writeHex(s);
 8004b40:	4b24      	ldrne	r3, [pc, #144]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 8004b42:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004b44:	686b      	ldr	r3, [r5, #4]
 8004b46:	483b      	ldr	r0, [pc, #236]	; (8004c34 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2a4>)
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d07f      	beq.n	8004c4c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2bc>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004b4c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004b4e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004b50:	bf0c      	ite	eq
 8004b52:	4b21      	ldreq	r3, [pc, #132]	; (8004bd8 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x248>)
			}
			else {
				this->writeHex(v);
 8004b54:	4b21      	ldrne	r3, [pc, #132]	; (8004bdc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x24c>)
 8004b56:	4798      	blx	r3
 8004b58:	e753      	b.n	8004a02 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x72>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004b5a:	6828      	ldr	r0, [r5, #0]
 8004b5c:	4934      	ldr	r1, [pc, #208]	; (8004c30 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2a0>)
 8004b5e:	6803      	ldr	r3, [r0, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4798      	blx	r3
 8004b64:	e7d7      	b.n	8004b16 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x186>
 8004b66:	6828      	ldr	r0, [r5, #0]
 8004b68:	4929      	ldr	r1, [pc, #164]	; (8004c10 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x280>)
 8004b6a:	6803      	ldr	r3, [r0, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4798      	blx	r3
 8004b70:	e724      	b.n	80049bc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2c>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004b72:	4d16      	ldr	r5, [pc, #88]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 8004b74:	686b      	ldr	r3, [r5, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d07a      	beq.n	8004c70 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2e0>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004b7a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	492f      	ldr	r1, [pc, #188]	; (8004c3c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2ac>)
 8004b80:	bf0c      	ite	eq
 8004b82:	4b24      	ldreq	r3, [pc, #144]	; (8004c14 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x284>)
			}
			else {
				this->writeHex(s);
 8004b84:	4b13      	ldrne	r3, [pc, #76]	; (8004bd4 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x244>)
 8004b86:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004b88:	686b      	ldr	r3, [r5, #4]
 8004b8a:	4810      	ldr	r0, [pc, #64]	; (8004bcc <_ZN8Handlers24rectanglePatternHandler3EPKci+0x23c>)
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f af7d 	bne.w	8004a8c <_ZN8Handlers24rectanglePatternHandler3EPKci+0xfc>
				this->device->write(v);
 8004b92:	6800      	ldr	r0, [r0, #0]
 8004b94:	6803      	ldr	r3, [r0, #0]
 8004b96:	210a      	movs	r1, #10
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4798      	blx	r3
 8004b9c:	e77b      	b.n	8004a96 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x106>
 8004b9e:	6838      	ldr	r0, [r7, #0]
 8004ba0:	6803      	ldr	r3, [r0, #0]
 8004ba2:	210a      	movs	r1, #10
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4798      	blx	r3
 8004ba8:	e775      	b.n	8004a96 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x106>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004baa:	6828      	ldr	r0, [r5, #0]
 8004bac:	491a      	ldr	r1, [pc, #104]	; (8004c18 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x288>)
 8004bae:	6803      	ldr	r3, [r0, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4798      	blx	r3
 8004bb4:	e760      	b.n	8004a78 <_ZN8Handlers24rectanglePatternHandler3EPKci+0xe8>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004bb6:	6830      	ldr	r0, [r6, #0]
 8004bb8:	6803      	ldr	r3, [r0, #0]
 8004bba:	210a      	movs	r1, #10
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4798      	blx	r3
 8004bc0:	e769      	b.n	8004a96 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x106>
 8004bc2:	bf00      	nop
 8004bc4:	200008d0 	.word	0x200008d0
 8004bc8:	200008d8 	.word	0x200008d8
 8004bcc:	200013d0 	.word	0x200013d0
 8004bd0:	08009560 	.word	0x08009560
 8004bd4:	080079a9 	.word	0x080079a9
 8004bd8:	08007af5 	.word	0x08007af5
 8004bdc:	08007ac1 	.word	0x08007ac1
 8004be0:	20000900 	.word	0x20000900
 8004be4:	08000e81 	.word	0x08000e81
 8004be8:	20000904 	.word	0x20000904
 8004bec:	080004b1 	.word	0x080004b1
 8004bf0:	000186a0 	.word	0x000186a0
 8004bf4:	0800697d 	.word	0x0800697d
 8004bf8:	08000ef9 	.word	0x08000ef9
 8004bfc:	080061c5 	.word	0x080061c5
 8004c00:	08005cd5 	.word	0x08005cd5
 8004c04:	200008d4 	.word	0x200008d4
 8004c08:	08000491 	.word	0x08000491
 8004c0c:	080004a5 	.word	0x080004a5
 8004c10:	080095a0 	.word	0x080095a0
 8004c14:	080079ed 	.word	0x080079ed
 8004c18:	08009608 	.word	0x08009608
 8004c1c:	080078f9 	.word	0x080078f9
 8004c20:	20001184 	.word	0x20001184
 8004c24:	080095f8 	.word	0x080095f8
 8004c28:	200013bc 	.word	0x200013bc
 8004c2c:	080067d5 	.word	0x080067d5
 8004c30:	08009584 	.word	0x08009584
 8004c34:	2000118c 	.word	0x2000118c
 8004c38:	08009594 	.word	0x08009594
 8004c3c:	080095d8 	.word	0x080095d8

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004c40:	6828      	ldr	r0, [r5, #0]
 8004c42:	490e      	ldr	r1, [pc, #56]	; (8004c7c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2ec>)
 8004c44:	6803      	ldr	r3, [r0, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4798      	blx	r3
 8004c4a:	e740      	b.n	8004ace <_ZN8Handlers24rectanglePatternHandler3EPKci+0x13e>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	6803      	ldr	r3, [r0, #0]
 8004c50:	210a      	movs	r1, #10
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4798      	blx	r3
 8004c56:	e6d4      	b.n	8004a02 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x72>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004c58:	6828      	ldr	r0, [r5, #0]
 8004c5a:	4909      	ldr	r1, [pc, #36]	; (8004c80 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2f0>)
 8004c5c:	6803      	ldr	r3, [r0, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4798      	blx	r3
 8004c62:	e76f      	b.n	8004b44 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x1b4>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004c64:	6800      	ldr	r0, [r0, #0]
 8004c66:	6803      	ldr	r3, [r0, #0]
 8004c68:	210a      	movs	r1, #10
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4798      	blx	r3
 8004c6e:	e75d      	b.n	8004b2c <_ZN8Handlers24rectanglePatternHandler3EPKci+0x19c>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004c70:	6828      	ldr	r0, [r5, #0]
 8004c72:	4904      	ldr	r1, [pc, #16]	; (8004c84 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x2f4>)
 8004c74:	6803      	ldr	r3, [r0, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4798      	blx	r3
 8004c7a:	e785      	b.n	8004b88 <_ZN8Handlers24rectanglePatternHandler3EPKci+0x1f8>
 8004c7c:	080095f8 	.word	0x080095f8
 8004c80:	08009594 	.word	0x08009594
 8004c84:	080095d8 	.word	0x080095d8

08004c88 <_ZN7Pattern5startEv>:
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <_ZN7Pattern5startEv+0xac>)
 8004c8a:	2201      	movs	r2, #1
	}
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
 8004c8c:	b510      	push	{r4, lr}
		running = true;
 8004c8e:	701a      	strb	r2, [r3, #0]
		paused = false;
 8004c90:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <_ZN7Pattern5startEv+0xb0>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004c92:	4c2a      	ldr	r4, [pc, #168]	; (8004d3c <_ZN7Pattern5startEv+0xb4>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
		State::set(State::SCANNING_RECTANGLE);
 8004c98:	2004      	movs	r0, #4
 8004c9a:	4b29      	ldr	r3, [pc, #164]	; (8004d40 <_ZN7Pattern5startEv+0xb8>)
 8004c9c:	4798      	blx	r3
 8004c9e:	6863      	ldr	r3, [r4, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d026      	beq.n	8004cf2 <_ZN7Pattern5startEv+0x6a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004ca4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bf0c      	ite	eq
 8004caa:	4b26      	ldreq	r3, [pc, #152]	; (8004d44 <_ZN7Pattern5startEv+0xbc>)
			}
			else {
				this->writeHex(s);
 8004cac:	4b26      	ldrne	r3, [pc, #152]	; (8004d48 <_ZN7Pattern5startEv+0xc0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8004cae:	4927      	ldr	r1, [pc, #156]	; (8004d4c <_ZN7Pattern5startEv+0xc4>)
			}
			else {
				this->writeHex(s);
 8004cb0:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	4821      	ldr	r0, [pc, #132]	; (8004d3c <_ZN7Pattern5startEv+0xb4>)
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <_ZN7Pattern5startEv+0x7c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004cba:	210a      	movs	r1, #10
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004cbc:	4c24      	ldr	r4, [pc, #144]	; (8004d50 <_ZN7Pattern5startEv+0xc8>)
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004cbe:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004cc0:	bf0c      	ite	eq
 8004cc2:	4b24      	ldreq	r3, [pc, #144]	; (8004d54 <_ZN7Pattern5startEv+0xcc>)
			}
			else {
				this->writeHex(v);
 8004cc4:	4b24      	ldrne	r3, [pc, #144]	; (8004d58 <_ZN7Pattern5startEv+0xd0>)
 8004cc6:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d023      	beq.n	8004d16 <_ZN7Pattern5startEv+0x8e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004cce:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	bf0c      	ite	eq
 8004cd4:	4b1b      	ldreq	r3, [pc, #108]	; (8004d44 <_ZN7Pattern5startEv+0xbc>)
			}
			else {
				this->writeHex(s);
 8004cd6:	4b1c      	ldrne	r3, [pc, #112]	; (8004d48 <_ZN7Pattern5startEv+0xc0>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8004cd8:	4920      	ldr	r1, [pc, #128]	; (8004d5c <_ZN7Pattern5startEv+0xd4>)
			}
			else {
				this->writeHex(s);
 8004cda:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004cdc:	6863      	ldr	r3, [r4, #4]
 8004cde:	481c      	ldr	r0, [pc, #112]	; (8004d50 <_ZN7Pattern5startEv+0xc8>)
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <_ZN7Pattern5startEv+0xa0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004ce4:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004ce6:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004ce8:	bf0c      	ite	eq
 8004cea:	4b1a      	ldreq	r3, [pc, #104]	; (8004d54 <_ZN7Pattern5startEv+0xcc>)
			}
			else {
				this->writeHex(v);
 8004cec:	4b1a      	ldrne	r3, [pc, #104]	; (8004d58 <_ZN7Pattern5startEv+0xd0>)
 8004cee:	4798      	blx	r3
 8004cf0:	bd10      	pop	{r4, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	4915      	ldr	r1, [pc, #84]	; (8004d4c <_ZN7Pattern5startEv+0xc4>)
 8004cf6:	6803      	ldr	r3, [r0, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004cfc:	6863      	ldr	r3, [r4, #4]
 8004cfe:	480f      	ldr	r0, [pc, #60]	; (8004d3c <_ZN7Pattern5startEv+0xb4>)
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1da      	bne.n	8004cba <_ZN7Pattern5startEv+0x32>
				this->device->write(v);
 8004d04:	6800      	ldr	r0, [r0, #0]
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004d06:	4c12      	ldr	r4, [pc, #72]	; (8004d50 <_ZN7Pattern5startEv+0xc8>)

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8004d08:	6803      	ldr	r3, [r0, #0]
 8004d0a:	210a      	movs	r1, #10
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1db      	bne.n	8004cce <_ZN7Pattern5startEv+0x46>
				this->device->write(s);
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	4910      	ldr	r1, [pc, #64]	; (8004d5c <_ZN7Pattern5startEv+0xd4>)
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	480b      	ldr	r0, [pc, #44]	; (8004d50 <_ZN7Pattern5startEv+0xc8>)
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1dd      	bne.n	8004ce4 <_ZN7Pattern5startEv+0x5c>
				this->device->write(v);
 8004d28:	6800      	ldr	r0, [r0, #0]
 8004d2a:	6803      	ldr	r3, [r0, #0]
 8004d2c:	210a      	movs	r1, #10
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4798      	blx	r3
 8004d32:	bd10      	pop	{r4, pc}
 8004d34:	200008d0 	.word	0x200008d0
 8004d38:	200008d8 	.word	0x200008d8
 8004d3c:	200013bc 	.word	0x200013bc
 8004d40:	080067d5 	.word	0x080067d5
 8004d44:	080079ed 	.word	0x080079ed
 8004d48:	080079a9 	.word	0x080079a9
 8004d4c:	08009584 	.word	0x08009584
 8004d50:	2000118c 	.word	0x2000118c
 8004d54:	08007af5 	.word	0x08007af5
 8004d58:	08007ac1 	.word	0x08007ac1
 8004d5c:	08009594 	.word	0x08009594

08004d60 <_ZN8Handlers24rectanglePatternHandler2EPKci>:
	//Pattern::start();
	//i = 0;
	return false;
}

static bool rectanglePatternHandler2(const char* cmd, int length){
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b089      	sub	sp, #36	; 0x24
	//expected: 4 arguments: start x, start y, stop x, stop y
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
 8004d64:	4c8b      	ldr	r4, [pc, #556]	; (8004f94 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x234>)
 8004d66:	4a8c      	ldr	r2, [pc, #560]	; (8004f98 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x238>)
	//Pattern::start();
	//i = 0;
	return false;
}

static bool rectanglePatternHandler2(const char* cmd, int length){
 8004d68:	460e      	mov	r6, r1
	//expected: 4 arguments: start x, start y, stop x, stop y
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
 8004d6a:	a903      	add	r1, sp, #12
	//Pattern::start();
	//i = 0;
	return false;
}

static bool rectanglePatternHandler2(const char* cmd, int length){
 8004d6c:	4605      	mov	r5, r0
	//expected: 4 arguments: start x, start y, stop x, stop y
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
 8004d6e:	47a0      	blx	r4
	float starty = atof2(currentPos, &currentPos, 100000.f);
 8004d70:	a903      	add	r1, sp, #12
static bool rectanglePatternHandler2(const char* cmd, int length){
	//expected: 4 arguments: start x, start y, stop x, stop y
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
 8004d72:	9004      	str	r0, [sp, #16]
	float starty = atof2(currentPos, &currentPos, 100000.f);
 8004d74:	4a88      	ldr	r2, [pc, #544]	; (8004f98 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x238>)
 8004d76:	9803      	ldr	r0, [sp, #12]
 8004d78:	47a0      	blx	r4
	float stopx = atof2(currentPos, &currentPos, 100000.f);
 8004d7a:	a903      	add	r1, sp, #12
	//expected: 4 arguments: start x, start y, stop x, stop y
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
	float starty = atof2(currentPos, &currentPos, 100000.f);
 8004d7c:	9005      	str	r0, [sp, #20]
	float stopx = atof2(currentPos, &currentPos, 100000.f);
 8004d7e:	4a86      	ldr	r2, [pc, #536]	; (8004f98 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x238>)
 8004d80:	9803      	ldr	r0, [sp, #12]
 8004d82:	47a0      	blx	r4
	float stopy = atof2(currentPos, &currentPos, 100000.f);
 8004d84:	a903      	add	r1, sp, #12
	static float lastx=-1, lasty=-1, lastStopX=-1, lastStopY=-1;

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
	float starty = atof2(currentPos, &currentPos, 100000.f);
	float stopx = atof2(currentPos, &currentPos, 100000.f);
 8004d86:	9006      	str	r0, [sp, #24]
	float stopy = atof2(currentPos, &currentPos, 100000.f);
 8004d88:	4a83      	ldr	r2, [pc, #524]	; (8004f98 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x238>)
 8004d8a:	9803      	ldr	r0, [sp, #12]
 8004d8c:	47a0      	blx	r4
	int samplingResolution = atoi2(currentPos, &currentPos);
 8004d8e:	4b83      	ldr	r3, [pc, #524]	; (8004f9c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x23c>)

	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
	float starty = atof2(currentPos, &currentPos, 100000.f);
	float stopx = atof2(currentPos, &currentPos, 100000.f);
	float stopy = atof2(currentPos, &currentPos, 100000.f);
 8004d90:	9007      	str	r0, [sp, #28]
	int samplingResolution = atoi2(currentPos, &currentPos);
 8004d92:	a903      	add	r1, sp, #12
 8004d94:	9803      	ldr	r0, [sp, #12]
 8004d96:	4798      	blx	r3

	//sanity checks:
	if(currentPos - cmd > length){
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	1b5b      	subs	r3, r3, r5
 8004d9c:	42b3      	cmp	r3, r6
	const char* currentPos;
	float startx = atof2(cmd, &currentPos, 100000.f);
	float starty = atof2(currentPos, &currentPos, 100000.f);
	float stopx = atof2(currentPos, &currentPos, 100000.f);
	float stopy = atof2(currentPos, &currentPos, 100000.f);
	int samplingResolution = atoi2(currentPos, &currentPos);
 8004d9e:	4607      	mov	r7, r0

	//sanity checks:
	if(currentPos - cmd > length){
 8004da0:	f300 80bf 	bgt.w	8004f22 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1c2>
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		return false;
	}
	if(startx > XSTAGE_LENGTH_MM || startx < 0){
 8004da4:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004da8:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8004fa0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x240>
 8004dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	f300 8098 	bgt.w	8004ee8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x188>
 8004db8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc0:	f100 8092 	bmi.w	8004ee8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x188>
		iout << "x param is out of bounds: " << startx << endl;
		return false;
	}
	if(starty > YSTAGE_LENGTH_MM || stopy < 0){
 8004dc4:	eddd 6a05 	vldr	s13, [sp, #20]
 8004dc8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	f300 80c5 	bgt.w	8004f5e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1fe>
 8004dd4:	ed9d 6a07 	vldr	s12, [sp, #28]
 8004dd8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8004ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de0:	f100 80bd 	bmi.w	8004f5e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1fe>
		iout << "y param is out of bounds: " << stopy << endl;
		return false;
	}
	if(stopx > XSTAGE_LENGTH_MM || stopx < startx){
 8004de4:	eddd 5a06 	vldr	s11, [sp, #24]
 8004de8:	eef4 5ae7 	vcmpe.f32	s11, s15
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	f300 80fc 	bgt.w	8004fec <_ZN8Handlers24rectanglePatternHandler2EPKci+0x28c>
 8004df4:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	f300 80f6 	bgt.w	8004fec <_ZN8Handlers24rectanglePatternHandler2EPKci+0x28c>
		iout << "stopx param is out of bounds: " << stopx << endl;
		return false;
	}
	if(stopy > YSTAGE_LENGTH_MM || stopy < starty){
 8004e00:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	f300 8105 	bgt.w	8005016 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2b6>
 8004e0c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	f300 80ff 	bgt.w	8005016 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2b6>
		iout << "stopy param is out of bounds: " << starty << endl;
		return false;
	}
	if(samplingResolution < CONTROLX_DEADBAND || samplingResolution > 100000){
 8004e18:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x244>)
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	f200 811d 	bhi.w	800505a <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2fa>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004e20:	4c61      	ldr	r4, [pc, #388]	; (8004fa8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x248>)
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 81e1 	beq.w	80051ec <_ZN8Handlers24rectanglePatternHandler2EPKci+0x48c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004e2a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	495f      	ldr	r1, [pc, #380]	; (8004fac <_ZN8Handlers24rectanglePatternHandler2EPKci+0x24c>)
 8004e30:	bf0c      	ite	eq
 8004e32:	4b5f      	ldreq	r3, [pc, #380]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004e34:	4b5f      	ldrne	r3, [pc, #380]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004e36:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8004e38:	4e5b      	ldr	r6, [pc, #364]	; (8004fa8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x248>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004e3a:	4d5f      	ldr	r5, [pc, #380]	; (8004fb8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x258>)
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	a904      	add	r1, sp, #16
 8004e40:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004e42:	6863      	ldr	r3, [r4, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 81cb 	beq.w	80051e0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x480>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004e4a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	495b      	ldr	r1, [pc, #364]	; (8004fbc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x25c>)
 8004e50:	bf0c      	ite	eq
 8004e52:	4b57      	ldreq	r3, [pc, #348]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004e54:	4b57      	ldrne	r3, [pc, #348]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004e56:	4798      	blx	r3
 8004e58:	4e53      	ldr	r6, [pc, #332]	; (8004fa8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x248>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004e5a:	a905      	add	r1, sp, #20
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 81b6 	beq.w	80051d4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x474>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004e68:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4953      	ldr	r1, [pc, #332]	; (8004fbc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x25c>)
 8004e6e:	bf0c      	ite	eq
 8004e70:	4b4f      	ldreq	r3, [pc, #316]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004e72:	4b50      	ldrne	r3, [pc, #320]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004e74:	4798      	blx	r3
 8004e76:	4e4c      	ldr	r6, [pc, #304]	; (8004fa8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x248>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004e78:	a906      	add	r1, sp, #24
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 81a1 	beq.w	80051c8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x468>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004e86:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004e88:	4630      	mov	r0, r6
 8004e8a:	494c      	ldr	r1, [pc, #304]	; (8004fbc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x25c>)
 8004e8c:	bf0c      	ite	eq
 8004e8e:	4b48      	ldreq	r3, [pc, #288]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004e90:	4b48      	ldrne	r3, [pc, #288]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004e92:	4798      	blx	r3
 8004e94:	4e44      	ldr	r6, [pc, #272]	; (8004fa8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x248>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004e96:	a907      	add	r1, sp, #28
 8004e98:	4630      	mov	r0, r6
 8004e9a:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 81aa 	beq.w	80051f8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x498>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004ea4:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004ea6:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	bf0c      	ite	eq
 8004eac:	4b44      	ldreq	r3, [pc, #272]	; (8004fc0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x260>)
			}
			else {
				this->writeHex(v);
 8004eae:	4b45      	ldrne	r3, [pc, #276]	; (8004fc4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x264>)
 8004eb0:	4798      	blx	r3
		running = 0;
		State::set(State::READY);
		dout << "Pattern done" << endl;
	}
	static int isRunning(){
		return running && !paused;
 8004eb2:	4d45      	ldr	r5, [pc, #276]	; (8004fc8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x268>)
 8004eb4:	782b      	ldrb	r3, [r5, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80f3 	beq.w	80050a2 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x342>
 8004ebc:	4b43      	ldr	r3, [pc, #268]	; (8004fcc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x26c>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 80ee 	bne.w	80050a2 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x342>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004ec6:	4c42      	ldr	r4, [pc, #264]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8219 	beq.w	8005302 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5a2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004ed0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	493f      	ldr	r1, [pc, #252]	; (8004fd4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x274>)
 8004ed6:	bf0c      	ite	eq
 8004ed8:	4b35      	ldreq	r3, [pc, #212]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004eda:	4b36      	ldrne	r3, [pc, #216]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004edc:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004ede:	6864      	ldr	r4, [r4, #4]
 8004ee0:	b9b4      	cbnz	r4, 8004f10 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b0>
				this->device->write(v);
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	e04f      	b.n	8004f88 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x228>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004ee8:	4c39      	ldr	r4, [pc, #228]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
 8004eea:	6863      	ldr	r3, [r4, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80a8 	beq.w	8005042 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2e2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004ef2:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4938      	ldr	r1, [pc, #224]	; (8004fd8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x278>)
 8004ef8:	bf0c      	ite	eq
 8004efa:	4b2d      	ldreq	r3, [pc, #180]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004efc:	4b2d      	ldrne	r3, [pc, #180]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004efe:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8004f00:	4d33      	ldr	r5, [pc, #204]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004f02:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x258>)
 8004f04:	4628      	mov	r0, r5
 8004f06:	a904      	add	r1, sp, #16
 8004f08:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004f0a:	6864      	ldr	r4, [r4, #4]
 8004f0c:	2c00      	cmp	r4, #0
 8004f0e:	d03a      	beq.n	8004f86 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x226>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004f10:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004f12:	2c02      	cmp	r4, #2
				this->writeBin(v);
 8004f14:	482e      	ldr	r0, [pc, #184]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004f16:	d01e      	beq.n	8004f56 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1f6>
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 8004f18:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x264>)
 8004f1a:	4798      	blx	r3
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		return false;
	}
	if(startx > XSTAGE_LENGTH_MM || startx < 0){
		iout << "x param is out of bounds: " << startx << endl;
		return false;
 8004f1c:	2000      	movs	r0, #0
	rect.configure(startx, starty, stopx-startx, stopy-starty);
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
}
 8004f1e:	b009      	add	sp, #36	; 0x24
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004f22:	4c2e      	ldr	r4, [pc, #184]	; (8004fdc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x27c>)
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8091 	beq.w	800504e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2ee>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004f2c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	492b      	ldr	r1, [pc, #172]	; (8004fe0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x280>)
 8004f32:	bf0c      	ite	eq
 8004f34:	4b1e      	ldreq	r3, [pc, #120]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004f36:	4b1f      	ldrne	r3, [pc, #124]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004f38:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8004f3a:	9903      	ldr	r1, [sp, #12]
	float stopy = atof2(currentPos, &currentPos, 100000.f);
	int samplingResolution = atoi2(currentPos, &currentPos);

	//sanity checks:
	if(currentPos - cmd > length){
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
 8004f3c:	4e27      	ldr	r6, [pc, #156]	; (8004fdc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x27c>)
 8004f3e:	4b29      	ldr	r3, [pc, #164]	; (8004fe4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x284>)
 8004f40:	4630      	mov	r0, r6
 8004f42:	1b49      	subs	r1, r1, r5
 8004f44:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004f46:	6864      	ldr	r4, [r4, #4]
 8004f48:	2c00      	cmp	r4, #0
 8004f4a:	f000 809c 	beq.w	8005086 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x326>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8004f4e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004f50:	2c02      	cmp	r4, #2
				this->writeBin(v);
 8004f52:	4630      	mov	r0, r6
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8004f54:	d1e0      	bne.n	8004f18 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b8>
				this->writeBin(v);
 8004f56:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x260>)
 8004f58:	4798      	blx	r3
		return false;
	}
	if(startx > XSTAGE_LENGTH_MM || startx < 0){
		iout << "x param is out of bounds: " << startx << endl;
		return false;
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e7df      	b.n	8004f1e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1be>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004f5e:	4c1c      	ldr	r4, [pc, #112]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8091 	beq.w	800508a <_ZN8Handlers24rectanglePatternHandler2EPKci+0x32a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004f68:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	491e      	ldr	r1, [pc, #120]	; (8004fe8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x288>)
 8004f6e:	bf0c      	ite	eq
 8004f70:	4b0f      	ldreq	r3, [pc, #60]	; (8004fb0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x250>)
			}
			else {
				this->writeHex(s);
 8004f72:	4b10      	ldrne	r3, [pc, #64]	; (8004fb4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x254>)
 8004f74:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8004f76:	4d16      	ldr	r5, [pc, #88]	; (8004fd0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x270>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x258>)
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	a907      	add	r1, sp, #28
 8004f7e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8004f80:	6864      	ldr	r4, [r4, #4]
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	d1c4      	bne.n	8004f10 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b0>
				this->device->write(v);
 8004f86:	6828      	ldr	r0, [r5, #0]
 8004f88:	6803      	ldr	r3, [r0, #0]
 8004f8a:	210a      	movs	r1, #10
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4798      	blx	r3
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		return false;
	}
	if(startx > XSTAGE_LENGTH_MM || startx < 0){
		iout << "x param is out of bounds: " << startx << endl;
		return false;
 8004f90:	4620      	mov	r0, r4
 8004f92:	e7c4      	b.n	8004f1e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1be>
 8004f94:	08000669 	.word	0x08000669
 8004f98:	47c35000 	.word	0x47c35000
 8004f9c:	080004b1 	.word	0x080004b1
 8004fa0:	42c80000 	.word	0x42c80000
 8004fa4:	000186a0 	.word	0x000186a0
 8004fa8:	200013bc 	.word	0x200013bc
 8004fac:	08009678 	.word	0x08009678
 8004fb0:	080079ed 	.word	0x080079ed
 8004fb4:	080079a9 	.word	0x080079a9
 8004fb8:	08007b2d 	.word	0x08007b2d
 8004fbc:	08009438 	.word	0x08009438
 8004fc0:	08007af5 	.word	0x08007af5
 8004fc4:	08007ac1 	.word	0x08007ac1
 8004fc8:	200008d0 	.word	0x200008d0
 8004fcc:	200008d8 	.word	0x200008d8
 8004fd0:	200013d0 	.word	0x200013d0
 8004fd4:	08009560 	.word	0x08009560
 8004fd8:	0800963c 	.word	0x0800963c
 8004fdc:	20001184 	.word	0x20001184
 8004fe0:	080095f8 	.word	0x080095f8
 8004fe4:	080078f9 	.word	0x080078f9
 8004fe8:	0800965c 	.word	0x0800965c
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8004fec:	4c95      	ldr	r4, [pc, #596]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d050      	beq.n	8005096 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x336>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8004ff4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	4993      	ldr	r1, [pc, #588]	; (8005248 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e8>)
 8004ffa:	bf0c      	ite	eq
 8004ffc:	4b93      	ldreq	r3, [pc, #588]	; (800524c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 8004ffe:	4b94      	ldrne	r3, [pc, #592]	; (8005250 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f0>)
 8005000:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 8005002:	4d90      	ldr	r5, [pc, #576]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005004:	4b93      	ldr	r3, [pc, #588]	; (8005254 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f4>)
 8005006:	4628      	mov	r0, r5
 8005008:	a906      	add	r1, sp, #24
 800500a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800500c:	6864      	ldr	r4, [r4, #4]
 800500e:	2c00      	cmp	r4, #0
 8005010:	f47f af7e 	bne.w	8004f10 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b0>
 8005014:	e7b7      	b.n	8004f86 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x226>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005016:	4c8b      	ldr	r4, [pc, #556]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80b5 	beq.w	800518a <_ZN8Handlers24rectanglePatternHandler2EPKci+0x42a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005020:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005022:	4620      	mov	r0, r4
 8005024:	498c      	ldr	r1, [pc, #560]	; (8005258 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f8>)
 8005026:	bf0c      	ite	eq
 8005028:	4b88      	ldreq	r3, [pc, #544]	; (800524c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 800502a:	4b89      	ldrne	r3, [pc, #548]	; (8005250 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f0>)
 800502c:	4798      	blx	r3
 800502e:	4d85      	ldr	r5, [pc, #532]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005030:	4b88      	ldr	r3, [pc, #544]	; (8005254 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f4>)
 8005032:	4628      	mov	r0, r5
 8005034:	a905      	add	r1, sp, #20
 8005036:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005038:	6864      	ldr	r4, [r4, #4]
 800503a:	2c00      	cmp	r4, #0
 800503c:	f47f af68 	bne.w	8004f10 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b0>
 8005040:	e7a1      	b.n	8004f86 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x226>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005042:	6820      	ldr	r0, [r4, #0]
 8005044:	4985      	ldr	r1, [pc, #532]	; (800525c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4fc>)
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	4798      	blx	r3
 800504c:	e758      	b.n	8004f00 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1a0>
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	4983      	ldr	r1, [pc, #524]	; (8005260 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x500>)
 8005052:	6803      	ldr	r3, [r0, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4798      	blx	r3
 8005058:	e76f      	b.n	8004f3a <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1da>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800505a:	4c7a      	ldr	r4, [pc, #488]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80d0 	beq.w	8005204 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4a4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005064:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005066:	4620      	mov	r0, r4
 8005068:	497e      	ldr	r1, [pc, #504]	; (8005264 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x504>)
 800506a:	bf0c      	ite	eq
 800506c:	4b77      	ldreq	r3, [pc, #476]	; (800524c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 800506e:	4b78      	ldrne	r3, [pc, #480]	; (8005250 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f0>)
 8005070:	4798      	blx	r3
 8005072:	4d74      	ldr	r5, [pc, #464]	; (8005244 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e4>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8005074:	4b7c      	ldr	r3, [pc, #496]	; (8005268 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x508>)
 8005076:	4628      	mov	r0, r5
 8005078:	4639      	mov	r1, r7
 800507a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800507c:	6864      	ldr	r4, [r4, #4]
 800507e:	2c00      	cmp	r4, #0
 8005080:	f47f af46 	bne.w	8004f10 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1b0>
 8005084:	e77f      	b.n	8004f86 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x226>
				this->device->write(v);
 8005086:	6830      	ldr	r0, [r6, #0]
 8005088:	e77e      	b.n	8004f88 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x228>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	4977      	ldr	r1, [pc, #476]	; (800526c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x50c>)
 800508e:	6803      	ldr	r3, [r0, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4798      	blx	r3
 8005094:	e76f      	b.n	8004f76 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x216>
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	496b      	ldr	r1, [pc, #428]	; (8005248 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4e8>)
 800509a:	6803      	ldr	r3, [r0, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4798      	blx	r3
 80050a0:	e7af      	b.n	8005002 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2a2>
	if(Pattern::isRunning()){
		iout << "Previous pattern is still running!" << endl;
		return false;
	}

	Utils::enableSystick();
 80050a2:	4b73      	ldr	r3, [pc, #460]	; (8005270 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x510>)
 80050a4:	4798      	blx	r3
	Control<ALL>::enablePositionControl(true);
 80050a6:	2001      	movs	r0, #1
 80050a8:	4b72      	ldr	r3, [pc, #456]	; (8005274 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x514>)
 80050aa:	4798      	blx	r3
	if(startx == lastx && starty == lasty && stopx == lastStopX && stopy == lastStopY){
 80050ac:	4b72      	ldr	r3, [pc, #456]	; (8005278 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x518>)
 80050ae:	eddd 7a04 	vldr	s15, [sp, #16]
 80050b2:	ed93 7a00 	vldr	s14, [r3]
 80050b6:	eef4 7a47 	vcmp.f32	s15, s14
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	d179      	bne.n	80051b4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x454>
 80050c0:	4a6e      	ldr	r2, [pc, #440]	; (800527c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x51c>)
 80050c2:	ed9d 7a05 	vldr	s14, [sp, #20]
 80050c6:	edd2 6a00 	vldr	s13, [r2]
 80050ca:	eeb4 7a66 	vcmp.f32	s14, s13
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	d060      	beq.n	8005196 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x436>
 80050d4:	ed9d 6a07 	vldr	s12, [sp, #28]
 80050d8:	eddd 6a06 	vldr	s13, [sp, #24]
 80050dc:	4968      	ldr	r1, [pc, #416]	; (8005280 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x520>)
 80050de:	4e69      	ldr	r6, [pc, #420]	; (8005284 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x524>)
		Trigger::enable(true);
		Pattern::start();
		return true;
	}

	lastx = startx;
 80050e0:	edc3 7a00 	vstr	s15, [r3]
	lasty = starty;
	lastStopX = stopx;
	lastStopY = stopy;

	//demonstrate pattern outline
	Trigger::enable(true);
 80050e4:	2001      	movs	r0, #1
 80050e6:	4b68      	ldr	r3, [pc, #416]	; (8005288 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x528>)
		return true;
	}

	lastx = startx;
	lasty = starty;
	lastStopX = stopx;
 80050e8:	edc1 6a00 	vstr	s13, [r1]
	lastStopY = stopy;
 80050ec:	ed86 6a00 	vstr	s12, [r6]
		Pattern::start();
		return true;
	}

	lastx = startx;
	lasty = starty;
 80050f0:	ed82 7a00 	vstr	s14, [r2]
	lastStopX = stopx;
	lastStopY = stopy;

	//demonstrate pattern outline
	Trigger::enable(true);
 80050f4:	4798      	blx	r3
	Quadrangle rect;
	rect.configure(startx, starty, stopx-startx, stopy-starty);
 80050f6:	9804      	ldr	r0, [sp, #16]
 80050f8:	9905      	ldr	r1, [sp, #20]
 80050fa:	4e64      	ldr	r6, [pc, #400]	; (800528c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x52c>)
 80050fc:	eddd 7a06 	vldr	s15, [sp, #24]
 8005100:	ee07 0a10 	vmov	s14, r0
 8005104:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005108:	eddd 7a07 	vldr	s15, [sp, #28]
 800510c:	ee17 2a10 	vmov	r2, s14
 8005110:	ee07 1a10 	vmov	s14, r1
 8005114:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005118:	ee17 3a10 	vmov	r3, s14
 800511c:	47b0      	blx	r6
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 800511e:	4a5c      	ldr	r2, [pc, #368]	; (8005290 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x530>)
 8005120:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x534>)
 8005122:	601a      	str	r2, [r3, #0]
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
 8005124:	2301      	movs	r3, #1
 8005126:	702b      	strb	r3, [r5, #0]
		paused = false;
 8005128:	4b5b      	ldr	r3, [pc, #364]	; (8005298 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x538>)
 800512a:	2200      	movs	r2, #0
		State::set(State::SCANNING_RECTANGLE);
 800512c:	2004      	movs	r0, #4
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
		paused = false;
 800512e:	701a      	strb	r2, [r3, #0]
		State::set(State::SCANNING_RECTANGLE);
 8005130:	4b5a      	ldr	r3, [pc, #360]	; (800529c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x53c>)
 8005132:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	485a      	ldr	r0, [pc, #360]	; (80052a0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x540>)
 8005138:	2b00      	cmp	r3, #0
 800513a:	d07c      	beq.n	8005236 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4d6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800513c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800513e:	4959      	ldr	r1, [pc, #356]	; (80052a4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x544>)
 8005140:	bf0c      	ite	eq
 8005142:	4b42      	ldreq	r3, [pc, #264]	; (800524c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 8005144:	4b42      	ldrne	r3, [pc, #264]	; (8005250 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f0>)
 8005146:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	4855      	ldr	r0, [pc, #340]	; (80052a0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x540>)
 800514c:	2b00      	cmp	r3, #0
 800514e:	d06c      	beq.n	800522a <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ca>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8005150:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005152:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8005154:	bf0c      	ite	eq
 8005156:	4b54      	ldreq	r3, [pc, #336]	; (80052a8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x548>)
			}
			else {
				this->writeHex(v);
 8005158:	4b54      	ldrne	r3, [pc, #336]	; (80052ac <_ZN8Handlers24rectanglePatternHandler2EPKci+0x54c>)
 800515a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800515c:	4c54      	ldr	r4, [pc, #336]	; (80052b0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x550>)
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05c      	beq.n	800521e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4be>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005164:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005166:	4620      	mov	r0, r4
 8005168:	4952      	ldr	r1, [pc, #328]	; (80052b4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x554>)
 800516a:	bf0c      	ite	eq
 800516c:	4b37      	ldreq	r3, [pc, #220]	; (800524c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 800516e:	4b38      	ldrne	r3, [pc, #224]	; (8005250 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f0>)
 8005170:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	484e      	ldr	r0, [pc, #312]	; (80052b0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x550>)
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04a      	beq.n	8005210 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4b0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800517a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800517c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800517e:	bf0c      	ite	eq
 8005180:	4b49      	ldreq	r3, [pc, #292]	; (80052a8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x548>)
			}
			else {
				this->writeHex(v);
 8005182:	4b4a      	ldrne	r3, [pc, #296]	; (80052ac <_ZN8Handlers24rectanglePatternHandler2EPKci+0x54c>)
 8005184:	4798      	blx	r3
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
 8005186:	2001      	movs	r0, #1
 8005188:	e6c9      	b.n	8004f1e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1be>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	4932      	ldr	r1, [pc, #200]	; (8005258 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x4f8>)
 800518e:	6803      	ldr	r3, [r0, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4798      	blx	r3
 8005194:	e74b      	b.n	800502e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x2ce>
		return false;
	}

	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(startx == lastx && starty == lasty && stopx == lastStopX && stopy == lastStopY){
 8005196:	493a      	ldr	r1, [pc, #232]	; (8005280 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x520>)
 8005198:	eddd 6a06 	vldr	s13, [sp, #24]
 800519c:	ed91 6a00 	vldr	s12, [r1]
 80051a0:	eef4 6a46 	vcmp.f32	s13, s12
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	f000 808a 	beq.w	80052c0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x560>
 80051ac:	ed9d 6a07 	vldr	s12, [sp, #28]
 80051b0:	4e34      	ldr	r6, [pc, #208]	; (8005284 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x524>)
 80051b2:	e795      	b.n	80050e0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x380>
 80051b4:	ed9d 7a05 	vldr	s14, [sp, #20]
 80051b8:	ed9d 6a07 	vldr	s12, [sp, #28]
 80051bc:	eddd 6a06 	vldr	s13, [sp, #24]
 80051c0:	4a2e      	ldr	r2, [pc, #184]	; (800527c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x51c>)
 80051c2:	492f      	ldr	r1, [pc, #188]	; (8005280 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x520>)
 80051c4:	4e2f      	ldr	r6, [pc, #188]	; (8005284 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x524>)
 80051c6:	e78b      	b.n	80050e0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x380>
 80051c8:	6830      	ldr	r0, [r6, #0]
 80051ca:	493b      	ldr	r1, [pc, #236]	; (80052b8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x558>)
 80051cc:	6803      	ldr	r3, [r0, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4798      	blx	r3
 80051d2:	e65f      	b.n	8004e94 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x134>
 80051d4:	6830      	ldr	r0, [r6, #0]
 80051d6:	4938      	ldr	r1, [pc, #224]	; (80052b8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x558>)
 80051d8:	6803      	ldr	r3, [r0, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4798      	blx	r3
 80051de:	e64a      	b.n	8004e76 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x116>
 80051e0:	6830      	ldr	r0, [r6, #0]
 80051e2:	4935      	ldr	r1, [pc, #212]	; (80052b8 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x558>)
 80051e4:	6803      	ldr	r3, [r0, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4798      	blx	r3
 80051ea:	e635      	b.n	8004e58 <_ZN8Handlers24rectanglePatternHandler2EPKci+0xf8>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	4933      	ldr	r1, [pc, #204]	; (80052bc <_ZN8Handlers24rectanglePatternHandler2EPKci+0x55c>)
 80051f0:	6803      	ldr	r3, [r0, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4798      	blx	r3
 80051f6:	e61f      	b.n	8004e38 <_ZN8Handlers24rectanglePatternHandler2EPKci+0xd8>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80051f8:	6830      	ldr	r0, [r6, #0]
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	210a      	movs	r1, #10
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4798      	blx	r3
 8005202:	e656      	b.n	8004eb2 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x152>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	4917      	ldr	r1, [pc, #92]	; (8005264 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x504>)
 8005208:	6803      	ldr	r3, [r0, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4798      	blx	r3
 800520e:	e730      	b.n	8005072 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x312>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8005210:	6800      	ldr	r0, [r0, #0]
 8005212:	6803      	ldr	r3, [r0, #0]
 8005214:	210a      	movs	r1, #10
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	4798      	blx	r3
	Quadrangle rect;
	rect.configure(startx, starty, stopx-startx, stopy-starty);
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
 800521a:	2001      	movs	r0, #1
 800521c:	e67f      	b.n	8004f1e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1be>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	4924      	ldr	r1, [pc, #144]	; (80052b4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x554>)
 8005222:	6803      	ldr	r3, [r0, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4798      	blx	r3
 8005228:	e7a3      	b.n	8005172 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x412>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	6803      	ldr	r3, [r0, #0]
 800522e:	210a      	movs	r1, #10
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4798      	blx	r3
 8005234:	e792      	b.n	800515c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x3fc>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005236:	6800      	ldr	r0, [r0, #0]
 8005238:	491a      	ldr	r1, [pc, #104]	; (80052a4 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x544>)
 800523a:	6803      	ldr	r3, [r0, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4798      	blx	r3
 8005240:	e782      	b.n	8005148 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x3e8>
 8005242:	bf00      	nop
 8005244:	200013d0 	.word	0x200013d0
 8005248:	08009638 	.word	0x08009638
 800524c:	080079ed 	.word	0x080079ed
 8005250:	080079a9 	.word	0x080079a9
 8005254:	08007b2d 	.word	0x08007b2d
 8005258:	08009658 	.word	0x08009658
 800525c:	0800963c 	.word	0x0800963c
 8005260:	080095f8 	.word	0x080095f8
 8005264:	08009608 	.word	0x08009608
 8005268:	080078f9 	.word	0x080078f9
 800526c:	0800965c 	.word	0x0800965c
 8005270:	0800697d 	.word	0x0800697d
 8005274:	08000ef9 	.word	0x08000ef9
 8005278:	20000054 	.word	0x20000054
 800527c:	20000058 	.word	0x20000058
 8005280:	2000005c 	.word	0x2000005c
 8005284:	20000060 	.word	0x20000060
 8005288:	080004a5 	.word	0x080004a5
 800528c:	080062c1 	.word	0x080062c1
 8005290:	08006465 	.word	0x08006465
 8005294:	200008d4 	.word	0x200008d4
 8005298:	200008d8 	.word	0x200008d8
 800529c:	080067d5 	.word	0x080067d5
 80052a0:	200013bc 	.word	0x200013bc
 80052a4:	08009584 	.word	0x08009584
 80052a8:	08007af5 	.word	0x08007af5
 80052ac:	08007ac1 	.word	0x08007ac1
 80052b0:	2000118c 	.word	0x2000118c
 80052b4:	08009594 	.word	0x08009594
 80052b8:	08009438 	.word	0x08009438
 80052bc:	08009678 	.word	0x08009678
		return false;
	}

	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(startx == lastx && starty == lasty && stopx == lastStopX && stopy == lastStopY){
 80052c0:	4e13      	ldr	r6, [pc, #76]	; (8005310 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5b0>)
 80052c2:	ed9d 6a07 	vldr	s12, [sp, #28]
 80052c6:	edd6 5a00 	vldr	s11, [r6]
 80052ca:	eeb4 6a65 	vcmp.f32	s12, s11
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	f47f af05 	bne.w	80050e0 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x380>
		//execute pattern
		Trigger::enable(true);
 80052d6:	2001      	movs	r0, #1
 80052d8:	4c0e      	ldr	r4, [pc, #56]	; (8005314 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5b4>)
		QuadrangleZigZag zRect;
		zRect.configure2(startx, starty, stopx, stopy, samplingResolution);
 80052da:	4d0f      	ldr	r5, [pc, #60]	; (8005318 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5b8>)

	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(startx == lastx && starty == lasty && stopx == lastStopX && stopy == lastStopY){
		//execute pattern
		Trigger::enable(true);
 80052dc:	47a0      	blx	r4
		QuadrangleZigZag zRect;
		zRect.configure2(startx, starty, stopx, stopy, samplingResolution);
 80052de:	9905      	ldr	r1, [sp, #20]
 80052e0:	9a06      	ldr	r2, [sp, #24]
 80052e2:	9b07      	ldr	r3, [sp, #28]
 80052e4:	9804      	ldr	r0, [sp, #16]
 80052e6:	9700      	str	r7, [sp, #0]
 80052e8:	47a8      	blx	r5
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5bc>)
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5c0>)
		Pattern::setPattern(zRect);
		Trigger::setThreshold(samplingResolution);
 80052ee:	4638      	mov	r0, r7
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5c4>)
 80052f4:	4798      	blx	r3
		Trigger::enable(true);
 80052f6:	2001      	movs	r0, #1
 80052f8:	47a0      	blx	r4
		Pattern::start();
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5c8>)
 80052fc:	4798      	blx	r3
		return true;
 80052fe:	2001      	movs	r0, #1
 8005300:	e60d      	b.n	8004f1e <_ZN8Handlers24rectanglePatternHandler2EPKci+0x1be>
 8005302:	6820      	ldr	r0, [r4, #0]
 8005304:	4909      	ldr	r1, [pc, #36]	; (800532c <_ZN8Handlers24rectanglePatternHandler2EPKci+0x5cc>)
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	4798      	blx	r3
 800530c:	e5e7      	b.n	8004ede <_ZN8Handlers24rectanglePatternHandler2EPKci+0x17e>
 800530e:	bf00      	nop
 8005310:	20000060 	.word	0x20000060
 8005314:	080004a5 	.word	0x080004a5
 8005318:	080060e1 	.word	0x080060e1
 800531c:	08005cd5 	.word	0x08005cd5
 8005320:	200008d4 	.word	0x200008d4
 8005324:	08000491 	.word	0x08000491
 8005328:	08004c89 	.word	0x08004c89
 800532c:	08009560 	.word	0x08009560

08005330 <_ZN8Handlers23rectanglePatternHandlerEPKci>:
	Pattern::start();

	return true;
}

static bool rectanglePatternHandler(const char* cmd, int length){
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b089      	sub	sp, #36	; 0x24
	//expected: 4 arguments: x, y, width, height
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
 8005334:	4c8d      	ldr	r4, [pc, #564]	; (800556c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x23c>)
 8005336:	4a8e      	ldr	r2, [pc, #568]	; (8005570 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x240>)
	Pattern::start();

	return true;
}

static bool rectanglePatternHandler(const char* cmd, int length){
 8005338:	460e      	mov	r6, r1
	//expected: 4 arguments: x, y, width, height
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
 800533a:	a902      	add	r1, sp, #8
	Pattern::start();

	return true;
}

static bool rectanglePatternHandler(const char* cmd, int length){
 800533c:	4605      	mov	r5, r0
	//expected: 4 arguments: x, y, width, height
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
 800533e:	47a0      	blx	r4
	float y = atof2(currentPos, &currentPos, 100000.f);
 8005340:	a902      	add	r1, sp, #8
static bool rectanglePatternHandler(const char* cmd, int length){
	//expected: 4 arguments: x, y, width, height
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
 8005342:	9003      	str	r0, [sp, #12]
	float y = atof2(currentPos, &currentPos, 100000.f);
 8005344:	4a8a      	ldr	r2, [pc, #552]	; (8005570 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x240>)
 8005346:	9802      	ldr	r0, [sp, #8]
 8005348:	47a0      	blx	r4
	float width = atof2(currentPos, &currentPos, 100000.f);
 800534a:	a902      	add	r1, sp, #8
	//expected: 4 arguments: x, y, width, height
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
	float y = atof2(currentPos, &currentPos, 100000.f);
 800534c:	9004      	str	r0, [sp, #16]
	float width = atof2(currentPos, &currentPos, 100000.f);
 800534e:	4a88      	ldr	r2, [pc, #544]	; (8005570 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x240>)
 8005350:	9802      	ldr	r0, [sp, #8]
 8005352:	47a0      	blx	r4
	float height = atof2(currentPos, &currentPos, 100000.f);
 8005354:	a902      	add	r1, sp, #8
	static float lastx=-1, lasty=-1, lastw=-1, lasth=-1;

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
	float y = atof2(currentPos, &currentPos, 100000.f);
	float width = atof2(currentPos, &currentPos, 100000.f);
 8005356:	9005      	str	r0, [sp, #20]
	float height = atof2(currentPos, &currentPos, 100000.f);
 8005358:	4a85      	ldr	r2, [pc, #532]	; (8005570 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x240>)
 800535a:	9802      	ldr	r0, [sp, #8]
 800535c:	47a0      	blx	r4
	int samplingResolution = atoi2(currentPos, &currentPos);
 800535e:	4b85      	ldr	r3, [pc, #532]	; (8005574 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x244>)

	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
	float y = atof2(currentPos, &currentPos, 100000.f);
	float width = atof2(currentPos, &currentPos, 100000.f);
	float height = atof2(currentPos, &currentPos, 100000.f);
 8005360:	9006      	str	r0, [sp, #24]
	int samplingResolution = atoi2(currentPos, &currentPos);
 8005362:	a902      	add	r1, sp, #8
 8005364:	9802      	ldr	r0, [sp, #8]
 8005366:	4798      	blx	r3

	//sanity checks:
	if(currentPos - cmd > length){
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	1b5b      	subs	r3, r3, r5
 800536c:	42b3      	cmp	r3, r6
	const char* currentPos;
	float x = atof2(cmd, &currentPos, 100000.f);
	float y = atof2(currentPos, &currentPos, 100000.f);
	float width = atof2(currentPos, &currentPos, 100000.f);
	float height = atof2(currentPos, &currentPos, 100000.f);
	int samplingResolution = atoi2(currentPos, &currentPos);
 800536e:	4607      	mov	r7, r0

	//sanity checks:
	if(currentPos - cmd > length){
 8005370:	f300 80c3 	bgt.w	80054fa <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1ca>
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		return false;
	}
	if(x > XSTAGE_LENGTH_MM || x < 0){
 8005374:	ed9d 7a03 	vldr	s14, [sp, #12]
 8005378:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8005578 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x248>
 800537c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005384:	f300 809c 	bgt.w	80054c0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x190>
 8005388:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	f100 8096 	bmi.w	80054c0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x190>
		iout << "x param is out of bounds: " << x << endl;
		return false;
	}
	if(y > YSTAGE_LENGTH_MM || y < 0){
 8005394:	eddd 6a04 	vldr	s13, [sp, #16]
 8005398:	eef4 6ae7 	vcmpe.f32	s13, s15
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	f300 80c9 	bgt.w	8005536 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x206>
 80053a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	f100 80c3 	bmi.w	8005536 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x206>
		iout << "y param is out of bounds: " << y << endl;
		return false;
	}
	if(x+width > XSTAGE_LENGTH_MM || width <= 0){
 80053b0:	ed9d 6a05 	vldr	s12, [sp, #20]
 80053b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80053b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c0:	f300 8182 	bgt.w	80056c8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x398>
 80053c4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80053c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053cc:	f240 817c 	bls.w	80056c8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x398>
		iout << "(x+)width param is out of bounds: " << (x+width) << endl;
		return false;
	}
	if(y+height > YSTAGE_LENGTH_MM || height <= 0){
 80053d0:	ed9d 7a06 	vldr	s14, [sp, #24]
 80053d4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80053d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80053dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e0:	f300 80f0 	bgt.w	80055c4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x294>
 80053e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	f240 80ea 	bls.w	80055c4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x294>
		iout << "(y+)height param is out of bounds: " << height << endl;
		return false;
	}
	if(samplingResolution < CONTROLX_DEADBAND || samplingResolution > 100000){
 80053f0:	4b62      	ldr	r3, [pc, #392]	; (800557c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x24c>)
 80053f2:	4298      	cmp	r0, r3
 80053f4:	f200 8191 	bhi.w	800571a <_ZN8Handlers23rectanglePatternHandlerEPKci+0x3ea>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80053f8:	4c61      	ldr	r4, [pc, #388]	; (8005580 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x250>)
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 81f0 	beq.w	80057e2 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4b2>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005402:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005404:	4620      	mov	r0, r4
 8005406:	495f      	ldr	r1, [pc, #380]	; (8005584 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x254>)
 8005408:	bf0c      	ite	eq
 800540a:	4b5f      	ldreq	r3, [pc, #380]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 800540c:	4b5f      	ldrne	r3, [pc, #380]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 800540e:	4798      	blx	r3
		speed = -1200;
	}
	Control<ALL>::enablePositionControl(false);
	Control<ALL>::enableSpeedControl(false);
	Motor<axis>::setSpeed(speed);
	dout << axis << " set pwm to " << speed << endl;
 8005410:	4e5b      	ldr	r6, [pc, #364]	; (8005580 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x250>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005412:	4d5f      	ldr	r5, [pc, #380]	; (8005590 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x260>)
 8005414:	4630      	mov	r0, r6
 8005416:	a903      	add	r1, sp, #12
 8005418:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 81da 	beq.w	80057d6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4a6>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005422:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005424:	4630      	mov	r0, r6
 8005426:	495b      	ldr	r1, [pc, #364]	; (8005594 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x264>)
 8005428:	bf0c      	ite	eq
 800542a:	4b57      	ldreq	r3, [pc, #348]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 800542c:	4b57      	ldrne	r3, [pc, #348]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 800542e:	4798      	blx	r3
 8005430:	4e53      	ldr	r6, [pc, #332]	; (8005580 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x250>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005432:	a904      	add	r1, sp, #16
 8005434:	4630      	mov	r0, r6
 8005436:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 81c5 	beq.w	80057ca <_ZN8Handlers23rectanglePatternHandlerEPKci+0x49a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005440:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005442:	4630      	mov	r0, r6
 8005444:	4953      	ldr	r1, [pc, #332]	; (8005594 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x264>)
 8005446:	bf0c      	ite	eq
 8005448:	4b4f      	ldreq	r3, [pc, #316]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 800544a:	4b50      	ldrne	r3, [pc, #320]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 800544c:	4798      	blx	r3
 800544e:	4e4c      	ldr	r6, [pc, #304]	; (8005580 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x250>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005450:	a905      	add	r1, sp, #20
 8005452:	4630      	mov	r0, r6
 8005454:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 81b0 	beq.w	80057be <_ZN8Handlers23rectanglePatternHandlerEPKci+0x48e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800545e:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005460:	4630      	mov	r0, r6
 8005462:	494c      	ldr	r1, [pc, #304]	; (8005594 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x264>)
 8005464:	bf0c      	ite	eq
 8005466:	4b48      	ldreq	r3, [pc, #288]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 8005468:	4b48      	ldrne	r3, [pc, #288]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 800546a:	4798      	blx	r3
 800546c:	4e44      	ldr	r6, [pc, #272]	; (8005580 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x250>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 800546e:	a906      	add	r1, sp, #24
 8005470:	4630      	mov	r0, r6
 8005472:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 819b 	beq.w	80057b2 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x482>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800547c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800547e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8005480:	4630      	mov	r0, r6
 8005482:	bf0c      	ite	eq
 8005484:	4b44      	ldreq	r3, [pc, #272]	; (8005598 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x268>)
			}
			else {
				this->writeHex(v);
 8005486:	4b45      	ldrne	r3, [pc, #276]	; (800559c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x26c>)
 8005488:	4798      	blx	r3
		running = 0;
		State::set(State::READY);
		dout << "Pattern done" << endl;
	}
	static int isRunning(){
		return running && !paused;
 800548a:	4d45      	ldr	r5, [pc, #276]	; (80055a0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x270>)
 800548c:	782b      	ldrb	r3, [r5, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ae 	beq.w	80055f0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x2c0>
 8005494:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x274>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 80a9 	bne.w	80055f0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x2c0>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800549e:	4c42      	ldr	r4, [pc, #264]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8221 	beq.w	80058ea <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5ba>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80054a8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80054aa:	4620      	mov	r0, r4
 80054ac:	493f      	ldr	r1, [pc, #252]	; (80055ac <_ZN8Handlers23rectanglePatternHandlerEPKci+0x27c>)
 80054ae:	bf0c      	ite	eq
 80054b0:	4b35      	ldreq	r3, [pc, #212]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 80054b2:	4b36      	ldrne	r3, [pc, #216]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 80054b4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80054b6:	6864      	ldr	r4, [r4, #4]
 80054b8:	b9b4      	cbnz	r4, 80054e8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1b8>
				this->device->write(v);
 80054ba:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	e04f      	b.n	8005560 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x230>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80054c0:	4c39      	ldr	r4, [pc, #228]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8122 	beq.w	800570e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x3de>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80054ca:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80054cc:	4620      	mov	r0, r4
 80054ce:	4938      	ldr	r1, [pc, #224]	; (80055b0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x280>)
 80054d0:	bf0c      	ite	eq
 80054d2:	4b2d      	ldreq	r3, [pc, #180]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 80054d4:	4b2d      	ldrne	r3, [pc, #180]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 80054d6:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 80054d8:	4d33      	ldr	r5, [pc, #204]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 80054da:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x260>)
 80054dc:	4628      	mov	r0, r5
 80054de:	a903      	add	r1, sp, #12
 80054e0:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80054e2:	6864      	ldr	r4, [r4, #4]
 80054e4:	2c00      	cmp	r4, #0
 80054e6:	d03a      	beq.n	800555e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x22e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80054e8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80054ea:	2c02      	cmp	r4, #2
				this->writeBin(v);
 80054ec:	482e      	ldr	r0, [pc, #184]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80054ee:	d01e      	beq.n	800552e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1fe>
				this->writeBin(v);
			}
			else {
				this->writeHex(v);
 80054f0:	4b2a      	ldr	r3, [pc, #168]	; (800559c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x26c>)
 80054f2:	4798      	blx	r3
		iout << "y param is out of bounds: " << y << endl;
		return false;
	}
	if(x+width > XSTAGE_LENGTH_MM || width <= 0){
		iout << "(x+)width param is out of bounds: " << (x+width) << endl;
		return false;
 80054f4:	2000      	movs	r0, #0
	rect.configure(x, y, width, height);
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
}
 80054f6:	b009      	add	sp, #36	; 0x24
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80054fa:	4c2e      	ldr	r4, [pc, #184]	; (80055b4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x284>)
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 811f 	beq.w	8005742 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x412>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005504:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005506:	4620      	mov	r0, r4
 8005508:	492b      	ldr	r1, [pc, #172]	; (80055b8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x288>)
 800550a:	bf0c      	ite	eq
 800550c:	4b1e      	ldreq	r3, [pc, #120]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 800550e:	4b1f      	ldrne	r3, [pc, #124]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 8005510:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8005512:	9902      	ldr	r1, [sp, #8]
	float height = atof2(currentPos, &currentPos, 100000.f);
	int samplingResolution = atoi2(currentPos, &currentPos);

	//sanity checks:
	if(currentPos - cmd > length){
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
 8005514:	4e27      	ldr	r6, [pc, #156]	; (80055b4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x284>)
 8005516:	4b29      	ldr	r3, [pc, #164]	; (80055bc <_ZN8Handlers23rectanglePatternHandlerEPKci+0x28c>)
 8005518:	4630      	mov	r0, r6
 800551a:	1b49      	subs	r1, r1, r5
 800551c:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 800551e:	6864      	ldr	r4, [r4, #4]
 8005520:	2c00      	cmp	r4, #0
 8005522:	f000 8124 	beq.w	800576e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x43e>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8005526:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005528:	2c02      	cmp	r4, #2
				this->writeBin(v);
 800552a:	4630      	mov	r0, r6
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800552c:	d1e0      	bne.n	80054f0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c0>
				this->writeBin(v);
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x268>)
 8005530:	4798      	blx	r3
		return false;
	}
	if(x > XSTAGE_LENGTH_MM || x < 0){
		iout << "x param is out of bounds: " << x << endl;
		return false;
 8005532:	2000      	movs	r0, #0
 8005534:	e7df      	b.n	80054f6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c6>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005536:	4c1c      	ldr	r4, [pc, #112]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8119 	beq.w	8005772 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x442>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005540:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005542:	4620      	mov	r0, r4
 8005544:	491e      	ldr	r1, [pc, #120]	; (80055c0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x290>)
 8005546:	bf0c      	ite	eq
 8005548:	4b0f      	ldreq	r3, [pc, #60]	; (8005588 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x258>)
			}
			else {
				this->writeHex(s);
 800554a:	4b10      	ldrne	r3, [pc, #64]	; (800558c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x25c>)
 800554c:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 800554e:	4d16      	ldr	r5, [pc, #88]	; (80055a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x278>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x260>)
 8005552:	4628      	mov	r0, r5
 8005554:	a904      	add	r1, sp, #16
 8005556:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005558:	6864      	ldr	r4, [r4, #4]
 800555a:	2c00      	cmp	r4, #0
 800555c:	d1c4      	bne.n	80054e8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1b8>
				this->device->write(v);
 800555e:	6828      	ldr	r0, [r5, #0]
 8005560:	6803      	ldr	r3, [r0, #0]
 8005562:	210a      	movs	r1, #10
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4798      	blx	r3
		cerr << "buffer overrun " << (currentPos - cmd) << endl;
		return false;
	}
	if(x > XSTAGE_LENGTH_MM || x < 0){
		iout << "x param is out of bounds: " << x << endl;
		return false;
 8005568:	4620      	mov	r0, r4
 800556a:	e7c4      	b.n	80054f6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c6>
 800556c:	08000669 	.word	0x08000669
 8005570:	47c35000 	.word	0x47c35000
 8005574:	080004b1 	.word	0x080004b1
 8005578:	42c80000 	.word	0x42c80000
 800557c:	000186a0 	.word	0x000186a0
 8005580:	200013bc 	.word	0x200013bc
 8005584:	080096ec 	.word	0x080096ec
 8005588:	080079ed 	.word	0x080079ed
 800558c:	080079a9 	.word	0x080079a9
 8005590:	08007b2d 	.word	0x08007b2d
 8005594:	08009438 	.word	0x08009438
 8005598:	08007af5 	.word	0x08007af5
 800559c:	08007ac1 	.word	0x08007ac1
 80055a0:	200008d0 	.word	0x200008d0
 80055a4:	200008d8 	.word	0x200008d8
 80055a8:	200013d0 	.word	0x200013d0
 80055ac:	08009560 	.word	0x08009560
 80055b0:	0800963c 	.word	0x0800963c
 80055b4:	20001184 	.word	0x20001184
 80055b8:	080095f8 	.word	0x080095f8
 80055bc:	080078f9 	.word	0x080078f9
 80055c0:	0800965c 	.word	0x0800965c
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80055c4:	4c93      	ldr	r4, [pc, #588]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8110 	beq.w	80057ee <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4be>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80055ce:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80055d0:	4620      	mov	r0, r4
 80055d2:	4991      	ldr	r1, [pc, #580]	; (8005818 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e8>)
 80055d4:	bf0c      	ite	eq
 80055d6:	4b91      	ldreq	r3, [pc, #580]	; (800581c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 80055d8:	4b91      	ldrne	r3, [pc, #580]	; (8005820 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f0>)
 80055da:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 80055dc:	4d8d      	ldr	r5, [pc, #564]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 80055de:	4b91      	ldr	r3, [pc, #580]	; (8005824 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f4>)
 80055e0:	4628      	mov	r0, r5
 80055e2:	a906      	add	r1, sp, #24
 80055e4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80055e6:	6864      	ldr	r4, [r4, #4]
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	f47f af7d 	bne.w	80054e8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1b8>
 80055ee:	e7b6      	b.n	800555e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x22e>

	if(Pattern::isRunning()){
		iout << "Previous pattern is still running!" << endl;
		return false;
	}
	Utils::enableSystick();
 80055f0:	4b8d      	ldr	r3, [pc, #564]	; (8005828 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f8>)
 80055f2:	4798      	blx	r3
	Control<ALL>::enablePositionControl(true);
 80055f4:	2001      	movs	r0, #1
 80055f6:	4b8d      	ldr	r3, [pc, #564]	; (800582c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4fc>)
 80055f8:	4798      	blx	r3
	if(x == lastx && y == lasty && width == lastw && height == lasth){
 80055fa:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x500>)
 80055fc:	eddd 7a03 	vldr	s15, [sp, #12]
 8005600:	ed93 7a00 	vldr	s14, [r3]
 8005604:	eef4 7a47 	vcmp.f32	s15, s14
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	f040 809f 	bne.w	800574e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x41e>
 8005610:	4a88      	ldr	r2, [pc, #544]	; (8005834 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x504>)
 8005612:	ed9d 7a04 	vldr	s14, [sp, #16]
 8005616:	edd2 6a00 	vldr	s13, [r2]
 800561a:	eeb4 7a66 	vcmp.f32	s14, s13
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	f000 80b8 	beq.w	8005796 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x466>
 8005626:	eddd 6a05 	vldr	s13, [sp, #20]
 800562a:	ed9d 6a06 	vldr	s12, [sp, #24]
 800562e:	4982      	ldr	r1, [pc, #520]	; (8005838 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x508>)
 8005630:	4e82      	ldr	r6, [pc, #520]	; (800583c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x50c>)
		Trigger::enable(true);
		Pattern::start();
		return true;
	}

	lastx = x;
 8005632:	edc3 7a00 	vstr	s15, [r3]
	lasty = y;
	lastw = width;
	lasth = height;

	//demonstrate pattern outline
	Trigger::enable(true);
 8005636:	2001      	movs	r0, #1
 8005638:	4b81      	ldr	r3, [pc, #516]	; (8005840 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x510>)
		Pattern::start();
		return true;
	}

	lastx = x;
	lasty = y;
 800563a:	ed82 7a00 	vstr	s14, [r2]
	lastw = width;
 800563e:	edc1 6a00 	vstr	s13, [r1]
	lasth = height;
 8005642:	ed86 6a00 	vstr	s12, [r6]

	//demonstrate pattern outline
	Trigger::enable(true);
 8005646:	4798      	blx	r3
	Quadrangle rect;
	rect.configure(x, y, width, height);
 8005648:	4e7e      	ldr	r6, [pc, #504]	; (8005844 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x514>)
 800564a:	9803      	ldr	r0, [sp, #12]
 800564c:	9904      	ldr	r1, [sp, #16]
 800564e:	9a05      	ldr	r2, [sp, #20]
 8005650:	9b06      	ldr	r3, [sp, #24]
 8005652:	47b0      	blx	r6
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 8005654:	4a7c      	ldr	r2, [pc, #496]	; (8005848 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x518>)
 8005656:	4b7d      	ldr	r3, [pc, #500]	; (800584c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x51c>)
 8005658:	601a      	str	r2, [r3, #0]
	static void pause(){
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
 800565a:	2301      	movs	r3, #1
 800565c:	702b      	strb	r3, [r5, #0]
		paused = false;
 800565e:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x520>)
 8005660:	2200      	movs	r2, #0
		State::set(State::SCANNING_RECTANGLE);
 8005662:	2004      	movs	r0, #4
		running = false;
		paused = true;
	}
	static void start(){
		running = true;
		paused = false;
 8005664:	701a      	strb	r2, [r3, #0]
		State::set(State::SCANNING_RECTANGLE);
 8005666:	4b7b      	ldr	r3, [pc, #492]	; (8005854 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x524>)
 8005668:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	487a      	ldr	r0, [pc, #488]	; (8005858 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x528>)
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80c3 	beq.w	80057fa <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ca>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005674:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005676:	4979      	ldr	r1, [pc, #484]	; (800585c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x52c>)
 8005678:	bf0c      	ite	eq
 800567a:	4b68      	ldreq	r3, [pc, #416]	; (800581c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 800567c:	4b68      	ldrne	r3, [pc, #416]	; (8005820 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f0>)
 800567e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	4875      	ldr	r0, [pc, #468]	; (8005858 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x528>)
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8109 	beq.w	800589c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x56c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800568a:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800568c:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800568e:	bf0c      	ite	eq
 8005690:	4b73      	ldreq	r3, [pc, #460]	; (8005860 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x530>)
			}
			else {
				this->writeHex(v);
 8005692:	4b74      	ldrne	r3, [pc, #464]	; (8005864 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x534>)
 8005694:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005696:	4c74      	ldr	r4, [pc, #464]	; (8005868 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x538>)
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80f8 	beq.w	8005890 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x560>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80056a0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80056a2:	4620      	mov	r0, r4
 80056a4:	4971      	ldr	r1, [pc, #452]	; (800586c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x53c>)
 80056a6:	bf0c      	ite	eq
 80056a8:	4b5c      	ldreq	r3, [pc, #368]	; (800581c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 80056aa:	4b5d      	ldrne	r3, [pc, #372]	; (8005820 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f0>)
 80056ac:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	486d      	ldr	r0, [pc, #436]	; (8005868 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x538>)
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80a7 	beq.w	8005806 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4d6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80056b8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80056ba:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80056bc:	bf0c      	ite	eq
 80056be:	4b68      	ldreq	r3, [pc, #416]	; (8005860 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x530>)
			}
			else {
				this->writeHex(v);
 80056c0:	4b68      	ldrne	r3, [pc, #416]	; (8005864 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x534>)
 80056c2:	4798      	blx	r3
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
 80056c4:	2001      	movs	r0, #1
 80056c6:	e716      	b.n	80054f6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c6>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80056c8:	4c52      	ldr	r4, [pc, #328]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d056      	beq.n	800577e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x44e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80056d0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80056d2:	4620      	mov	r0, r4
 80056d4:	4966      	ldr	r1, [pc, #408]	; (8005870 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x540>)
 80056d6:	bf0c      	ite	eq
 80056d8:	4b50      	ldreq	r3, [pc, #320]	; (800581c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 80056da:	4b51      	ldrne	r3, [pc, #324]	; (8005820 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f0>)
 80056dc:	4798      	blx	r3
	if(y > YSTAGE_LENGTH_MM || y < 0){
		iout << "y param is out of bounds: " << y << endl;
		return false;
	}
	if(x+width > XSTAGE_LENGTH_MM || width <= 0){
		iout << "(x+)width param is out of bounds: " << (x+width) << endl;
 80056de:	eddd 7a05 	vldr	s15, [sp, #20]
 80056e2:	ed9d 7a03 	vldr	s14, [sp, #12]
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 80056e6:	4d4b      	ldr	r5, [pc, #300]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f4>)
	if(y > YSTAGE_LENGTH_MM || y < 0){
		iout << "y param is out of bounds: " << y << endl;
		return false;
	}
	if(x+width > XSTAGE_LENGTH_MM || width <= 0){
		iout << "(x+)width param is out of bounds: " << (x+width) << endl;
 80056ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ee:	a908      	add	r1, sp, #32
 80056f0:	ed61 7a01 	vstmdb	r1!, {s15}
 80056f4:	4628      	mov	r0, r5
 80056f6:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d045      	beq.n	800578a <_ZN8Handlers23rectanglePatternHandlerEPKci+0x45a>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80056fe:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005700:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8005702:	4628      	mov	r0, r5
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005704:	f47f aef4 	bne.w	80054f0 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c0>
				this->writeBin(v);
 8005708:	4b55      	ldr	r3, [pc, #340]	; (8005860 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x530>)
 800570a:	4798      	blx	r3
 800570c:	e6f2      	b.n	80054f4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c4>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	4958      	ldr	r1, [pc, #352]	; (8005874 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x544>)
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4798      	blx	r3
 8005718:	e6de      	b.n	80054d8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1a8>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800571a:	4c3e      	ldr	r4, [pc, #248]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	b303      	cbz	r3, 8005762 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x432>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005720:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005722:	4620      	mov	r0, r4
 8005724:	4954      	ldr	r1, [pc, #336]	; (8005878 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x548>)
 8005726:	bf0c      	ite	eq
 8005728:	4b3c      	ldreq	r3, [pc, #240]	; (800581c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4ec>)
			}
			else {
				this->writeHex(s);
 800572a:	4b3d      	ldrne	r3, [pc, #244]	; (8005820 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4f0>)
 800572c:	4798      	blx	r3
	iout << "w_x x w_v v v_u v_ureal" << endl;
	iout << Control<axis>::getShallPosition() << " " << Control<axis>::getIsPosition() << " "
				<< Control<axis>::getShallSpeed() << " " << Control<axis>::getIsSpeed() << " "
				<< Control<axis>::getSpeedU() << " " << Control<axis>::getSpeedRealU() << endl;
	iout << "posPid enabled, vPid enabled" << endl;
	iout << Control<axis>::isPositionControlEnabled() << ", " << Control<axis>::isSpeedControlEnabled() << endl;
 800572e:	4d39      	ldr	r5, [pc, #228]	; (8005814 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e4>)
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8005730:	4b52      	ldr	r3, [pc, #328]	; (800587c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x54c>)
 8005732:	4628      	mov	r0, r5
 8005734:	4639      	mov	r1, r7
 8005736:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005738:	6864      	ldr	r4, [r4, #4]
 800573a:	2c00      	cmp	r4, #0
 800573c:	f47f aed4 	bne.w	80054e8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1b8>
 8005740:	e70d      	b.n	800555e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x22e>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005742:	6820      	ldr	r0, [r4, #0]
 8005744:	494e      	ldr	r1, [pc, #312]	; (8005880 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x550>)
 8005746:	6803      	ldr	r3, [r0, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4798      	blx	r3
 800574c:	e6e1      	b.n	8005512 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1e2>
 800574e:	ed9d 7a04 	vldr	s14, [sp, #16]
 8005752:	eddd 6a05 	vldr	s13, [sp, #20]
 8005756:	ed9d 6a06 	vldr	s12, [sp, #24]
 800575a:	4a36      	ldr	r2, [pc, #216]	; (8005834 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x504>)
 800575c:	4936      	ldr	r1, [pc, #216]	; (8005838 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x508>)
 800575e:	4e37      	ldr	r6, [pc, #220]	; (800583c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x50c>)
 8005760:	e767      	b.n	8005632 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x302>
 8005762:	6820      	ldr	r0, [r4, #0]
 8005764:	4944      	ldr	r1, [pc, #272]	; (8005878 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x548>)
 8005766:	6803      	ldr	r3, [r0, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	4798      	blx	r3
 800576c:	e7df      	b.n	800572e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x3fe>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800576e:	6830      	ldr	r0, [r6, #0]
 8005770:	e6f6      	b.n	8005560 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x230>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	4943      	ldr	r1, [pc, #268]	; (8005884 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x554>)
 8005776:	6803      	ldr	r3, [r0, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4798      	blx	r3
 800577c:	e6e7      	b.n	800554e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x21e>
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	493b      	ldr	r1, [pc, #236]	; (8005870 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x540>)
 8005782:	6803      	ldr	r3, [r0, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4798      	blx	r3
 8005788:	e7a9      	b.n	80056de <_ZN8Handlers23rectanglePatternHandlerEPKci+0x3ae>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800578a:	6828      	ldr	r0, [r5, #0]
 800578c:	6803      	ldr	r3, [r0, #0]
 800578e:	210a      	movs	r1, #10
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	4798      	blx	r3
 8005794:	e6ae      	b.n	80054f4 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c4>
		iout << "Previous pattern is still running!" << endl;
		return false;
	}
	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(x == lastx && y == lasty && width == lastw && height == lasth){
 8005796:	4928      	ldr	r1, [pc, #160]	; (8005838 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x508>)
 8005798:	eddd 6a05 	vldr	s13, [sp, #20]
 800579c:	ed91 6a00 	vldr	s12, [r1]
 80057a0:	eef4 6a46 	vcmp.f32	s13, s12
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	d07e      	beq.n	80058a8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x578>
 80057aa:	ed9d 6a06 	vldr	s12, [sp, #24]
 80057ae:	4e23      	ldr	r6, [pc, #140]	; (800583c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x50c>)
 80057b0:	e73f      	b.n	8005632 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x302>
 80057b2:	6830      	ldr	r0, [r6, #0]
 80057b4:	6803      	ldr	r3, [r0, #0]
 80057b6:	210a      	movs	r1, #10
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4798      	blx	r3
 80057bc:	e665      	b.n	800548a <_ZN8Handlers23rectanglePatternHandlerEPKci+0x15a>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80057be:	6830      	ldr	r0, [r6, #0]
 80057c0:	4931      	ldr	r1, [pc, #196]	; (8005888 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x558>)
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	4798      	blx	r3
 80057c8:	e650      	b.n	800546c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x13c>
 80057ca:	6830      	ldr	r0, [r6, #0]
 80057cc:	492e      	ldr	r1, [pc, #184]	; (8005888 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x558>)
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4798      	blx	r3
 80057d4:	e63b      	b.n	800544e <_ZN8Handlers23rectanglePatternHandlerEPKci+0x11e>
 80057d6:	6830      	ldr	r0, [r6, #0]
 80057d8:	492b      	ldr	r1, [pc, #172]	; (8005888 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x558>)
 80057da:	6803      	ldr	r3, [r0, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4798      	blx	r3
 80057e0:	e626      	b.n	8005430 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x100>
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	4929      	ldr	r1, [pc, #164]	; (800588c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x55c>)
 80057e6:	6803      	ldr	r3, [r0, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	4798      	blx	r3
 80057ec:	e610      	b.n	8005410 <_ZN8Handlers23rectanglePatternHandlerEPKci+0xe0>
 80057ee:	6820      	ldr	r0, [r4, #0]
 80057f0:	4909      	ldr	r1, [pc, #36]	; (8005818 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x4e8>)
 80057f2:	6803      	ldr	r3, [r0, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4798      	blx	r3
 80057f8:	e6f0      	b.n	80055dc <_ZN8Handlers23rectanglePatternHandlerEPKci+0x2ac>
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	4917      	ldr	r1, [pc, #92]	; (800585c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x52c>)
 80057fe:	6803      	ldr	r3, [r0, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4798      	blx	r3
 8005804:	e73c      	b.n	8005680 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x350>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	6803      	ldr	r3, [r0, #0]
 800580a:	210a      	movs	r1, #10
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4798      	blx	r3
	Quadrangle rect;
	rect.configure(x, y, width, height);
	Pattern::setPattern(rect);
	Pattern::start();

	return true;
 8005810:	2001      	movs	r0, #1
 8005812:	e670      	b.n	80054f6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c6>
 8005814:	200013d0 	.word	0x200013d0
 8005818:	080096c8 	.word	0x080096c8
 800581c:	080079ed 	.word	0x080079ed
 8005820:	080079a9 	.word	0x080079a9
 8005824:	08007b2d 	.word	0x08007b2d
 8005828:	0800697d 	.word	0x0800697d
 800582c:	08000ef9 	.word	0x08000ef9
 8005830:	20000064 	.word	0x20000064
 8005834:	20000068 	.word	0x20000068
 8005838:	2000006c 	.word	0x2000006c
 800583c:	20000070 	.word	0x20000070
 8005840:	080004a5 	.word	0x080004a5
 8005844:	080062c1 	.word	0x080062c1
 8005848:	08006465 	.word	0x08006465
 800584c:	200008d4 	.word	0x200008d4
 8005850:	200008d8 	.word	0x200008d8
 8005854:	080067d5 	.word	0x080067d5
 8005858:	200013bc 	.word	0x200013bc
 800585c:	08009584 	.word	0x08009584
 8005860:	08007af5 	.word	0x08007af5
 8005864:	08007ac1 	.word	0x08007ac1
 8005868:	2000118c 	.word	0x2000118c
 800586c:	08009594 	.word	0x08009594
 8005870:	080096a4 	.word	0x080096a4
 8005874:	0800963c 	.word	0x0800963c
 8005878:	08009608 	.word	0x08009608
 800587c:	080078f9 	.word	0x080078f9
 8005880:	080095f8 	.word	0x080095f8
 8005884:	0800965c 	.word	0x0800965c
 8005888:	08009438 	.word	0x08009438
 800588c:	080096ec 	.word	0x080096ec

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	4919      	ldr	r1, [pc, #100]	; (80058f8 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5c8>)
 8005894:	6803      	ldr	r3, [r0, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4798      	blx	r3
 800589a:	e708      	b.n	80056ae <_ZN8Handlers23rectanglePatternHandlerEPKci+0x37e>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	210a      	movs	r1, #10
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4798      	blx	r3
 80058a6:	e6f6      	b.n	8005696 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x366>
		iout << "Previous pattern is still running!" << endl;
		return false;
	}
	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(x == lastx && y == lasty && width == lastw && height == lasth){
 80058a8:	4e14      	ldr	r6, [pc, #80]	; (80058fc <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5cc>)
 80058aa:	ed9d 6a06 	vldr	s12, [sp, #24]
 80058ae:	edd6 5a00 	vldr	s11, [r6]
 80058b2:	eeb4 6a65 	vcmp.f32	s12, s11
 80058b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ba:	f47f aeba 	bne.w	8005632 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x302>
		//execute pattern
		Trigger::enable(true);
 80058be:	2001      	movs	r0, #1
 80058c0:	4c0f      	ldr	r4, [pc, #60]	; (8005900 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5d0>)
		QuadrangleZigZag zRect;
		zRect.configure(x, y, width, height, samplingResolution);
 80058c2:	4d10      	ldr	r5, [pc, #64]	; (8005904 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5d4>)
	}
	Utils::enableSystick();
	Control<ALL>::enablePositionControl(true);
	if(x == lastx && y == lasty && width == lastw && height == lasth){
		//execute pattern
		Trigger::enable(true);
 80058c4:	47a0      	blx	r4
		QuadrangleZigZag zRect;
		zRect.configure(x, y, width, height, samplingResolution);
 80058c6:	9904      	ldr	r1, [sp, #16]
 80058c8:	9a05      	ldr	r2, [sp, #20]
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	9803      	ldr	r0, [sp, #12]
 80058ce:	9700      	str	r7, [sp, #0]
 80058d0:	47a8      	blx	r5
public:
	template<class T>
	static void setPattern(T pattern, float maxSpeed = 1){
		(void)pattern;
		//Control<ALL>::setMaxSpeed(maxSpeed);
		func = &T::sample;
 80058d2:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5d8>)
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5dc>)
		Pattern::setPattern(zRect);
		Trigger::setThreshold(samplingResolution);
 80058d6:	4638      	mov	r0, r7
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5e0>)
 80058dc:	4798      	blx	r3
		Trigger::enable(true);
 80058de:	2001      	movs	r0, #1
 80058e0:	47a0      	blx	r4
		Pattern::start();
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5e4>)
 80058e4:	4798      	blx	r3
		return true;
 80058e6:	2001      	movs	r0, #1
 80058e8:	e605      	b.n	80054f6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x1c6>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	490a      	ldr	r1, [pc, #40]	; (8005918 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x5e8>)
 80058ee:	6803      	ldr	r3, [r0, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4798      	blx	r3
 80058f4:	e5df      	b.n	80054b6 <_ZN8Handlers23rectanglePatternHandlerEPKci+0x186>
 80058f6:	bf00      	nop
 80058f8:	08009594 	.word	0x08009594
 80058fc:	20000070 	.word	0x20000070
 8005900:	080004a5 	.word	0x080004a5
 8005904:	08005fed 	.word	0x08005fed
 8005908:	08005cd5 	.word	0x08005cd5
 800590c:	200008d4 	.word	0x200008d4
 8005910:	08000491 	.word	0x08000491
 8005914:	08004c89 	.word	0x08004c89
 8005918:	08009560 	.word	0x08009560

0800591c <_ZN2PC4initEv>:
   ,{ "EXEC", Handlers::execLaserCommand } //execute a laser command
   ,{ "MIRR", Handlers::mirrorCommand } //outputs the parameter / mirrors input to the output as a command
};
}

bool PC::init(){
 800591c:	b570      	push	{r4, r5, r6, lr}
	uart.configurePins(xpcc::stm32::BufferedUsart2::Mapping::REMAP_PA2_PA3);
 800591e:	2000      	movs	r0, #0
 8005920:	4b26      	ldr	r3, [pc, #152]	; (80059bc <_ZN2PC4initEv+0xa0>)
 8005922:	4798      	blx	r3
	//sanity check:
	int size = sizeof(CommandTable)/sizeof(CommandTable[0]);
	for(int x = 0; x < size; x++){
 8005924:	2400      	movs	r4, #0
		for(int y = x+1; y < size; y++){
 8005926:	1c63      	adds	r3, r4, #1
 8005928:	2b1b      	cmp	r3, #27
 800592a:	d101      	bne.n	8005930 <_ZN2PC4initEv+0x14>
				cerr << "duplicate entry in command table: " << CommandTable[x].name << endl;
				return false;
			}
		}
	}
	return true;
 800592c:	2001      	movs	r0, #1
}
 800592e:	bd70      	pop	{r4, r5, r6, pc}
	uart.configurePins(xpcc::stm32::BufferedUsart2::Mapping::REMAP_PA2_PA3);
	//sanity check:
	int size = sizeof(CommandTable)/sizeof(CommandTable[0]);
	for(int x = 0; x < size; x++){
		for(int y = x+1; y < size; y++){
			int word1 = *(int*)&CommandTable[x].name[0];
 8005930:	4d23      	ldr	r5, [pc, #140]	; (80059c0 <_ZN2PC4initEv+0xa4>)
 8005932:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
			int word2 = *(int*)&CommandTable[y].name[0];
 8005936:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
	uart.configurePins(xpcc::stm32::BufferedUsart2::Mapping::REMAP_PA2_PA3);
	//sanity check:
	int size = sizeof(CommandTable)/sizeof(CommandTable[0]);
	for(int x = 0; x < size; x++){
		for(int y = x+1; y < size; y++){
			int word1 = *(int*)&CommandTable[x].name[0];
 800593a:	6809      	ldr	r1, [r1, #0]
			int word2 = *(int*)&CommandTable[y].name[0];
			if(word1 == word2){
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	4291      	cmp	r1, r2
 8005940:	d00a      	beq.n	8005958 <_ZN2PC4initEv+0x3c>
 8005942:	461a      	mov	r2, r3
bool PC::init(){
	uart.configurePins(xpcc::stm32::BufferedUsart2::Mapping::REMAP_PA2_PA3);
	//sanity check:
	int size = sizeof(CommandTable)/sizeof(CommandTable[0]);
	for(int x = 0; x < size; x++){
		for(int y = x+1; y < size; y++){
 8005944:	3201      	adds	r2, #1
 8005946:	2a1a      	cmp	r2, #26
 8005948:	dd01      	ble.n	800594e <_ZN2PC4initEv+0x32>
 800594a:	461c      	mov	r4, r3
 800594c:	e7eb      	b.n	8005926 <_ZN2PC4initEv+0xa>
			int word1 = *(int*)&CommandTable[x].name[0];
			int word2 = *(int*)&CommandTable[y].name[0];
 800594e:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
			if(word1 == word2){
 8005952:	6800      	ldr	r0, [r0, #0]
 8005954:	4288      	cmp	r0, r1
 8005956:	d1f5      	bne.n	8005944 <_ZN2PC4initEv+0x28>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005958:	4e1a      	ldr	r6, [pc, #104]	; (80059c4 <_ZN2PC4initEv+0xa8>)
 800595a:	6873      	ldr	r3, [r6, #4]
 800595c:	b1db      	cbz	r3, 8005996 <_ZN2PC4initEv+0x7a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800595e:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005960:	4630      	mov	r0, r6
 8005962:	4919      	ldr	r1, [pc, #100]	; (80059c8 <_ZN2PC4initEv+0xac>)
 8005964:	bf0c      	ite	eq
 8005966:	4b19      	ldreq	r3, [pc, #100]	; (80059cc <_ZN2PC4initEv+0xb0>)
			}
			else {
				this->writeHex(s);
 8005968:	4b19      	ldrne	r3, [pc, #100]	; (80059d0 <_ZN2PC4initEv+0xb4>)
 800596a:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 800596c:	6873      	ldr	r3, [r6, #4]
				cerr << "duplicate entry in command table: " << CommandTable[x].name << endl;
 800596e:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
 8005972:	4814      	ldr	r0, [pc, #80]	; (80059c4 <_ZN2PC4initEv+0xa8>)
 8005974:	b1e3      	cbz	r3, 80059b0 <_ZN2PC4initEv+0x94>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005976:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005978:	bf0c      	ite	eq
 800597a:	4b14      	ldreq	r3, [pc, #80]	; (80059cc <_ZN2PC4initEv+0xb0>)
			}
			else {
				this->writeHex(s);
 800597c:	4b14      	ldrne	r3, [pc, #80]	; (80059d0 <_ZN2PC4initEv+0xb4>)
 800597e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005980:	6874      	ldr	r4, [r6, #4]
 8005982:	4810      	ldr	r0, [pc, #64]	; (80059c4 <_ZN2PC4initEv+0xa8>)
 8005984:	b16c      	cbz	r4, 80059a2 <_ZN2PC4initEv+0x86>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8005986:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005988:	2c02      	cmp	r4, #2
				this->writeBin(v);
 800598a:	bf0c      	ite	eq
 800598c:	4b11      	ldreq	r3, [pc, #68]	; (80059d4 <_ZN2PC4initEv+0xb8>)
			}
			else {
				this->writeHex(v);
 800598e:	4b12      	ldrne	r3, [pc, #72]	; (80059d8 <_ZN2PC4initEv+0xbc>)
 8005990:	4798      	blx	r3
				return false;
 8005992:	2000      	movs	r0, #0
 8005994:	bd70      	pop	{r4, r5, r6, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005996:	6830      	ldr	r0, [r6, #0]
 8005998:	490b      	ldr	r1, [pc, #44]	; (80059c8 <_ZN2PC4initEv+0xac>)
 800599a:	6803      	ldr	r3, [r0, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4798      	blx	r3
 80059a0:	e7e4      	b.n	800596c <_ZN2PC4initEv+0x50>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	6803      	ldr	r3, [r0, #0]
 80059a6:	210a      	movs	r1, #10
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4798      	blx	r3
 80059ac:	4620      	mov	r0, r4
 80059ae:	bd70      	pop	{r4, r5, r6, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80059b0:	6800      	ldr	r0, [r0, #0]
 80059b2:	6803      	ldr	r3, [r0, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4798      	blx	r3
 80059b8:	e7e2      	b.n	8005980 <_ZN2PC4initEv+0x64>
 80059ba:	bf00      	nop
 80059bc:	08007191 	.word	0x08007191
 80059c0:	20000074 	.word	0x20000074
 80059c4:	20001184 	.word	0x20001184
 80059c8:	0800970c 	.word	0x0800970c
 80059cc:	080079ed 	.word	0x080079ed
 80059d0:	080079a9 	.word	0x080079a9
 80059d4:	08007af5 	.word	0x08007af5
 80059d8:	08007ac1 	.word	0x08007ac1

080059dc <_ZN2PC15scanForCommandsEv>:
		}
	}
	return 0;
}

void PC::scanForCommands(){
 80059dc:	b530      	push	{r4, r5, lr}
 80059de:	b083      	sub	sp, #12
	uint8_t c;
	if(uart.read(c)){
 80059e0:	f10d 0007 	add.w	r0, sp, #7
 80059e4:	4b55      	ldr	r3, [pc, #340]	; (8005b3c <_ZN2PC15scanForCommandsEv+0x160>)
 80059e6:	4798      	blx	r3
 80059e8:	b170      	cbz	r0, 8005a08 <_ZN2PC15scanForCommandsEv+0x2c>
		if(c != '\n'){
 80059ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059ee:	2b0a      	cmp	r3, #10
 80059f0:	d00c      	beq.n	8005a0c <_ZN2PC15scanForCommandsEv+0x30>
			buffer[bufPos++] = char(c);
 80059f2:	4a53      	ldr	r2, [pc, #332]	; (8005b40 <_ZN2PC15scanForCommandsEv+0x164>)
 80059f4:	4c53      	ldr	r4, [pc, #332]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 80059f6:	6810      	ldr	r0, [r2, #0]
 80059f8:	1c41      	adds	r1, r0, #1
			if(bufPos >= BUFFER_LENGTH - 4){
 80059fa:	f5b1 7ffe 	cmp.w	r1, #508	; 0x1fc

void PC::scanForCommands(){
	uint8_t c;
	if(uart.read(c)){
		if(c != '\n'){
			buffer[bufPos++] = char(c);
 80059fe:	5423      	strb	r3, [r4, r0]
 8005a00:	6011      	str	r1, [r2, #0]
			if(bufPos >= BUFFER_LENGTH - 4){
 8005a02:	db01      	blt.n	8005a08 <_ZN2PC15scanForCommandsEv+0x2c>
				bufPos = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	6013      	str	r3, [r2, #0]
				iout << "OK: " << buffer << endl;
			}
			bufPos = 0;
		}
	}
}
 8005a08:	b003      	add	sp, #12
 8005a0a:	bd30      	pop	{r4, r5, pc}
			buffer[bufPos++] = char(c);
			if(bufPos >= BUFFER_LENGTH - 4){
				bufPos = 0;
			}
		}else{
			buffer[bufPos] = 0;
 8005a0c:	4d4c      	ldr	r5, [pc, #304]	; (8005b40 <_ZN2PC15scanForCommandsEv+0x164>)
 8005a0e:	484d      	ldr	r0, [pc, #308]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005a10:	6829      	ldr	r1, [r5, #0]
			buffer[bufPos+1] = 0;
 8005a12:	1842      	adds	r2, r0, r1
			buffer[bufPos++] = char(c);
			if(bufPos >= BUFFER_LENGTH - 4){
				bufPos = 0;
			}
		}else{
			buffer[bufPos] = 0;
 8005a14:	2300      	movs	r3, #0
			buffer[bufPos+1] = 0;
			buffer[bufPos+2] = 0;
			buffer[bufPos+3] = 0;
			if(bufPos < 3){
 8005a16:	2902      	cmp	r1, #2
			buffer[bufPos++] = char(c);
			if(bufPos >= BUFFER_LENGTH - 4){
				bufPos = 0;
			}
		}else{
			buffer[bufPos] = 0;
 8005a18:	5443      	strb	r3, [r0, r1]
			buffer[bufPos+1] = 0;
 8005a1a:	7053      	strb	r3, [r2, #1]
			buffer[bufPos+2] = 0;
 8005a1c:	7093      	strb	r3, [r2, #2]
			buffer[bufPos+3] = 0;
 8005a1e:	70d3      	strb	r3, [r2, #3]
			if(bufPos < 3){
 8005a20:	dd59      	ble.n	8005ad6 <_ZN2PC15scanForCommandsEv+0xfa>
 8005a22:	6804      	ldr	r4, [r0, #0]
 8005a24:	4848      	ldr	r0, [pc, #288]	; (8005b48 <_ZN2PC15scanForCommandsEv+0x16c>)
 8005a26:	e002      	b.n	8005a2e <_ZN2PC15scanForCommandsEv+0x52>
}

//TODO binary search
PC::Command* PC::getCommand(const char* command){
	int size = sizeof(CommandTable)/sizeof(CommandTable[0]);
	for(int i = 0; i < size; i++){
 8005a28:	3301      	adds	r3, #1
 8005a2a:	2b1b      	cmp	r3, #27
 8005a2c:	d00f      	beq.n	8005a4e <_ZN2PC15scanForCommandsEv+0x72>
		int word1 = *(int*)&CommandTable[i].name[0];
 8005a2e:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
		int word2 = *(int*)&command[0];
		if(word1 == word2){
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	42a2      	cmp	r2, r4
 8005a36:	d1f7      	bne.n	8005a28 <_ZN2PC15scanForCommandsEv+0x4c>
			if(!cmd){
				cerr << "cannot interpret " << buffer << endl;
				bufPos = 0;
				return;
			}
			bool ok = cmd->handler(&buffer[5], bufPos-5);
 8005a38:	4a43      	ldr	r2, [pc, #268]	; (8005b48 <_ZN2PC15scanForCommandsEv+0x16c>)
 8005a3a:	4844      	ldr	r0, [pc, #272]	; (8005b4c <_ZN2PC15scanForCommandsEv+0x170>)
 8005a3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a40:	3905      	subs	r1, #5
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4798      	blx	r3
			if(ok){
 8005a46:	bb08      	cbnz	r0, 8005a8c <_ZN2PC15scanForCommandsEv+0xb0>
				iout << "OK: " << buffer << endl;
			}
			bufPos = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	e7dc      	b.n	8005a08 <_ZN2PC15scanForCommandsEv+0x2c>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005a4e:	4c40      	ldr	r4, [pc, #256]	; (8005b50 <_ZN2PC15scanForCommandsEv+0x174>)
 8005a50:	6863      	ldr	r3, [r4, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d039      	beq.n	8005aca <_ZN2PC15scanForCommandsEv+0xee>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005a56:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005a58:	4620      	mov	r0, r4
 8005a5a:	493e      	ldr	r1, [pc, #248]	; (8005b54 <_ZN2PC15scanForCommandsEv+0x178>)
 8005a5c:	bf0c      	ite	eq
 8005a5e:	4b3e      	ldreq	r3, [pc, #248]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005a60:	4b3e      	ldrne	r3, [pc, #248]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005a62:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	483a      	ldr	r0, [pc, #232]	; (8005b50 <_ZN2PC15scanForCommandsEv+0x174>)
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d060      	beq.n	8005b2e <_ZN2PC15scanForCommandsEv+0x152>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005a6c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005a6e:	4935      	ldr	r1, [pc, #212]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005a70:	bf0c      	ite	eq
 8005a72:	4b39      	ldreq	r3, [pc, #228]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005a74:	4b39      	ldrne	r3, [pc, #228]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005a76:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005a78:	6863      	ldr	r3, [r4, #4]
 8005a7a:	4835      	ldr	r0, [pc, #212]	; (8005b50 <_ZN2PC15scanForCommandsEv+0x174>)
 8005a7c:	b1fb      	cbz	r3, 8005abe <_ZN2PC15scanForCommandsEv+0xe2>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8005a7e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005a80:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8005a82:	bf0c      	ite	eq
 8005a84:	4b36      	ldreq	r3, [pc, #216]	; (8005b60 <_ZN2PC15scanForCommandsEv+0x184>)
			}
			else {
				this->writeHex(v);
 8005a86:	4b37      	ldrne	r3, [pc, #220]	; (8005b64 <_ZN2PC15scanForCommandsEv+0x188>)
 8005a88:	4798      	blx	r3
 8005a8a:	e7dd      	b.n	8005a48 <_ZN2PC15scanForCommandsEv+0x6c>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005a8c:	4c36      	ldr	r4, [pc, #216]	; (8005b68 <_ZN2PC15scanForCommandsEv+0x18c>)
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d046      	beq.n	8005b22 <_ZN2PC15scanForCommandsEv+0x146>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005a94:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005a96:	4620      	mov	r0, r4
 8005a98:	4934      	ldr	r1, [pc, #208]	; (8005b6c <_ZN2PC15scanForCommandsEv+0x190>)
 8005a9a:	bf0c      	ite	eq
 8005a9c:	4b2e      	ldreq	r3, [pc, #184]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005a9e:	4b2f      	ldrne	r3, [pc, #188]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005aa0:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	4830      	ldr	r0, [pc, #192]	; (8005b68 <_ZN2PC15scanForCommandsEv+0x18c>)
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d035      	beq.n	8005b16 <_ZN2PC15scanForCommandsEv+0x13a>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005aaa:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005aac:	4925      	ldr	r1, [pc, #148]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005aae:	bf0c      	ite	eq
 8005ab0:	4b29      	ldreq	r3, [pc, #164]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005ab2:	4b2a      	ldrne	r3, [pc, #168]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005ab4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	482b      	ldr	r0, [pc, #172]	; (8005b68 <_ZN2PC15scanForCommandsEv+0x18c>)
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1df      	bne.n	8005a7e <_ZN2PC15scanForCommandsEv+0xa2>
				this->device->write(v);
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	6803      	ldr	r3, [r0, #0]
 8005ac2:	210a      	movs	r1, #10
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	4798      	blx	r3
 8005ac8:	e7be      	b.n	8005a48 <_ZN2PC15scanForCommandsEv+0x6c>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	4921      	ldr	r1, [pc, #132]	; (8005b54 <_ZN2PC15scanForCommandsEv+0x178>)
 8005ace:	6803      	ldr	r3, [r0, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4798      	blx	r3
 8005ad4:	e7c6      	b.n	8005a64 <_ZN2PC15scanForCommandsEv+0x88>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005ad6:	4c26      	ldr	r4, [pc, #152]	; (8005b70 <_ZN2PC15scanForCommandsEv+0x194>)
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	b183      	cbz	r3, 8005afe <_ZN2PC15scanForCommandsEv+0x122>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005adc:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4924      	ldr	r1, [pc, #144]	; (8005b74 <_ZN2PC15scanForCommandsEv+0x198>)
 8005ae2:	bf0c      	ite	eq
 8005ae4:	4b1c      	ldreq	r3, [pc, #112]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005ae6:	4b1d      	ldrne	r3, [pc, #116]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005ae8:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	4820      	ldr	r0, [pc, #128]	; (8005b70 <_ZN2PC15scanForCommandsEv+0x194>)
 8005aee:	b163      	cbz	r3, 8005b0a <_ZN2PC15scanForCommandsEv+0x12e>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005af0:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005af2:	4914      	ldr	r1, [pc, #80]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005af4:	bf0c      	ite	eq
 8005af6:	4b18      	ldreq	r3, [pc, #96]	; (8005b58 <_ZN2PC15scanForCommandsEv+0x17c>)
			}
			else {
				this->writeHex(s);
 8005af8:	4b18      	ldrne	r3, [pc, #96]	; (8005b5c <_ZN2PC15scanForCommandsEv+0x180>)
 8005afa:	4798      	blx	r3
 8005afc:	e7a4      	b.n	8005a48 <_ZN2PC15scanForCommandsEv+0x6c>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	491c      	ldr	r1, [pc, #112]	; (8005b74 <_ZN2PC15scanForCommandsEv+0x198>)
 8005b02:	6803      	ldr	r3, [r0, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	4798      	blx	r3
 8005b08:	e7ef      	b.n	8005aea <_ZN2PC15scanForCommandsEv+0x10e>
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	490d      	ldr	r1, [pc, #52]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005b0e:	6803      	ldr	r3, [r0, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	4798      	blx	r3
 8005b14:	e798      	b.n	8005a48 <_ZN2PC15scanForCommandsEv+0x6c>
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	490a      	ldr	r1, [pc, #40]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005b1a:	6803      	ldr	r3, [r0, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4798      	blx	r3
 8005b20:	e7c9      	b.n	8005ab6 <_ZN2PC15scanForCommandsEv+0xda>
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	4911      	ldr	r1, [pc, #68]	; (8005b6c <_ZN2PC15scanForCommandsEv+0x190>)
 8005b26:	6803      	ldr	r3, [r0, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	4798      	blx	r3
 8005b2c:	e7b9      	b.n	8005aa2 <_ZN2PC15scanForCommandsEv+0xc6>
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	4904      	ldr	r1, [pc, #16]	; (8005b44 <_ZN2PC15scanForCommandsEv+0x168>)
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4798      	blx	r3
 8005b38:	e79e      	b.n	8005a78 <_ZN2PC15scanForCommandsEv+0x9c>
 8005b3a:	bf00      	nop
 8005b3c:	080073b1 	.word	0x080073b1
 8005b40:	200013b8 	.word	0x200013b8
 8005b44:	20001198 	.word	0x20001198
 8005b48:	20000074 	.word	0x20000074
 8005b4c:	2000119d 	.word	0x2000119d
 8005b50:	20001184 	.word	0x20001184
 8005b54:	0800973c 	.word	0x0800973c
 8005b58:	080079ed 	.word	0x080079ed
 8005b5c:	080079a9 	.word	0x080079a9
 8005b60:	08007af5 	.word	0x08007af5
 8005b64:	08007ac1 	.word	0x08007ac1
 8005b68:	200013d0 	.word	0x200013d0
 8005b6c:	08009750 	.word	0x08009750
 8005b70:	200013bc 	.word	0x200013bc
 8005b74:	08009730 	.word	0x08009730

08005b78 <_GLOBAL__sub_I_uart>:


bool PC::defaultHandler(const char* command, int length){
	cerr << "Unhandled command: " << command << endl;
	return false;
}
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 * 			in the send buffer.
			 */
			BufferedUsart2(uint32_t baudrate,
					uint32_t interruptPriority, bool blocking = true)
			{
				setBaudrate(baudrate, interruptPriority, blocking);
 8005b7c:	210a      	movs	r1, #10
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <_GLOBAL__sub_I_uart+0xcc>)
#include "limits.h"
#include <xpcc/architecture.hpp>
#include "commandHandlers.h"

xpcc::stm32::BufferedUsart2 uart(921600, 10);
xpcc::IODeviceWrapper<xpcc::stm32::BufferedUsart2> uartWrap(uart);
 8005b86:	4e30      	ldr	r6, [pc, #192]	; (8005c48 <_GLOBAL__sub_I_uart+0xd0>)
 8005b88:	4d30      	ldr	r5, [pc, #192]	; (8005c4c <_GLOBAL__sub_I_uart+0xd4>)
xpcc::IOStream coutRaw(uartWrap);
 8005b8a:	4c31      	ldr	r4, [pc, #196]	; (8005c50 <_GLOBAL__sub_I_uart+0xd8>)
		{
			// get rid of the warning about an unused parameter
			(void) device;
		}
		IODeviceWrapper()
		{
 8005b8c:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005cc4 <_GLOBAL__sub_I_uart+0x14c>
 8005b90:	f8df a134 	ldr.w	sl, [pc, #308]	; 8005cc8 <_GLOBAL__sub_I_uart+0x150>
 8005b94:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8005ccc <_GLOBAL__sub_I_uart+0x154>
 8005b98:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005cd0 <_GLOBAL__sub_I_uart+0x158>
 8005b9c:	4f2d      	ldr	r7, [pc, #180]	; (8005c54 <_GLOBAL__sub_I_uart+0xdc>)
 8005b9e:	4798      	blx	r3
		 * \brief	Constructor
		 *
		 * \param	device	configured object
		 */
		IODeviceWrapper(const T& device)
		{
 8005ba0:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <_GLOBAL__sub_I_uart+0xe0>)
 8005ba2:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <_GLOBAL__sub_I_uart+0xe4>)
#include "limits.h"
#include <xpcc/architecture.hpp>
#include "commandHandlers.h"

xpcc::stm32::BufferedUsart2 uart(921600, 10);
xpcc::IODeviceWrapper<xpcc::stm32::BufferedUsart2> uartWrap(uart);
 8005ba4:	492e      	ldr	r1, [pc, #184]	; (8005c60 <_GLOBAL__sub_I_uart+0xe8>)
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	4632      	mov	r2, r6
 8005bac:	47a8      	blx	r5
xpcc::IOStream coutRaw(uartWrap);
 8005bae:	492a      	ldr	r1, [pc, #168]	; (8005c58 <_GLOBAL__sub_I_uart+0xe0>)
 8005bb0:	482c      	ldr	r0, [pc, #176]	; (8005c64 <_GLOBAL__sub_I_uart+0xec>)
 8005bb2:	47a0      	blx	r4
			// get rid of the warning about an unused parameter
			(void) device;
		}
		IODeviceWrapper()
		{
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <_GLOBAL__sub_I_uart+0xf0>)

xpcc::IODeviceWrapper<Stream<Prefix::POSITION, false> > poutWrap;
 8005bb6:	492d      	ldr	r1, [pc, #180]	; (8005c6c <_GLOBAL__sub_I_uart+0xf4>)
 8005bb8:	f8cb 3000 	str.w	r3, [fp]
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	4658      	mov	r0, fp
 8005bc0:	47a8      	blx	r5
xpcc::IOStream pout(poutWrap);
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	482a      	ldr	r0, [pc, #168]	; (8005c70 <_GLOBAL__sub_I_uart+0xf8>)
 8005bc6:	47a0      	blx	r4
 8005bc8:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <_GLOBAL__sub_I_uart+0xfc>)

xpcc::IODeviceWrapper<Stream<Prefix::MEASUREMENT, true> > moutWrap;
 8005bca:	492b      	ldr	r1, [pc, #172]	; (8005c78 <_GLOBAL__sub_I_uart+0x100>)
 8005bcc:	f8ca 3000 	str.w	r3, [sl]
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	47a8      	blx	r5
xpcc::IOStream mout(moutWrap);
 8005bd6:	4651      	mov	r1, sl
 8005bd8:	4828      	ldr	r0, [pc, #160]	; (8005c7c <_GLOBAL__sub_I_uart+0x104>)
 8005bda:	47a0      	blx	r4
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <_GLOBAL__sub_I_uart+0x108>)

xpcc::IODeviceWrapper<Stream<Prefix::DEBUG, false> > doutWrap;
 8005bde:	4929      	ldr	r1, [pc, #164]	; (8005c84 <_GLOBAL__sub_I_uart+0x10c>)
 8005be0:	f8c9 3000 	str.w	r3, [r9]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4648      	mov	r0, r9
 8005be8:	47a8      	blx	r5
xpcc::IOStream dout(doutWrap);
 8005bea:	4649      	mov	r1, r9
 8005bec:	4826      	ldr	r0, [pc, #152]	; (8005c88 <_GLOBAL__sub_I_uart+0x110>)
 8005bee:	47a0      	blx	r4
 8005bf0:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <_GLOBAL__sub_I_uart+0x114>)

xpcc::IODeviceWrapper<Stream<Prefix::ERROR, false> > cerrWrap;
 8005bf2:	4927      	ldr	r1, [pc, #156]	; (8005c90 <_GLOBAL__sub_I_uart+0x118>)
 8005bf4:	f8c8 3000 	str.w	r3, [r8]
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	47a8      	blx	r5
xpcc::IOStream cerr(cerrWrap);
 8005bfe:	4641      	mov	r1, r8
 8005c00:	4824      	ldr	r0, [pc, #144]	; (8005c94 <_GLOBAL__sub_I_uart+0x11c>)
 8005c02:	47a0      	blx	r4
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <_GLOBAL__sub_I_uart+0x120>)

xpcc::IODeviceWrapper<Stream<Prefix::INFO, false> > iWrap;
 8005c06:	4925      	ldr	r1, [pc, #148]	; (8005c9c <_GLOBAL__sub_I_uart+0x124>)
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	47a8      	blx	r5
xpcc::IOStream iout(iWrap);
 8005c10:	4639      	mov	r1, r7
 8005c12:	4823      	ldr	r0, [pc, #140]	; (8005ca0 <_GLOBAL__sub_I_uart+0x128>)
 8005c14:	47a0      	blx	r4
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <_GLOBAL__sub_I_uart+0x12c>)
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <_GLOBAL__sub_I_uart+0x130>)

xpcc::IODeviceWrapper<Stream<Prefix::COMMAND, false> > cWrap;
 8005c1a:	4924      	ldr	r1, [pc, #144]	; (8005cac <_GLOBAL__sub_I_uart+0x134>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4822      	ldr	r0, [pc, #136]	; (8005ca8 <_GLOBAL__sub_I_uart+0x130>)
 8005c20:	4632      	mov	r2, r6
 8005c22:	47a8      	blx	r5
xpcc::IOStream commandOut(cWrap);
 8005c24:	4920      	ldr	r1, [pc, #128]	; (8005ca8 <_GLOBAL__sub_I_uart+0x130>)
 8005c26:	4822      	ldr	r0, [pc, #136]	; (8005cb0 <_GLOBAL__sub_I_uart+0x138>)
 8005c28:	47a0      	blx	r4
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <_GLOBAL__sub_I_uart+0x13c>)
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <_GLOBAL__sub_I_uart+0x140>)

xpcc::IODeviceWrapper<Stream<Prefix::CONTROL, false> > kWrap;
 8005c2e:	4923      	ldr	r1, [pc, #140]	; (8005cbc <_GLOBAL__sub_I_uart+0x144>)
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	4610      	mov	r0, r2
 8005c34:	4632      	mov	r2, r6
 8005c36:	47a8      	blx	r5
xpcc::IOStream controlOut(kWrap);
 8005c38:	491f      	ldr	r1, [pc, #124]	; (8005cb8 <_GLOBAL__sub_I_uart+0x140>)
 8005c3a:	4821      	ldr	r0, [pc, #132]	; (8005cc0 <_GLOBAL__sub_I_uart+0x148>)
 8005c3c:	47a0      	blx	r4
 8005c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c42:	bf00      	nop
 8005c44:	080072f1 	.word	0x080072f1
 8005c48:	20000158 	.word	0x20000158
 8005c4c:	0800788d 	.word	0x0800788d
 8005c50:	080078f1 	.word	0x080078f1
 8005c54:	200013dc 	.word	0x200013dc
 8005c58:	200013ac 	.word	0x200013ac
 8005c5c:	080093e8 	.word	0x080093e8
 8005c60:	08002989 	.word	0x08002989
 8005c64:	20001398 	.word	0x20001398
 8005c68:	080093c8 	.word	0x080093c8
 8005c6c:	0800297d 	.word	0x0800297d
 8005c70:	200013a4 	.word	0x200013a4
 8005c74:	080093a8 	.word	0x080093a8
 8005c78:	08002971 	.word	0x08002971
 8005c7c:	2000117c 	.word	0x2000117c
 8005c80:	08009388 	.word	0x08009388
 8005c84:	08002965 	.word	0x08002965
 8005c88:	200013bc 	.word	0x200013bc
 8005c8c:	08009368 	.word	0x08009368
 8005c90:	08002959 	.word	0x08002959
 8005c94:	20001184 	.word	0x20001184
 8005c98:	08009348 	.word	0x08009348
 8005c9c:	0800294d 	.word	0x0800294d
 8005ca0:	200013d0 	.word	0x200013d0
 8005ca4:	08009328 	.word	0x08009328
 8005ca8:	20001194 	.word	0x20001194
 8005cac:	08002941 	.word	0x08002941
 8005cb0:	2000118c 	.word	0x2000118c
 8005cb4:	08009308 	.word	0x08009308
 8005cb8:	200013a0 	.word	0x200013a0
 8005cbc:	08002935 	.word	0x08002935
 8005cc0:	200013c8 	.word	0x200013c8
 8005cc4:	200013c4 	.word	0x200013c4
 8005cc8:	200013b0 	.word	0x200013b0
 8005ccc:	200013b4 	.word	0x200013b4
 8005cd0:	200013d8 	.word	0x200013d8

08005cd4 <_ZN16QuadrangleZigZag6sampleEv>:
		Control<X>::setShallPosition(nextPosX);
		approachingX = true;
	}
}

void QuadrangleZigZag::sample(){
 8005cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static inline int getShallPosition(){ return pos_shall; }
 8005cd8:	4c97      	ldr	r4, [pc, #604]	; (8005f38 <_ZN16QuadrangleZigZag6sampleEv+0x264>)
int QuadrangleZigZag::startY;
int QuadrangleZigZag::stopY;
int QuadrangleZigZag::samplingResolution;

bool QuadrangleZigZag::isAtEnd(){
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
 8005cda:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8005fa4 <_ZN16QuadrangleZigZag6sampleEv+0x2d0>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	f8d8 3000 	ldr.w	r3, [r8]
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005ce4:	4e95      	ldr	r6, [pc, #596]	; (8005f3c <_ZN16QuadrangleZigZag6sampleEv+0x268>)
int QuadrangleZigZag::startY;
int QuadrangleZigZag::stopY;
int QuadrangleZigZag::samplingResolution;

bool QuadrangleZigZag::isAtEnd(){
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bfb8      	it	lt
 8005cec:	425b      	neglt	r3, r3
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	f340 80b6 	ble.w	8005e60 <_ZN16QuadrangleZigZag6sampleEv+0x18c>

void QuadrangleZigZag::sample(){
	if(isAtEnd() && Pattern::isRunning()){
		Pattern::done();
	}
	if(yIsLongSide){
 8005cf4:	4b92      	ldr	r3, [pc, #584]	; (8005f40 <_ZN16QuadrangleZigZag6sampleEv+0x26c>)
inline void QuadrangleZigZag::yLongSample(){
	int x = Control<X>::getIsPosition();
	int y = Control<Y>::getIsPosition();
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x) && reachedPointY(y)){
 8005cf6:	4d93      	ldr	r5, [pc, #588]	; (8005f44 <_ZN16QuadrangleZigZag6sampleEv+0x270>)

void QuadrangleZigZag::sample(){
	if(isAtEnd() && Pattern::isRunning()){
		Pattern::done();
	}
	if(yIsLongSide){
 8005cf8:	781f      	ldrb	r7, [r3, #0]
static bool timerRunning = false;
static int pointsCounter = 0;
static float maxSpeed;

inline void QuadrangleZigZag::yLongSample(){
	int x = Control<X>::getIsPosition();
 8005cfa:	4b93      	ldr	r3, [pc, #588]	; (8005f48 <_ZN16QuadrangleZigZag6sampleEv+0x274>)

void QuadrangleZigZag::sample(){
	if(isAtEnd() && Pattern::isRunning()){
		Pattern::done();
	}
	if(yIsLongSide){
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	d14e      	bne.n	8005d9e <_ZN16QuadrangleZigZag6sampleEv+0xca>
		approachingX = true;
	}
}

inline void QuadrangleZigZag::xLongSample(){
	int x = Control<X>::getIsPosition();
 8005d00:	4798      	blx	r3
 8005d02:	4681      	mov	r9, r0
	int y = Control<Y>::getIsPosition();
 8005d04:	47b0      	blx	r6
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x)){
 8005d06:	782b      	ldrb	r3, [r5, #0]
 8005d08:	b16b      	cbz	r3, 8005d26 <_ZN16QuadrangleZigZag6sampleEv+0x52>
 8005d0a:	6823      	ldr	r3, [r4, #0]
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005d0c:	ebc3 0909 	rsb	r9, r3, r9
 8005d10:	f1b9 0f00 	cmp.w	r9, #0
 8005d14:	bfb8      	it	lt
 8005d16:	f1c9 0900 	rsblt	r9, r9, #0
inline void QuadrangleZigZag::xLongSample(){
	int x = Control<X>::getIsPosition();
	int y = Control<Y>::getIsPosition();
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x)){
 8005d1a:	f1b9 0f01 	cmp.w	r9, #1
 8005d1e:	f340 80ca 	ble.w	8005eb6 <_ZN16QuadrangleZigZag6sampleEv+0x1e2>
 8005d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d26:	4b89      	ldr	r3, [pc, #548]	; (8005f4c <_ZN16QuadrangleZigZag6sampleEv+0x278>)
 8005d28:	681b      	ldr	r3, [r3, #0]
static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointY(int y){
	return abs(y-nextY()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005d2a:	1ac0      	subs	r0, r0, r3
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bfb8      	it	lt
 8005d30:	4240      	neglt	r0, r0
		nextPosY = nextY()+samplingResolution;
		Control<Y>::setShallPosition(nextPosY);
		nextPosX = startX;
		Control<X>::setShallPosition(nextPosX);
		approachingX = false;
	}else if(!approachingX && reachedPointY(y) && reachedPointX(x)){
 8005d32:	2801      	cmp	r0, #1
 8005d34:	dcf5      	bgt.n	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>
 8005d36:	6823      	ldr	r3, [r4, #0]
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005d38:	ebc3 0909 	rsb	r9, r3, r9
 8005d3c:	f1b9 0f00 	cmp.w	r9, #0
 8005d40:	bfb8      	it	lt
 8005d42:	f1c9 0900 	rsblt	r9, r9, #0
		nextPosY = nextY()+samplingResolution;
		Control<Y>::setShallPosition(nextPosY);
		nextPosX = startX;
		Control<X>::setShallPosition(nextPosX);
		approachingX = false;
	}else if(!approachingX && reachedPointY(y) && reachedPointX(x)){
 8005d46:	f1b9 0f01 	cmp.w	r9, #1
 8005d4a:	dcea      	bgt.n	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>
		//system should be in rest
		if(!timerRunning){
 8005d4c:	4f80      	ldr	r7, [pc, #512]	; (8005f50 <_ZN16QuadrangleZigZag6sampleEv+0x27c>)
 8005d4e:	783b      	ldrb	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80d1 	beq.w	8005ef8 <_ZN16QuadrangleZigZag6sampleEv+0x224>

template<typename T>
bool
xpcc::Timeout<T>::isExpired()
{
	if (state == ACTIVE)
 8005d56:	4e7f      	ldr	r6, [pc, #508]	; (8005f54 <_ZN16QuadrangleZigZag6sampleEv+0x280>)
 8005d58:	7933      	ldrb	r3, [r6, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f000 813f 	beq.w	8005fde <_ZN16QuadrangleZigZag6sampleEv+0x30a>
	static void setShallSpeed(double speed);
	static int getSpeedErrorSum();
	static int getPositionErrorSum();
	static int32_t getIsPosition();
	static inline int getShallSpeed(){ return v_shall; }
	static inline int getIsSpeed(){ return v_is; }
 8005d60:	4b7d      	ldr	r3, [pc, #500]	; (8005f58 <_ZN16QuadrangleZigZag6sampleEv+0x284>)
 8005d62:	681b      	ldr	r3, [r3, #0]
			timeout.restart(RECTANGLE_ZIGZAG_TIMEOUT);
			timerRunning = true;
		}

		if(timeout.isExpired()){
			if(Control<Y>::getIsSpeed() !=0 ){
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f040 80c2 	bne.w	8005eee <_ZN16QuadrangleZigZag6sampleEv+0x21a>
				i = 0;
				return;
			}
			i++;
 8005d6a:	4a7c      	ldr	r2, [pc, #496]	; (8005f5c <_ZN16QuadrangleZigZag6sampleEv+0x288>)
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6013      	str	r3, [r2, #0]
			if(i < 50000){
 8005d72:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f340 812c 	ble.w	8005fd4 <_ZN16QuadrangleZigZag6sampleEv+0x300>
				return;
			}
		}
		//timeout reached or system is in rest
		timerRunning = false;
 8005d7c:	2300      	movs	r3, #0
		timeout.stop();

		//Control<ALL>::setMaxSpeed(maxSpeed);
		Trigger::enable(true);
 8005d7e:	2001      	movs	r0, #1

template<typename T>
void
xpcc::Timeout<T>::stop()
{
	this->state = STOPPED;
 8005d80:	7133      	strb	r3, [r6, #4]
			if(i < 50000){
				return;
			}
		}
		//timeout reached or system is in rest
		timerRunning = false;
 8005d82:	703b      	strb	r3, [r7, #0]
		timeout.stop();

		//Control<ALL>::setMaxSpeed(maxSpeed);
		Trigger::enable(true);
 8005d84:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <_ZN16QuadrangleZigZag6sampleEv+0x28c>)
 8005d86:	4798      	blx	r3
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005d88:	4b76      	ldr	r3, [pc, #472]	; (8005f64 <_ZN16QuadrangleZigZag6sampleEv+0x290>)
		nextPosX = stopX;
 8005d8a:	f8d8 6000 	ldr.w	r6, [r8]
 8005d8e:	4798      	blx	r3
	Control<ALL>::resetVPid();
 8005d90:	4b75      	ldr	r3, [pc, #468]	; (8005f68 <_ZN16QuadrangleZigZag6sampleEv+0x294>)
 8005d92:	4798      	blx	r3
		Control<X>::setShallPosition(nextPosX);
		approachingX = true;
 8005d94:	2301      	movs	r3, #1
	pos_shall = position;
 8005d96:	6026      	str	r6, [r4, #0]
 8005d98:	702b      	strb	r3, [r5, #0]
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
static bool timerRunning = false;
static int pointsCounter = 0;
static float maxSpeed;

inline void QuadrangleZigZag::yLongSample(){
	int x = Control<X>::getIsPosition();
 8005d9e:	4798      	blx	r3
 8005da0:	4607      	mov	r7, r0
	int y = Control<Y>::getIsPosition();
 8005da2:	47b0      	blx	r6
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x) && reachedPointY(y)){
 8005da4:	782b      	ldrb	r3, [r5, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d039      	beq.n	8005e1e <_ZN16QuadrangleZigZag6sampleEv+0x14a>
	static inline int getShallPosition(){ return pos_shall; }
 8005daa:	6823      	ldr	r3, [r4, #0]
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005dac:	1aff      	subs	r7, r7, r3
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	bfb8      	it	lt
 8005db2:	427f      	neglt	r7, r7
inline void QuadrangleZigZag::yLongSample(){
	int x = Control<X>::getIsPosition();
	int y = Control<Y>::getIsPosition();
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x) && reachedPointY(y)){
 8005db4:	2f01      	cmp	r7, #1
 8005db6:	dcb4      	bgt.n	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>
 8005db8:	4c64      	ldr	r4, [pc, #400]	; (8005f4c <_ZN16QuadrangleZigZag6sampleEv+0x278>)
 8005dba:	6823      	ldr	r3, [r4, #0]
static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointY(int y){
	return abs(y-nextY()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005dbc:	1ac0      	subs	r0, r0, r3
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	bfb8      	it	lt
 8005dc2:	4240      	neglt	r0, r0
inline void QuadrangleZigZag::yLongSample(){
	int x = Control<X>::getIsPosition();
	int y = Control<Y>::getIsPosition();
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x) && reachedPointY(y)){
 8005dc4:	2801      	cmp	r0, #1
 8005dc6:	dcac      	bgt.n	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>
		//system should be in rest
		if(!timerRunning){
 8005dc8:	4f61      	ldr	r7, [pc, #388]	; (8005f50 <_ZN16QuadrangleZigZag6sampleEv+0x27c>)
 8005dca:	783b      	ldrb	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80ed 	beq.w	8005fac <_ZN16QuadrangleZigZag6sampleEv+0x2d8>

template<typename T>
bool
xpcc::Timeout<T>::isExpired()
{
	if (state == ACTIVE)
 8005dd2:	4e60      	ldr	r6, [pc, #384]	; (8005f54 <_ZN16QuadrangleZigZag6sampleEv+0x280>)
 8005dd4:	7933      	ldrb	r3, [r6, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	f000 80fe 	beq.w	8005fd8 <_ZN16QuadrangleZigZag6sampleEv+0x304>
	static void setShallSpeed(double speed);
	static int getSpeedErrorSum();
	static int getPositionErrorSum();
	static int32_t getIsPosition();
	static inline int getShallSpeed(){ return v_shall; }
	static inline int getIsSpeed(){ return v_is; }
 8005ddc:	4b63      	ldr	r3, [pc, #396]	; (8005f6c <_ZN16QuadrangleZigZag6sampleEv+0x298>)
 8005dde:	681b      	ldr	r3, [r3, #0]
			timeout.restart(RECTANGLE_ZIGZAG_TIMEOUT);
			timerRunning = true;
		}

		if(timeout.isExpired()){
			if(Control<X>::getIsSpeed() !=0 ){
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 8084 	bne.w	8005eee <_ZN16QuadrangleZigZag6sampleEv+0x21a>
				i = 0;
				return;
			}
			i++;
 8005de6:	4a5d      	ldr	r2, [pc, #372]	; (8005f5c <_ZN16QuadrangleZigZag6sampleEv+0x288>)
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
			if(i < 50000){
 8005dee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005df2:	4293      	cmp	r3, r2
 8005df4:	dd95      	ble.n	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>
				return;
			}
		}
		//timeout reached or system is in rest
		timerRunning = false;
 8005df6:	f04f 0800 	mov.w	r8, #0
		timeout.stop();
		//Control<ALL>::setMaxSpeed(maxSpeed);
		Trigger::enable(true);
 8005dfa:	2001      	movs	r0, #1

template<typename T>
void
xpcc::Timeout<T>::stop()
{
	this->state = STOPPED;
 8005dfc:	f886 8004 	strb.w	r8, [r6, #4]
 8005e00:	4b57      	ldr	r3, [pc, #348]	; (8005f60 <_ZN16QuadrangleZigZag6sampleEv+0x28c>)
			if(i < 50000){
				return;
			}
		}
		//timeout reached or system is in rest
		timerRunning = false;
 8005e02:	f887 8000 	strb.w	r8, [r7]
		timeout.stop();
		//Control<ALL>::setMaxSpeed(maxSpeed);
		Trigger::enable(true);
 8005e06:	4798      	blx	r3
		nextPosY = stopY;
 8005e08:	4b59      	ldr	r3, [pc, #356]	; (8005f70 <_ZN16QuadrangleZigZag6sampleEv+0x29c>)
 8005e0a:	681e      	ldr	r6, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005e0c:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <_ZN16QuadrangleZigZag6sampleEv+0x290>)
 8005e0e:	4798      	blx	r3
	Control<ALL>::resetVPid();
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <_ZN16QuadrangleZigZag6sampleEv+0x294>)
 8005e12:	4798      	blx	r3
	pos_shall = position;
 8005e14:	6026      	str	r6, [r4, #0]
		Control<Y>::setShallPosition(nextPosY);
		approachingX = false;
 8005e16:	f885 8000 	strb.w	r8, [r5]
 8005e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static inline int getShallPosition(){ return pos_shall; }
 8005e1e:	4e4b      	ldr	r6, [pc, #300]	; (8005f4c <_ZN16QuadrangleZigZag6sampleEv+0x278>)
 8005e20:	6832      	ldr	r2, [r6, #0]
static inline bool reachedPointX(int x){
	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
}

static inline bool reachedPointY(int y){
	return abs(y-nextY()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005e22:	1a80      	subs	r0, r0, r2
 8005e24:	2800      	cmp	r0, #0
 8005e26:	bfb8      	it	lt
 8005e28:	4240      	neglt	r0, r0
		//Control<ALL>::setMaxSpeed(maxSpeed);
		Trigger::enable(true);
		nextPosY = stopY;
		Control<Y>::setShallPosition(nextPosY);
		approachingX = false;
	}else if(!approachingX && reachedPointY(y)){
 8005e2a:	2801      	cmp	r0, #1
 8005e2c:	f73f af79 	bgt.w	8005d22 <_ZN16QuadrangleZigZag6sampleEv+0x4e>

		//Control<ALL>::setMaxSpeed(1);
		Trigger::enable(false);
 8005e30:	4618      	mov	r0, r3
 8005e32:	4b4b      	ldr	r3, [pc, #300]	; (8005f60 <_ZN16QuadrangleZigZag6sampleEv+0x28c>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005e34:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8005f64 <_ZN16QuadrangleZigZag6sampleEv+0x290>
	Control<ALL>::resetVPid();
 8005e38:	4f4b      	ldr	r7, [pc, #300]	; (8005f68 <_ZN16QuadrangleZigZag6sampleEv+0x294>)
 8005e3a:	4798      	blx	r3
		nextPosX = nextX()+samplingResolution;
 8005e3c:	4b4d      	ldr	r3, [pc, #308]	; (8005f74 <_ZN16QuadrangleZigZag6sampleEv+0x2a0>)
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	eb02 0903 	add.w	r9, r2, r3
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005e46:	47c0      	blx	r8
	Control<ALL>::resetVPid();
 8005e48:	47b8      	blx	r7
		Control<X>::setShallPosition(nextPosX);
		nextPosY = startY;
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <_ZN16QuadrangleZigZag6sampleEv+0x2a4>)
	pos_shall = position;
 8005e4c:	f8c4 9000 	str.w	r9, [r4]
 8005e50:	681c      	ldr	r4, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005e52:	47c0      	blx	r8
	Control<ALL>::resetVPid();
 8005e54:	47b8      	blx	r7
		Control<Y>::setShallPosition(nextPosY);
		approachingX = true;
 8005e56:	2301      	movs	r3, #1
	pos_shall = position;
 8005e58:	6034      	str	r4, [r6, #0]
 8005e5a:	702b      	strb	r3, [r5, #0]
 8005e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
int QuadrangleZigZag::stopY;
int QuadrangleZigZag::samplingResolution;

bool QuadrangleZigZag::isAtEnd(){
	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
			&& stopY - Control<Y>::getIsPosition() <= RECTANGLE_ZIGZAG_THRESHOLD;
 8005e60:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <_ZN16QuadrangleZigZag6sampleEv+0x29c>)
 8005e62:	681d      	ldr	r5, [r3, #0]
 8005e64:	47b0      	blx	r6
 8005e66:	1a28      	subs	r0, r5, r0
 8005e68:	2801      	cmp	r0, #1
 8005e6a:	f73f af43 	bgt.w	8005cf4 <_ZN16QuadrangleZigZag6sampleEv+0x20>
		running = 0;
		State::set(State::READY);
		dout << "Pattern done" << endl;
	}
	static int isRunning(){
		return running && !paused;
 8005e6e:	4a43      	ldr	r2, [pc, #268]	; (8005f7c <_ZN16QuadrangleZigZag6sampleEv+0x2a8>)
 8005e70:	7813      	ldrb	r3, [r2, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f43f af3e 	beq.w	8005cf4 <_ZN16QuadrangleZigZag6sampleEv+0x20>
 8005e78:	4b41      	ldr	r3, [pc, #260]	; (8005f80 <_ZN16QuadrangleZigZag6sampleEv+0x2ac>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f47f af39 	bne.w	8005cf4 <_ZN16QuadrangleZigZag6sampleEv+0x20>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8005e82:	4d40      	ldr	r5, [pc, #256]	; (8005f84 <_ZN16QuadrangleZigZag6sampleEv+0x2b0>)
			start();
		}*/
		paused = false;
	}
	static void done(){
		running = 0;
 8005e84:	7013      	strb	r3, [r2, #0]
		State::set(State::READY);
 8005e86:	2001      	movs	r0, #1
 8005e88:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <_ZN16QuadrangleZigZag6sampleEv+0x2b4>)
 8005e8a:	4798      	blx	r3
 8005e8c:	686b      	ldr	r3, [r5, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04c      	beq.n	8005f2c <_ZN16QuadrangleZigZag6sampleEv+0x258>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8005e92:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8005e94:	4628      	mov	r0, r5
 8005e96:	493d      	ldr	r1, [pc, #244]	; (8005f8c <_ZN16QuadrangleZigZag6sampleEv+0x2b8>)
 8005e98:	bf0c      	ite	eq
 8005e9a:	4b3d      	ldreq	r3, [pc, #244]	; (8005f90 <_ZN16QuadrangleZigZag6sampleEv+0x2bc>)
			}
			else {
				this->writeHex(s);
 8005e9c:	4b3d      	ldrne	r3, [pc, #244]	; (8005f94 <_ZN16QuadrangleZigZag6sampleEv+0x2c0>)
 8005e9e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8005ea0:	686b      	ldr	r3, [r5, #4]
 8005ea2:	4838      	ldr	r0, [pc, #224]	; (8005f84 <_ZN16QuadrangleZigZag6sampleEv+0x2b0>)
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d03b      	beq.n	8005f20 <_ZN16QuadrangleZigZag6sampleEv+0x24c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8005ea8:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8005eaa:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8005eac:	bf0c      	ite	eq
 8005eae:	4b3a      	ldreq	r3, [pc, #232]	; (8005f98 <_ZN16QuadrangleZigZag6sampleEv+0x2c4>)
			}
			else {
				this->writeHex(v);
 8005eb0:	4b3a      	ldrne	r3, [pc, #232]	; (8005f9c <_ZN16QuadrangleZigZag6sampleEv+0x2c8>)
 8005eb2:	4798      	blx	r3
 8005eb4:	e71e      	b.n	8005cf4 <_ZN16QuadrangleZigZag6sampleEv+0x20>
	int y = Control<Y>::getIsPosition();
	int nextPosY;
	int nextPosX;
	if(approachingX && reachedPointX(x)){
		//Control<ALL>::setMaxSpeed(1);
		Trigger::enable(false);
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <_ZN16QuadrangleZigZag6sampleEv+0x28c>)
 8005eba:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005f4c <_ZN16QuadrangleZigZag6sampleEv+0x278>
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005ebe:	4e29      	ldr	r6, [pc, #164]	; (8005f64 <_ZN16QuadrangleZigZag6sampleEv+0x290>)
	Control<ALL>::resetVPid();
 8005ec0:	4c29      	ldr	r4, [pc, #164]	; (8005f68 <_ZN16QuadrangleZigZag6sampleEv+0x294>)
 8005ec2:	4798      	blx	r3
		nextPosY = nextY()+samplingResolution;
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <_ZN16QuadrangleZigZag6sampleEv+0x2a0>)
 8005ec6:	f8d8 2000 	ldr.w	r2, [r8]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	eb02 0903 	add.w	r9, r2, r3
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005ed0:	47b0      	blx	r6
	Control<ALL>::resetVPid();
 8005ed2:	47a0      	blx	r4
		Control<Y>::setShallPosition(nextPosY);
		nextPosX = startX;
 8005ed4:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <_ZN16QuadrangleZigZag6sampleEv+0x2cc>)
	pos_shall = position;
 8005ed6:	f8c8 9000 	str.w	r9, [r8]
 8005eda:	f8d3 8000 	ldr.w	r8, [r3]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8005ede:	47b0      	blx	r6
	Control<ALL>::resetVPid();
 8005ee0:	47a0      	blx	r4
	pos_shall = position;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <_ZN16QuadrangleZigZag6sampleEv+0x264>)
		Control<X>::setShallPosition(nextPosX);
		approachingX = false;
 8005ee4:	702f      	strb	r7, [r5, #0]
 8005ee6:	f8c3 8000 	str.w	r8, [r3]
 8005eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			timerRunning = true;
		}

		if(timeout.isExpired()){
			if(Control<Y>::getIsSpeed() !=0 ){
				i = 0;
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <_ZN16QuadrangleZigZag6sampleEv+0x288>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

template<typename T>
void
xpcc::Timeout<T>::restart(Timestamp time)
{
	endTime = T::now() + time;
 8005ef8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005fa8 <_ZN16QuadrangleZigZag6sampleEv+0x2d4>
 8005efc:	4e15      	ldr	r6, [pc, #84]	; (8005f54 <_ZN16QuadrangleZigZag6sampleEv+0x280>)
 8005efe:	47c8      	blx	r9
	state = ACTIVE;
 8005f00:	2301      	movs	r3, #1
		}

		inline Timestamp
		operator + (const Timestamp& other) const
		{
			return Timestamp(time + other.time);
 8005f02:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4

template<typename T>
void
xpcc::Timeout<T>::restart(Timestamp time)
{
	endTime = T::now() + time;
 8005f06:	6030      	str	r0, [r6, #0]
	state = ACTIVE;
 8005f08:	7133      	strb	r3, [r6, #4]
		approachingX = false;
	}else if(!approachingX && reachedPointY(y) && reachedPointX(x)){
		//system should be in rest
		if(!timerRunning){
			timeout.restart(RECTANGLE_ZIGZAG_TIMEOUT);
			timerRunning = true;
 8005f0a:	703b      	strb	r3, [r7, #0]
bool
xpcc::Timeout<T>::isExpired()
{
	if (state == ACTIVE)
	{
		if (T::now() >= endTime)
 8005f0c:	47c8      	blx	r9
		}
		
		inline bool
		operator >= (const Timestamp& other) const
		{
			return ((int_fast16_t) (time - other.time)) >= 0;
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	1ac0      	subs	r0, r0, r3
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f6ff af32 	blt.w	8005d7c <_ZN16QuadrangleZigZag6sampleEv+0xa8>
		{
			state = EXPIRED;
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <_ZN16QuadrangleZigZag6sampleEv+0x280>)
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	711a      	strb	r2, [r3, #4]
 8005f1e:	e71f      	b.n	8005d60 <_ZN16QuadrangleZigZag6sampleEv+0x8c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8005f20:	6800      	ldr	r0, [r0, #0]
 8005f22:	6803      	ldr	r3, [r0, #0]
 8005f24:	210a      	movs	r1, #10
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4798      	blx	r3
 8005f2a:	e6e3      	b.n	8005cf4 <_ZN16QuadrangleZigZag6sampleEv+0x20>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8005f2c:	6828      	ldr	r0, [r5, #0]
 8005f2e:	4917      	ldr	r1, [pc, #92]	; (8005f8c <_ZN16QuadrangleZigZag6sampleEv+0x2b8>)
 8005f30:	6803      	ldr	r3, [r0, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4798      	blx	r3
 8005f36:	e7b3      	b.n	8005ea0 <_ZN16QuadrangleZigZag6sampleEv+0x1cc>
 8005f38:	20000680 	.word	0x20000680
 8005f3c:	08000e81 	.word	0x08000e81
 8005f40:	2000014c 	.word	0x2000014c
 8005f44:	200013e5 	.word	0x200013e5
 8005f48:	08000e89 	.word	0x08000e89
 8005f4c:	20000674 	.word	0x20000674
 8005f50:	200013e4 	.word	0x200013e4
 8005f54:	200013ec 	.word	0x200013ec
 8005f58:	20000670 	.word	0x20000670
 8005f5c:	20001400 	.word	0x20001400
 8005f60:	080004a5 	.word	0x080004a5
 8005f64:	08000eb1 	.word	0x08000eb1
 8005f68:	08000e95 	.word	0x08000e95
 8005f6c:	2000067c 	.word	0x2000067c
 8005f70:	20001404 	.word	0x20001404
 8005f74:	20001408 	.word	0x20001408
 8005f78:	200013e8 	.word	0x200013e8
 8005f7c:	200008d0 	.word	0x200008d0
 8005f80:	200008d8 	.word	0x200008d8
 8005f84:	200013bc 	.word	0x200013bc
 8005f88:	080067d5 	.word	0x080067d5
 8005f8c:	0800928c 	.word	0x0800928c
 8005f90:	080079ed 	.word	0x080079ed
 8005f94:	080079a9 	.word	0x080079a9
 8005f98:	08007af5 	.word	0x08007af5
 8005f9c:	08007ac1 	.word	0x08007ac1
 8005fa0:	200013fc 	.word	0x200013fc
 8005fa4:	200013f8 	.word	0x200013f8
 8005fa8:	08006e15 	.word	0x08006e15

template<typename T>
void
xpcc::Timeout<T>::restart(Timestamp time)
{
	endTime = T::now() + time;
 8005fac:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8005fe8 <_ZN16QuadrangleZigZag6sampleEv+0x314>
 8005fb0:	4e0c      	ldr	r6, [pc, #48]	; (8005fe4 <_ZN16QuadrangleZigZag6sampleEv+0x310>)
 8005fb2:	47c8      	blx	r9
	state = ACTIVE;
 8005fb4:	2301      	movs	r3, #1
		}

		inline Timestamp
		operator + (const Timestamp& other) const
		{
			return Timestamp(time + other.time);
 8005fb6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4

template<typename T>
void
xpcc::Timeout<T>::restart(Timestamp time)
{
	endTime = T::now() + time;
 8005fba:	6030      	str	r0, [r6, #0]
	state = ACTIVE;
 8005fbc:	7133      	strb	r3, [r6, #4]
	int nextPosX;
	if(approachingX && reachedPointX(x) && reachedPointY(y)){
		//system should be in rest
		if(!timerRunning){
			timeout.restart(RECTANGLE_ZIGZAG_TIMEOUT);
			timerRunning = true;
 8005fbe:	703b      	strb	r3, [r7, #0]
bool
xpcc::Timeout<T>::isExpired()
{
	if (state == ACTIVE)
	{
		if (T::now() >= endTime)
 8005fc0:	47c8      	blx	r9
		}
		
		inline bool
		operator >= (const Timestamp& other) const
		{
			return ((int_fast16_t) (time - other.time)) >= 0;
 8005fc2:	6833      	ldr	r3, [r6, #0]
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f6ff af15 	blt.w	8005df6 <_ZN16QuadrangleZigZag6sampleEv+0x122>
		{
			state = EXPIRED;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <_ZN16QuadrangleZigZag6sampleEv+0x310>)
 8005fce:	2202      	movs	r2, #2
 8005fd0:	711a      	strb	r2, [r3, #4]
 8005fd2:	e703      	b.n	8005ddc <_ZN16QuadrangleZigZag6sampleEv+0x108>
 8005fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd8:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8005fe8 <_ZN16QuadrangleZigZag6sampleEv+0x314>
 8005fdc:	e7f0      	b.n	8005fc0 <_ZN16QuadrangleZigZag6sampleEv+0x2ec>
 8005fde:	f8df 9008 	ldr.w	r9, [pc, #8]	; 8005fe8 <_ZN16QuadrangleZigZag6sampleEv+0x314>
 8005fe2:	e793      	b.n	8005f0c <_ZN16QuadrangleZigZag6sampleEv+0x238>
 8005fe4:	200013ec 	.word	0x200013ec
 8005fe8:	08006e15 	.word	0x08006e15

08005fec <_ZN16QuadrangleZigZag9configureEffffi>:
 8005fec:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800609c <_ZN16QuadrangleZigZag9configureEffffi+0xb0>
 8005ff0:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8005ff4:	ee05 1a10 	vmov	s10, r1
 8005ff8:	ee06 2a90 	vmov	s13, r2
 8005ffc:	eef0 5a67 	vmov.f32	s11, s15
 8006000:	ee45 5a07 	vmla.f32	s11, s10, s14
 8006004:	eeb0 6a67 	vmov.f32	s12, s15
 8006008:	ee05 3a10 	vmov	s10, r3
 800600c:	ee06 6a87 	vmla.f32	s12, s13, s14
 8006010:	eef0 6a67 	vmov.f32	s13, s15
 8006014:	ee45 6a07 	vmla.f32	s13, s10, s14
 8006018:	ee05 0a10 	vmov	s10, r0
 800601c:	ee45 7a07 	vmla.f32	s15, s10, s14
	approachingX = yIsLongSide;
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
}

void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8006026:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
	QuadrangleZigZag::stopX = startX + Transform::mmToEncoder(width);
	QuadrangleZigZag::stopY = startY + Transform::mmToEncoder(height);
	QuadrangleZigZag::samplingResolution = samplingResolution;
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <_ZN16QuadrangleZigZag9configureEffffi+0xb4>)
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 800602e:	481d      	ldr	r0, [pc, #116]	; (80060a4 <_ZN16QuadrangleZigZag9configureEffffi+0xb8>)
void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
	QuadrangleZigZag::stopX = startX + Transform::mmToEncoder(width);
	QuadrangleZigZag::stopY = startY + Transform::mmToEncoder(height);
	QuadrangleZigZag::samplingResolution = samplingResolution;
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006036:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 800603a:	ee15 3a90 	vmov	r3, s11
 800603e:	ee16 1a90 	vmov	r1, s13
 8006042:	ee17 2a90 	vmov	r2, s15
 8006046:	ee16 4a10 	vmov	r4, s12

void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
	QuadrangleZigZag::stopX = startX + Transform::mmToEncoder(width);
	QuadrangleZigZag::stopY = startY + Transform::mmToEncoder(height);
 800604a:	1859      	adds	r1, r3, r1
}

void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
	QuadrangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 800604c:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <_ZN16QuadrangleZigZag9configureEffffi+0xbc>)
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 800604e:	6807      	ldr	r7, [r0, #0]
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
}

void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
 8006050:	4e16      	ldr	r6, [pc, #88]	; (80060ac <_ZN16QuadrangleZigZag9configureEffffi+0xc0>)
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
 8006052:	4d17      	ldr	r5, [pc, #92]	; (80060b0 <_ZN16QuadrangleZigZag9configureEffffi+0xc4>)
	QuadrangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 8006054:	1914      	adds	r4, r2, r4
 8006056:	601c      	str	r4, [r3, #0]
	QuadrangleZigZag::stopY = startY + Transform::mmToEncoder(height);
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <_ZN16QuadrangleZigZag9configureEffffi+0xc8>)
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
	Control<ALL>::resetVPid();
 800605a:	4c17      	ldr	r4, [pc, #92]	; (80060b8 <_ZN16QuadrangleZigZag9configureEffffi+0xcc>)
 800605c:	6019      	str	r1, [r3, #0]
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <_ZN16QuadrangleZigZag9configureEffffi+0xd0>)
	Trigger::enable(false);
 8006060:	2000      	movs	r0, #0
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 8006062:	601f      	str	r7, [r3, #0]
	Trigger::enable(false);
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <_ZN16QuadrangleZigZag9configureEffffi+0xd4>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006066:	4f17      	ldr	r7, [pc, #92]	; (80060c4 <_ZN16QuadrangleZigZag9configureEffffi+0xd8>)
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
}

void QuadrangleZigZag::configure(float x, float y, float width, float height, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(x);
 8006068:	edc6 7a00 	vstr	s15, [r6]
	QuadrangleZigZag::startY = Transform::mmToEncoder(y);
 800606c:	edc5 5a00 	vstr	s11, [r5]
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
	Trigger::enable(false);
 8006070:	4798      	blx	r3
	yDirection = 1;
 8006072:	4915      	ldr	r1, [pc, #84]	; (80060c8 <_ZN16QuadrangleZigZag9configureEffffi+0xdc>)
	xDirection = 1;
	yIsLongSide = (stopY - startY) > (stopX - startX);
 8006074:	6836      	ldr	r6, [r6, #0]
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
	Trigger::enable(false);
	yDirection = 1;
 8006076:	2201      	movs	r2, #1
 8006078:	600a      	str	r2, [r1, #0]
	xDirection = 1;
 800607a:	4914      	ldr	r1, [pc, #80]	; (80060cc <_ZN16QuadrangleZigZag9configureEffffi+0xe0>)
 800607c:	600a      	str	r2, [r1, #0]
	yIsLongSide = (stopY - startY) > (stopX - startX);
	yIsLongSide = false;
 800607e:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <_ZN16QuadrangleZigZag9configureEffffi+0xe4>)
 8006080:	2300      	movs	r3, #0
 8006082:	7013      	strb	r3, [r2, #0]
	approachingX = yIsLongSide;
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <_ZN16QuadrangleZigZag9configureEffffi+0xe8>)
 8006086:	7013      	strb	r3, [r2, #0]
 8006088:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 800608a:	47a0      	blx	r4
	pos_shall = position;
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <_ZN16QuadrangleZigZag9configureEffffi+0xec>)
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
 800608e:	682d      	ldr	r5, [r5, #0]
 8006090:	601e      	str	r6, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006092:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 8006094:	47a0      	blx	r4
	pos_shall = position;
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <_ZN16QuadrangleZigZag9configureEffffi+0xf0>)
 8006098:	601d      	str	r5, [r3, #0]
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609c:	44fa0000 	.word	0x44fa0000
 80060a0:	20001408 	.word	0x20001408
 80060a4:	2000003c 	.word	0x2000003c
 80060a8:	200013f8 	.word	0x200013f8
 80060ac:	200013fc 	.word	0x200013fc
 80060b0:	200013e8 	.word	0x200013e8
 80060b4:	20001404 	.word	0x20001404
 80060b8:	08000e95 	.word	0x08000e95
 80060bc:	200013e0 	.word	0x200013e0
 80060c0:	080004a5 	.word	0x080004a5
 80060c4:	08000eb1 	.word	0x08000eb1
 80060c8:	200013f4 	.word	0x200013f4
 80060cc:	2000140c 	.word	0x2000140c
 80060d0:	2000014c 	.word	0x2000014c
 80060d4:	200013e5 	.word	0x200013e5
 80060d8:	20000680 	.word	0x20000680
 80060dc:	20000674 	.word	0x20000674

080060e0 <_ZN16QuadrangleZigZag10configure2Effffi>:
 80060e0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006180 <_ZN16QuadrangleZigZag10configure2Effffi+0xa0>
 80060e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80060e8:	ee05 1a10 	vmov	s10, r1
 80060ec:	ee05 2a90 	vmov	s11, r2
	QuadrangleZigZag::stopY = startY + Transform::mmToEncoder(height);
	QuadrangleZigZag::samplingResolution = samplingResolution;
	start();
}

void QuadrangleZigZag::configure2(float startX, float startY, float stopX, float stopY, int samplingResolution){
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	eeb0 6a67 	vmov.f32	s12, s15
 80060f6:	eef0 6a67 	vmov.f32	s13, s15
 80060fa:	ee05 6a07 	vmla.f32	s12, s10, s14
 80060fe:	ee45 6a87 	vmla.f32	s13, s11, s14
 8006102:	ee05 3a10 	vmov	s10, r3
	QuadrangleZigZag::startX = Transform::mmToEncoder(startX);
	QuadrangleZigZag::startY = Transform::mmToEncoder(startY);
	QuadrangleZigZag::stopX = Transform::mmToEncoder(stopX);
	QuadrangleZigZag::stopY = Transform::mmToEncoder(stopY);
	QuadrangleZigZag::samplingResolution = samplingResolution;
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <_ZN16QuadrangleZigZag10configure2Effffi+0xa4>)
 8006108:	9b06      	ldr	r3, [sp, #24]
	QuadrangleZigZag::samplingResolution = samplingResolution;
	start();
}

void QuadrangleZigZag::configure2(float startX, float startY, float stopX, float stopY, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(startX);
 800610a:	4e1f      	ldr	r6, [pc, #124]	; (8006188 <_ZN16QuadrangleZigZag10configure2Effffi+0xa8>)
	QuadrangleZigZag::startY = Transform::mmToEncoder(startY);
	QuadrangleZigZag::stopX = Transform::mmToEncoder(stopX);
	QuadrangleZigZag::stopY = Transform::mmToEncoder(stopY);
	QuadrangleZigZag::samplingResolution = samplingResolution;
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	eef0 5a67 	vmov.f32	s11, s15
 8006112:	ee45 5a07 	vmla.f32	s11, s10, s14
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <_ZN16QuadrangleZigZag10configure2Effffi+0xac>)
	start();
}

void QuadrangleZigZag::configure2(float startX, float startY, float stopX, float stopY, int samplingResolution){
	QuadrangleZigZag::startX = Transform::mmToEncoder(startX);
	QuadrangleZigZag::startY = Transform::mmToEncoder(startY);
 8006118:	4d1d      	ldr	r5, [pc, #116]	; (8006190 <_ZN16QuadrangleZigZag10configure2Effffi+0xb0>)
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <_ZN16QuadrangleZigZag10configure2Effffi+0xb4>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800611e:	4f1e      	ldr	r7, [pc, #120]	; (8006198 <_ZN16QuadrangleZigZag10configure2Effffi+0xb8>)
	Control<ALL>::resetVPid();
 8006120:	4c1e      	ldr	r4, [pc, #120]	; (800619c <_ZN16QuadrangleZigZag10configure2Effffi+0xbc>)
 8006122:	ee05 0a10 	vmov	s10, r0
 8006126:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800612a:	ee45 7a07 	vmla.f32	s15, s10, s14
 800612e:	edc3 6a00 	vstr	s13, [r3]
 8006132:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 8006136:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <_ZN16QuadrangleZigZag10configure2Effffi+0xc0>)
 8006138:	ed83 7a00 	vstr	s14, [r3]
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <_ZN16QuadrangleZigZag10configure2Effffi+0xc4>)
 800613e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006142:	eebd 6ac6 	vcvt.s32.f32	s12, s12
	Trigger::enable(false);
 8006146:	2000      	movs	r0, #0
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 8006148:	601a      	str	r2, [r3, #0]
	Trigger::enable(false);
 800614a:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <_ZN16QuadrangleZigZag10configure2Effffi+0xc8>)
 800614c:	edc6 7a00 	vstr	s15, [r6]
 8006150:	ed85 6a00 	vstr	s12, [r5]
 8006154:	4798      	blx	r3
	yDirection = 1;
 8006156:	4915      	ldr	r1, [pc, #84]	; (80061ac <_ZN16QuadrangleZigZag10configure2Effffi+0xcc>)
	xDirection = 1;
	yIsLongSide = (stopY - startY) > (stopX - startX);
 8006158:	6836      	ldr	r6, [r6, #0]
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
	Trigger::enable(false);
	yDirection = 1;
 800615a:	2201      	movs	r2, #1
 800615c:	600a      	str	r2, [r1, #0]
	xDirection = 1;
 800615e:	4914      	ldr	r1, [pc, #80]	; (80061b0 <_ZN16QuadrangleZigZag10configure2Effffi+0xd0>)
 8006160:	600a      	str	r2, [r1, #0]
	yIsLongSide = (stopY - startY) > (stopX - startX);
	yIsLongSide = false;
 8006162:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <_ZN16QuadrangleZigZag10configure2Effffi+0xd4>)
 8006164:	2300      	movs	r3, #0
 8006166:	7013      	strb	r3, [r2, #0]
	approachingX = yIsLongSide;
 8006168:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <_ZN16QuadrangleZigZag10configure2Effffi+0xd8>)
 800616a:	7013      	strb	r3, [r2, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800616c:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 800616e:	47a0      	blx	r4
	pos_shall = position;
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <_ZN16QuadrangleZigZag10configure2Effffi+0xdc>)
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
 8006172:	682d      	ldr	r5, [r5, #0]
 8006174:	601e      	str	r6, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006176:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 8006178:	47a0      	blx	r4
	pos_shall = position;
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <_ZN16QuadrangleZigZag10configure2Effffi+0xe0>)
 800617c:	601d      	str	r5, [r3, #0]
 800617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006180:	44fa0000 	.word	0x44fa0000
 8006184:	20001408 	.word	0x20001408
 8006188:	200013fc 	.word	0x200013fc
 800618c:	2000003c 	.word	0x2000003c
 8006190:	200013e8 	.word	0x200013e8
 8006194:	200013f8 	.word	0x200013f8
 8006198:	08000eb1 	.word	0x08000eb1
 800619c:	08000e95 	.word	0x08000e95
 80061a0:	20001404 	.word	0x20001404
 80061a4:	200013e0 	.word	0x200013e0
 80061a8:	080004a5 	.word	0x080004a5
 80061ac:	200013f4 	.word	0x200013f4
 80061b0:	2000140c 	.word	0x2000140c
 80061b4:	2000014c 	.word	0x2000014c
 80061b8:	200013e5 	.word	0x200013e5
 80061bc:	20000680 	.word	0x20000680
 80061c0:	20000674 	.word	0x20000674

080061c4 <_ZN16QuadrangleZigZag9configureEP5Pointi>:
	QuadrangleZigZag::samplingResolution = samplingResolution;
	start();
}

void QuadrangleZigZag::configure(Point points[4], int samplingResolution){
	QuadrangleZigZag::samplingResolution = samplingResolution;
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <_ZN16QuadrangleZigZag9configureEP5Pointi+0xa8>)
	QuadrangleZigZag::stopY = Transform::mmToEncoder(stopY);
	QuadrangleZigZag::samplingResolution = samplingResolution;
	start();
}

void QuadrangleZigZag::configure(Point points[4], int samplingResolution){
 80061c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	QuadrangleZigZag::samplingResolution = samplingResolution;
	startX = XSTAGE_LENGTH_ENCODER;
 80061ca:	4b29      	ldr	r3, [pc, #164]	; (8006270 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xac>)
 80061cc:	4f29      	ldr	r7, [pc, #164]	; (8006274 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xb0>)
	startY = YSTAGE_LENGTH_ENCODER;
 80061ce:	4e2a      	ldr	r6, [pc, #168]	; (8006278 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xb4>)
	stopX = 0;
 80061d0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80062a8 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xe4>
	stopY = 0;
 80061d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80062ac <_ZN16QuadrangleZigZag9configureEP5Pointi+0xe8>
	QuadrangleZigZag::samplingResolution = samplingResolution;
	start();
}

void QuadrangleZigZag::configure(Point points[4], int samplingResolution){
	QuadrangleZigZag::samplingResolution = samplingResolution;
 80061d8:	6011      	str	r1, [r2, #0]
	startX = XSTAGE_LENGTH_ENCODER;
	startY = YSTAGE_LENGTH_ENCODER;
	stopX = 0;
 80061da:	2200      	movs	r2, #0
	stopY = 0;
 80061dc:	461d      	mov	r5, r3
	start();
}

void QuadrangleZigZag::configure(Point points[4], int samplingResolution){
	QuadrangleZigZag::samplingResolution = samplingResolution;
	startX = XSTAGE_LENGTH_ENCODER;
 80061de:	603b      	str	r3, [r7, #0]
	startY = YSTAGE_LENGTH_ENCODER;
 80061e0:	6033      	str	r3, [r6, #0]
	stopX = 0;
	stopY = 0;
 80061e2:	469e      	mov	lr, r3
 80061e4:	4614      	mov	r4, r2

void QuadrangleZigZag::configure(Point points[4], int samplingResolution){
	QuadrangleZigZag::samplingResolution = samplingResolution;
	startX = XSTAGE_LENGTH_ENCODER;
	startY = YSTAGE_LENGTH_ENCODER;
	stopX = 0;
 80061e6:	f8c9 2000 	str.w	r2, [r9]
	stopY = 0;
 80061ea:	f8c8 2000 	str.w	r2, [r8]
 80061ee:	4694      	mov	ip, r2

	for(int i = 0; i < 4; i++){
 80061f0:	4613      	mov	r3, r2
		int x = points[i].x;
 80061f2:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 80061f6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
		int y = points[i].y;
 80061fa:	3301      	adds	r3, #1
 80061fc:	6852      	ldr	r2, [r2, #4]
		if(x < startX){
 80061fe:	458e      	cmp	lr, r1
			startX = x;
 8006200:	bfc8      	it	gt
 8006202:	6039      	strgt	r1, [r7, #0]
		}
		if(x > stopX){
 8006204:	4561      	cmp	r1, ip
			stopX = x;
 8006206:	bfc8      	it	gt
 8006208:	f8c9 1000 	strgt.w	r1, [r9]
		}
		if(y < startY){
 800620c:	42aa      	cmp	r2, r5
			startY = y;
 800620e:	bfb8      	it	lt
 8006210:	6032      	strlt	r2, [r6, #0]
		}
		if(y > stopY){
 8006212:	42a2      	cmp	r2, r4
			stopY = y;
 8006214:	bfc8      	it	gt
 8006216:	f8c8 2000 	strgt.w	r2, [r8]
	startX = XSTAGE_LENGTH_ENCODER;
	startY = YSTAGE_LENGTH_ENCODER;
	stopX = 0;
	stopY = 0;

	for(int i = 0; i < 4; i++){
 800621a:	2b04      	cmp	r3, #4
 800621c:	d007      	beq.n	800622e <_ZN16QuadrangleZigZag9configureEP5Pointi+0x6a>
 800621e:	f8d7 e000 	ldr.w	lr, [r7]
 8006222:	f8d9 c000 	ldr.w	ip, [r9]
 8006226:	6835      	ldr	r5, [r6, #0]
 8006228:	f8d8 4000 	ldr.w	r4, [r8]
 800622c:	e7e1      	b.n	80061f2 <_ZN16QuadrangleZigZag9configureEP5Pointi+0x2e>
	}
	//sit back and let control do its job
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <_ZN16QuadrangleZigZag9configureEP5Pointi+0xb8>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006230:	4d13      	ldr	r5, [pc, #76]	; (8006280 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xbc>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xc0>)
	Control<ALL>::resetVPid();
 8006236:	4c14      	ldr	r4, [pc, #80]	; (8006288 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xc4>)
 8006238:	601a      	str	r2, [r3, #0]
	Trigger::enable(false);
 800623a:	2000      	movs	r0, #0
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <_ZN16QuadrangleZigZag9configureEP5Pointi+0xc8>)
 800623e:	4798      	blx	r3
	yDirection = 1;
 8006240:	4913      	ldr	r1, [pc, #76]	; (8006290 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xcc>)
	xDirection = 1;
	yIsLongSide = (stopY - startY) > (stopX - startX);
 8006242:	683f      	ldr	r7, [r7, #0]
}

void QuadrangleZigZag::start(){
	maxSpeed = Control<ALL>::getMaxSpeed();
	Trigger::enable(false);
	yDirection = 1;
 8006244:	2201      	movs	r2, #1
 8006246:	600a      	str	r2, [r1, #0]
	xDirection = 1;
 8006248:	4912      	ldr	r1, [pc, #72]	; (8006294 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xd0>)
 800624a:	600a      	str	r2, [r1, #0]
	yIsLongSide = (stopY - startY) > (stopX - startX);
	yIsLongSide = false;
 800624c:	4a12      	ldr	r2, [pc, #72]	; (8006298 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xd4>)
 800624e:	2300      	movs	r3, #0
 8006250:	7013      	strb	r3, [r2, #0]
	approachingX = yIsLongSide;
 8006252:	4a12      	ldr	r2, [pc, #72]	; (800629c <_ZN16QuadrangleZigZag9configureEP5Pointi+0xd8>)
 8006254:	7013      	strb	r3, [r2, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006256:	47a8      	blx	r5
	Control<ALL>::resetVPid();
 8006258:	47a0      	blx	r4
	pos_shall = position;
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xdc>)
	Control<X>::setShallPosition(startX);
	Control<Y>::setShallPosition(startY);
 800625c:	6836      	ldr	r6, [r6, #0]
 800625e:	601f      	str	r7, [r3, #0]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006260:	47a8      	blx	r5
	Control<ALL>::resetVPid();
 8006262:	47a0      	blx	r4
	pos_shall = position;
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <_ZN16QuadrangleZigZag9configureEP5Pointi+0xe0>)
 8006266:	601e      	str	r6, [r3, #0]
 8006268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626c:	20001408 	.word	0x20001408
 8006270:	00030d40 	.word	0x00030d40
 8006274:	200013fc 	.word	0x200013fc
 8006278:	200013e8 	.word	0x200013e8
 800627c:	2000003c 	.word	0x2000003c
 8006280:	08000eb1 	.word	0x08000eb1
 8006284:	200013e0 	.word	0x200013e0
 8006288:	08000e95 	.word	0x08000e95
 800628c:	080004a5 	.word	0x080004a5
 8006290:	200013f4 	.word	0x200013f4
 8006294:	2000140c 	.word	0x2000140c
 8006298:	2000014c 	.word	0x2000014c
 800629c:	200013e5 	.word	0x200013e5
 80062a0:	20000680 	.word	0x20000680
 80062a4:	20000674 	.word	0x20000674
 80062a8:	200013f8 	.word	0x200013f8
 80062ac:	20001404 	.word	0x20001404

080062b0 <_GLOBAL__sub_I__ZN16QuadrangleZigZag6startXE>:
		typedef uint_fast16_t Type;
		
	public:
		///\param time in ms
		Timestamp(const uint_fast16_t time = 0) : 
			time(time)
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <_GLOBAL__sub_I__ZN16QuadrangleZigZag6startXE+0xc>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
	#error	"Don't include this file directly, use 'timeout.hpp' instead!"
#endif

template<typename T>
xpcc::Timeout<T>::Timeout() :
	endTime(0), state(EXPIRED)
 80062b6:	2202      	movs	r2, #2
 80062b8:	711a      	strb	r2, [r3, #4]
 80062ba:	4770      	bx	lr
 80062bc:	200013ec 	.word	0x200013ec

080062c0 <_ZN10Quadrangle9configureEffff>:
 80062c0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006418 <_ZN10Quadrangle9configureEffff+0x158>
 80062c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80062c8:	ee05 0a10 	vmov	s10, r0
 80062cc:	ee06 1a90 	vmov	s13, r1
 80062d0:	eef0 5a67 	vmov.f32	s11, s15
 80062d4:	ee45 5a07 	vmla.f32	s11, s10, s14
 80062d8:	eeb0 6a67 	vmov.f32	s12, s15
 80062dc:	ee05 2a10 	vmov	s10, r2
 80062e0:	ee06 6a87 	vmla.f32	s12, s13, s14
 80062e4:	eef0 6a67 	vmov.f32	s13, s15
 80062e8:	ee45 6a07 	vmla.f32	s13, s10, s14
 80062ec:	ee05 3a10 	vmov	s10, r3
 80062f0:	ee45 7a07 	vmla.f32	s15, s10, s14
 80062f4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 80062f8:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80062fc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8006300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return abs(Control<X>::getIsPosition() - points[pointsIndex].x) < 30 &&
			abs(Control<Y>::getIsPosition() - points[pointsIndex].y) < 30;
}


void Quadrangle::configure(float x, float y, float width, float height){
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	ee16 3a10 	vmov	r3, s12
 800630c:	ee15 5a90 	vmov	r5, s11
 8006310:	ee16 7a90 	vmov	r7, s13
 8006314:	ee17 0a90 	vmov	r0, s15
	Quadrangle::x = Transform::mmToEncoder(x);
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <_ZN10Quadrangle9configureEffff+0x15c>)
	Quadrangle::y = Transform::mmToEncoder(y);
 800631a:	f8df e134 	ldr.w	lr, [pc, #308]	; 8006450 <_ZN10Quadrangle9configureEffff+0x190>
	 * |     |
	 * |     |
	 * 1-----4
	 */

	points[0].x = Quadrangle::x;
 800631e:	4c40      	ldr	r4, [pc, #256]	; (8006420 <_ZN10Quadrangle9configureEffff+0x160>)
 8006320:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006454 <_ZN10Quadrangle9configureEffff+0x194>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006324:	4e3f      	ldr	r6, [pc, #252]	; (8006424 <_ZN10Quadrangle9configureEffff+0x164>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006326:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006458 <_ZN10Quadrangle9configureEffff+0x198>
	Control<ALL>::resetVPid();
 800632a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800645c <_ZN10Quadrangle9configureEffff+0x19c>
	points[0].y = Quadrangle::y;

	points[1].x = points[0].x;
	points[1].y = points[0].y + Quadrangle::height;
 800632e:	1819      	adds	r1, r3, r0
}


void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
	Quadrangle::y = Transform::mmToEncoder(y);
 8006330:	ed8e 6a00 	vstr	s12, [lr]
	points[3].x = points[2].x;
	points[3].y = points[0].y;

	points[4].x = points[0].x;
	points[4].y = points[0].y;
	pointsIndex = 0;
 8006334:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <_ZN10Quadrangle9configureEffff+0x168>)


void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
	Quadrangle::y = Transform::mmToEncoder(y);
	Quadrangle::width = Transform::mmToEncoder(width);
 8006336:	f8df e128 	ldr.w	lr, [pc, #296]	; 8006460 <_ZN10Quadrangle9configureEffff+0x1a0>

	points[0].x = Quadrangle::x;
	points[0].y = Quadrangle::y;

	points[1].x = points[0].x;
	points[1].y = points[0].y + Quadrangle::height;
 800633a:	60e1      	str	r1, [r4, #12]
			abs(Control<Y>::getIsPosition() - points[pointsIndex].y) < 30;
}


void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
 800633c:	edc2 5a00 	vstr	s11, [r2]
	points[0].y = Quadrangle::y;

	points[1].x = points[0].x;
	points[1].y = points[0].y + Quadrangle::height;

	points[2].x = points[1].x + Quadrangle::width;
 8006340:	19ea      	adds	r2, r5, r7

void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
	Quadrangle::y = Transform::mmToEncoder(y);
	Quadrangle::width = Transform::mmToEncoder(width);
	Quadrangle::height = Transform::mmToEncoder(height);
 8006342:	4f3a      	ldr	r7, [pc, #232]	; (800642c <_ZN10Quadrangle9configureEffff+0x16c>)

	points[1].x = points[0].x;
	points[1].y = points[0].y + Quadrangle::height;

	points[2].x = points[1].x + Quadrangle::width;
	points[2].y = points[1].y;
 8006344:	6161      	str	r1, [r4, #20]
	 * |     |
	 * |     |
	 * 1-----4
	 */

	points[0].x = Quadrangle::x;
 8006346:	edc4 5a00 	vstr	s11, [r4]
	points[0].y = Quadrangle::y;
 800634a:	ed84 6a01 	vstr	s12, [r4, #4]

	points[1].x = points[0].x;
 800634e:	edc4 5a02 	vstr	s11, [r4, #8]

	points[2].x = points[1].x + Quadrangle::width;
	points[2].y = points[1].y;

	points[3].x = points[2].x;
	points[3].y = points[0].y;
 8006352:	ed84 6a07 	vstr	s12, [r4, #28]

	points[4].x = points[0].x;
 8006356:	edc4 5a08 	vstr	s11, [r4, #32]
	points[4].y = points[0].y;
 800635a:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
	points[0].y = Quadrangle::y;

	points[1].x = points[0].x;
	points[1].y = points[0].y + Quadrangle::height;

	points[2].x = points[1].x + Quadrangle::width;
 800635e:	6122      	str	r2, [r4, #16]
	points[2].y = points[1].y;

	points[3].x = points[2].x;
 8006360:	61a2      	str	r2, [r4, #24]
	points[3].y = points[0].y;

	points[4].x = points[0].x;
	points[4].y = points[0].y;
	pointsIndex = 0;
 8006362:	2200      	movs	r2, #0

void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
	Quadrangle::y = Transform::mmToEncoder(y);
	Quadrangle::width = Transform::mmToEncoder(width);
	Quadrangle::height = Transform::mmToEncoder(height);
 8006364:	edc7 7a00 	vstr	s15, [r7]
	points[3].x = points[2].x;
	points[3].y = points[0].y;

	points[4].x = points[0].x;
	points[4].y = points[0].y;
	pointsIndex = 0;
 8006368:	601a      	str	r2, [r3, #0]


void Quadrangle::configure(float x, float y, float width, float height){
	Quadrangle::x = Transform::mmToEncoder(x);
	Quadrangle::y = Transform::mmToEncoder(y);
	Quadrangle::width = Transform::mmToEncoder(width);
 800636a:	edce 6a00 	vstr	s13, [lr]
	pos_shall = position;
 800636e:	4f30      	ldr	r7, [pc, #192]	; (8006430 <_ZN10Quadrangle9configureEffff+0x170>)
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 8006370:	47d0      	blx	sl
	Control<ALL>::resetVPid();
 8006372:	47c8      	blx	r9
	points[4].x = points[0].x;
	points[4].y = points[0].y;
	pointsIndex = 0;

	Control<X>::setShallPosition(points[0].x);
	Control<Y>::setShallPosition(points[0].y);
 8006374:	6864      	ldr	r4, [r4, #4]
	pos_shall = position;
 8006376:	f8c8 5000 	str.w	r5, [r8]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 800637a:	47d0      	blx	sl
	Control<ALL>::resetVPid();
 800637c:	47c8      	blx	r9
 800637e:	6873      	ldr	r3, [r6, #4]
	pos_shall = position;
 8006380:	603c      	str	r4, [r7, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02f      	beq.n	80063e6 <_ZN10Quadrangle9configureEffff+0x126>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006386:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006388:	4630      	mov	r0, r6
 800638a:	492a      	ldr	r1, [pc, #168]	; (8006434 <_ZN10Quadrangle9configureEffff+0x174>)
 800638c:	bf0c      	ite	eq
 800638e:	4b2a      	ldreq	r3, [pc, #168]	; (8006438 <_ZN10Quadrangle9configureEffff+0x178>)
			}
			else {
				this->writeHex(s);
 8006390:	4b2a      	ldrne	r3, [pc, #168]	; (800643c <_ZN10Quadrangle9configureEffff+0x17c>)
 8006392:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8006394:	4d23      	ldr	r5, [pc, #140]	; (8006424 <_ZN10Quadrangle9configureEffff+0x164>)
 8006396:	f8d8 1000 	ldr.w	r1, [r8]
 800639a:	4c29      	ldr	r4, [pc, #164]	; (8006440 <_ZN10Quadrangle9configureEffff+0x180>)
 800639c:	4628      	mov	r0, r5
 800639e:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80063a0:	6873      	ldr	r3, [r6, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d032      	beq.n	800640c <_ZN10Quadrangle9configureEffff+0x14c>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80063a6:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80063a8:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80063aa:	4628      	mov	r0, r5
 80063ac:	bf0c      	ite	eq
 80063ae:	4b25      	ldreq	r3, [pc, #148]	; (8006444 <_ZN10Quadrangle9configureEffff+0x184>)
			}
			else {
				this->writeHex(v);
 80063b0:	4b25      	ldrne	r3, [pc, #148]	; (8006448 <_ZN10Quadrangle9configureEffff+0x188>)
 80063b2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80063b4:	6873      	ldr	r3, [r6, #4]
 80063b6:	481b      	ldr	r0, [pc, #108]	; (8006424 <_ZN10Quadrangle9configureEffff+0x164>)
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d021      	beq.n	8006400 <_ZN10Quadrangle9configureEffff+0x140>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80063bc:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80063be:	4923      	ldr	r1, [pc, #140]	; (800644c <_ZN10Quadrangle9configureEffff+0x18c>)
 80063c0:	bf0c      	ite	eq
 80063c2:	4b1d      	ldreq	r3, [pc, #116]	; (8006438 <_ZN10Quadrangle9configureEffff+0x178>)
			}
			else {
				this->writeHex(s);
 80063c4:	4b1d      	ldrne	r3, [pc, #116]	; (800643c <_ZN10Quadrangle9configureEffff+0x17c>)
 80063c6:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 80063c8:	4d16      	ldr	r5, [pc, #88]	; (8006424 <_ZN10Quadrangle9configureEffff+0x164>)
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	4628      	mov	r0, r5
 80063ce:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80063d0:	6873      	ldr	r3, [r6, #4]
 80063d2:	b173      	cbz	r3, 80063f2 <_ZN10Quadrangle9configureEffff+0x132>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80063d4:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80063d6:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80063d8:	4628      	mov	r0, r5
 80063da:	bf0c      	ite	eq
 80063dc:	4b19      	ldreq	r3, [pc, #100]	; (8006444 <_ZN10Quadrangle9configureEffff+0x184>)
			}
			else {
				this->writeHex(v);
 80063de:	4b1a      	ldrne	r3, [pc, #104]	; (8006448 <_ZN10Quadrangle9configureEffff+0x188>)
 80063e0:	4798      	blx	r3
 80063e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80063e6:	6830      	ldr	r0, [r6, #0]
 80063e8:	4912      	ldr	r1, [pc, #72]	; (8006434 <_ZN10Quadrangle9configureEffff+0x174>)
 80063ea:	6803      	ldr	r3, [r0, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4798      	blx	r3
 80063f0:	e7d0      	b.n	8006394 <_ZN10Quadrangle9configureEffff+0xd4>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80063f2:	6828      	ldr	r0, [r5, #0]
 80063f4:	6803      	ldr	r3, [r0, #0]
 80063f6:	210a      	movs	r1, #10
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4798      	blx	r3
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006400:	6800      	ldr	r0, [r0, #0]
 8006402:	4912      	ldr	r1, [pc, #72]	; (800644c <_ZN10Quadrangle9configureEffff+0x18c>)
 8006404:	6803      	ldr	r3, [r0, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4798      	blx	r3
 800640a:	e7dd      	b.n	80063c8 <_ZN10Quadrangle9configureEffff+0x108>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800640c:	6828      	ldr	r0, [r5, #0]
 800640e:	6803      	ldr	r3, [r0, #0]
 8006410:	210a      	movs	r1, #10
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4798      	blx	r3
 8006416:	e7cd      	b.n	80063b4 <_ZN10Quadrangle9configureEffff+0xf4>
 8006418:	44fa0000 	.word	0x44fa0000
 800641c:	20001438 	.word	0x20001438
 8006420:	20001410 	.word	0x20001410
 8006424:	200013bc 	.word	0x200013bc
 8006428:	2000143c 	.word	0x2000143c
 800642c:	20001448 	.word	0x20001448
 8006430:	20000674 	.word	0x20000674
 8006434:	0800987c 	.word	0x0800987c
 8006438:	080079ed 	.word	0x080079ed
 800643c:	080079a9 	.word	0x080079a9
 8006440:	080078f9 	.word	0x080078f9
 8006444:	08007af5 	.word	0x08007af5
 8006448:	08007ac1 	.word	0x08007ac1
 800644c:	0800988c 	.word	0x0800988c
 8006450:	20001440 	.word	0x20001440
 8006454:	20000680 	.word	0x20000680
 8006458:	08000eb1 	.word	0x08000eb1
 800645c:	08000e95 	.word	0x08000e95
 8006460:	20001444 	.word	0x20001444

08006464 <_ZN10Quadrangle6sampleEv>:
	dout << "first point x " << Control<X>::getShallPosition() << endl;
	dout << "first point y " << Control<Y>::getShallPosition() << endl;
}

void Quadrangle::sample(){
 8006464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static Point points[5];
static int pointsIndex = 0;

static bool reachedPoint(){
	return abs(Control<X>::getIsPosition() - points[pointsIndex].x) < 30 &&
 8006468:	4d3d      	ldr	r5, [pc, #244]	; (8006560 <_ZN10Quadrangle6sampleEv+0xfc>)
 800646a:	4b3e      	ldr	r3, [pc, #248]	; (8006564 <_ZN10Quadrangle6sampleEv+0x100>)
 800646c:	4c3e      	ldr	r4, [pc, #248]	; (8006568 <_ZN10Quadrangle6sampleEv+0x104>)
 800646e:	4798      	blx	r3
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 8006476:	1ac0      	subs	r0, r0, r3
 8006478:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800647c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
			abs(Control<Y>::getIsPosition() - points[pointsIndex].y) < 30;
 8006480:	2b1d      	cmp	r3, #29
 8006482:	dd01      	ble.n	8006488 <_ZN10Quadrangle6sampleEv+0x24>
 8006484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006488:	4b38      	ldr	r3, [pc, #224]	; (800656c <_ZN10Quadrangle6sampleEv+0x108>)
 800648a:	4798      	blx	r3
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8006492:	6852      	ldr	r2, [r2, #4]
 8006494:	1a80      	subs	r0, r0, r2
 8006496:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800649a:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800649e:	2a1d      	cmp	r2, #29
 80064a0:	dcf0      	bgt.n	8006484 <_ZN10Quadrangle6sampleEv+0x20>
	dout << "first point y " << Control<Y>::getShallPosition() << endl;
}

void Quadrangle::sample(){
	if(reachedPoint()){
		pointsIndex++;
 80064a2:	3301      	adds	r3, #1
		if(pointsIndex > 4){
 80064a4:	2b04      	cmp	r3, #4
	dout << "first point y " << Control<Y>::getShallPosition() << endl;
}

void Quadrangle::sample(){
	if(reachedPoint()){
		pointsIndex++;
 80064a6:	602b      	str	r3, [r5, #0]
		if(pointsIndex > 4){
 80064a8:	dc12      	bgt.n	80064d0 <_ZN10Quadrangle6sampleEv+0x6c>
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 80064aa:	4f31      	ldr	r7, [pc, #196]	; (8006570 <_ZN10Quadrangle6sampleEv+0x10c>)
	Control<ALL>::resetVPid();
 80064ac:	4e31      	ldr	r6, [pc, #196]	; (8006574 <_ZN10Quadrangle6sampleEv+0x110>)
			Pattern::done();
			dout << "rectangle pattern is done " << endl;
			return;
		}
		Control<X>::setShallPosition(points[pointsIndex].x);
 80064ae:	f854 8033 	ldr.w	r8, [r4, r3, lsl #3]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 80064b2:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 80064b4:	47b0      	blx	r6
		Control<Y>::setShallPosition(points[pointsIndex].y);
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	pos_shall = position;
 80064bc:	4b2e      	ldr	r3, [pc, #184]	; (8006578 <_ZN10Quadrangle6sampleEv+0x114>)
 80064be:	6864      	ldr	r4, [r4, #4]
 80064c0:	f8c3 8000 	str.w	r8, [r3]
	}
}

template<Axis axis>
void Control<axis>::setShallPosition(int position){
	Control<ALL>::resetPosPid();
 80064c4:	47b8      	blx	r7
	Control<ALL>::resetVPid();
 80064c6:	47b0      	blx	r6
	pos_shall = position;
 80064c8:	4b2c      	ldr	r3, [pc, #176]	; (800657c <_ZN10Quadrangle6sampleEv+0x118>)
 80064ca:	601c      	str	r4, [r3, #0]
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			start();
		}*/
		paused = false;
	}
	static void done(){
		running = 0;
 80064d0:	4b2b      	ldr	r3, [pc, #172]	; (8006580 <_ZN10Quadrangle6sampleEv+0x11c>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80064d2:	4c2c      	ldr	r4, [pc, #176]	; (8006584 <_ZN10Quadrangle6sampleEv+0x120>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
		State::set(State::READY);
 80064d8:	2001      	movs	r0, #1
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <_ZN10Quadrangle6sampleEv+0x124>)
 80064dc:	4798      	blx	r3
 80064de:	6863      	ldr	r3, [r4, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d024      	beq.n	800652e <_ZN10Quadrangle6sampleEv+0xca>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80064e4:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80064e6:	4620      	mov	r0, r4
 80064e8:	4928      	ldr	r1, [pc, #160]	; (800658c <_ZN10Quadrangle6sampleEv+0x128>)
 80064ea:	bf0c      	ite	eq
 80064ec:	4b28      	ldreq	r3, [pc, #160]	; (8006590 <_ZN10Quadrangle6sampleEv+0x12c>)
			}
			else {
				this->writeHex(s);
 80064ee:	4b29      	ldrne	r3, [pc, #164]	; (8006594 <_ZN10Quadrangle6sampleEv+0x130>)
 80064f0:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	4823      	ldr	r0, [pc, #140]	; (8006584 <_ZN10Quadrangle6sampleEv+0x120>)
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d02c      	beq.n	8006554 <_ZN10Quadrangle6sampleEv+0xf0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80064fa:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80064fc:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80064fe:	bf0c      	ite	eq
 8006500:	4b25      	ldreq	r3, [pc, #148]	; (8006598 <_ZN10Quadrangle6sampleEv+0x134>)
			}
			else {
				this->writeHex(v);
 8006502:	4b26      	ldrne	r3, [pc, #152]	; (800659c <_ZN10Quadrangle6sampleEv+0x138>)
 8006504:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	481e      	ldr	r0, [pc, #120]	; (8006584 <_ZN10Quadrangle6sampleEv+0x120>)
 800650a:	b1eb      	cbz	r3, 8006548 <_ZN10Quadrangle6sampleEv+0xe4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800650c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 800650e:	4924      	ldr	r1, [pc, #144]	; (80065a0 <_ZN10Quadrangle6sampleEv+0x13c>)
 8006510:	bf0c      	ite	eq
 8006512:	4b1f      	ldreq	r3, [pc, #124]	; (8006590 <_ZN10Quadrangle6sampleEv+0x12c>)
			}
			else {
				this->writeHex(s);
 8006514:	4b1f      	ldrne	r3, [pc, #124]	; (8006594 <_ZN10Quadrangle6sampleEv+0x130>)
 8006516:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	481a      	ldr	r0, [pc, #104]	; (8006584 <_ZN10Quadrangle6sampleEv+0x120>)
 800651c:	b16b      	cbz	r3, 800653a <_ZN10Quadrangle6sampleEv+0xd6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800651e:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006520:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006522:	bf0c      	ite	eq
 8006524:	4b1c      	ldreq	r3, [pc, #112]	; (8006598 <_ZN10Quadrangle6sampleEv+0x134>)
			}
			else {
				this->writeHex(v);
 8006526:	4b1d      	ldrne	r3, [pc, #116]	; (800659c <_ZN10Quadrangle6sampleEv+0x138>)
 8006528:	4798      	blx	r3
 800652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	4916      	ldr	r1, [pc, #88]	; (800658c <_ZN10Quadrangle6sampleEv+0x128>)
 8006532:	6803      	ldr	r3, [r0, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	4798      	blx	r3
 8006538:	e7db      	b.n	80064f2 <_ZN10Quadrangle6sampleEv+0x8e>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	6803      	ldr	r3, [r0, #0]
 800653e:	210a      	movs	r1, #10
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	4798      	blx	r3
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006548:	6800      	ldr	r0, [r0, #0]
 800654a:	4915      	ldr	r1, [pc, #84]	; (80065a0 <_ZN10Quadrangle6sampleEv+0x13c>)
 800654c:	6803      	ldr	r3, [r0, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4798      	blx	r3
 8006552:	e7e1      	b.n	8006518 <_ZN10Quadrangle6sampleEv+0xb4>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8006554:	6800      	ldr	r0, [r0, #0]
 8006556:	6803      	ldr	r3, [r0, #0]
 8006558:	210a      	movs	r1, #10
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	4798      	blx	r3
 800655e:	e7d2      	b.n	8006506 <_ZN10Quadrangle6sampleEv+0xa2>
 8006560:	2000143c 	.word	0x2000143c
 8006564:	08000e89 	.word	0x08000e89
 8006568:	20001410 	.word	0x20001410
 800656c:	08000e81 	.word	0x08000e81
 8006570:	08000eb1 	.word	0x08000eb1
 8006574:	08000e95 	.word	0x08000e95
 8006578:	20000680 	.word	0x20000680
 800657c:	20000674 	.word	0x20000674
 8006580:	200008d0 	.word	0x200008d0
 8006584:	200013bc 	.word	0x200013bc
 8006588:	080067d5 	.word	0x080067d5
 800658c:	0800928c 	.word	0x0800928c
 8006590:	080079ed 	.word	0x080079ed
 8006594:	080079a9 	.word	0x080079a9
 8006598:	08007af5 	.word	0x08007af5
 800659c:	08007ac1 	.word	0x08007ac1
 80065a0:	0800989c 	.word	0x0800989c

080065a4 <_ZN5State4initEv>:
	ledBlue::set(false);
	ledOrange::set(false);
	ledGreen::set(false);
}

void State::init(){
 80065a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 80065a8:	4c6f      	ldr	r4, [pc, #444]	; (8006768 <_ZN5State4initEv+0x1c4>)
			enableInterruptVector(Interrupt interrupt, bool enable, uint32_t priority);
			
			static inline void
			enableInterrupt(Interrupt interrupt)
			{
				TIM1->DIER |= interrupt;
 80065aa:	4f70      	ldr	r7, [pc, #448]	; (800676c <_ZN5State4initEv+0x1c8>)
 80065ac:	6823      	ldr	r3, [r4, #0]
			enableInterruptVector(bool enable, uint32_t priority);
			
			static inline void
			enableInterrupt(Interrupt interrupt)
			{
				TIM6->DIER |= interrupt;
 80065ae:	4e70      	ldr	r6, [pc, #448]	; (8006770 <_ZN5State4initEv+0x1cc>)
			enableInterruptVector(bool enable, uint32_t priority);
			
			static inline void
			enableInterrupt(Interrupt interrupt)
			{
				TIM7->DIER |= interrupt;
 80065b0:	4d70      	ldr	r5, [pc, #448]	; (8006774 <_ZN5State4initEv+0x1d0>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80065b2:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80067c0 <_ZN5State4initEv+0x21c>
 80065b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80065ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c6:	6063      	str	r3, [r4, #4]
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	60a3      	str	r3, [r4, #8]
 80065d4:	68e3      	ldr	r3, [r4, #12]
 80065d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80065da:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(ledBlue, D, 15);
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80065e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80065f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065fa:	60a3      	str	r3, [r4, #8]
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006602:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(ledOrange, D, 13);
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800660a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	68a3      	ldr	r3, [r4, #8]
 800661a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800661e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006622:	60a3      	str	r3, [r4, #8]
 8006624:	68e3      	ldr	r3, [r4, #12]
 8006626:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800662a:	60e3      	str	r3, [r4, #12]
GPIO__OUTPUT(ledGreen, D, 12);
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800663e:	6063      	str	r3, [r4, #4]
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006652:	60e3      	str	r3, [r4, #12]
	ledOrange::setOutput(xpcc::stm32::PUSH_PULL);
	ledGreen::setOutput(xpcc::stm32::PUSH_PULL);

	//configure timers:
	//timer1 -> red led -> errors
	Timer1::enable();
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <_ZN5State4initEv+0x1d4>)
 8006656:	4798      	blx	r3
	Timer1::setMode(Timer3::UP_COUNTER);
 8006658:	2000      	movs	r0, #0
 800665a:	f8df c174 	ldr.w	ip, [pc, #372]	; 80067d0 <_ZN5State4initEv+0x22c>
 800665e:	4603      	mov	r3, r0
 8006660:	4601      	mov	r1, r0
 8006662:	4602      	mov	r2, r0
 8006664:	47e0      	blx	ip
	Timer1::enableInterruptVector(GeneralPurposeTimer::Interrupt::INTERRUPT_UPDATE, true, 15);
 8006666:	2001      	movs	r0, #1
 8006668:	220f      	movs	r2, #15
 800666a:	4601      	mov	r1, r0
 800666c:	4b43      	ldr	r3, [pc, #268]	; (800677c <_ZN5State4initEv+0x1d8>)
 800666e:	4798      	blx	r3
 8006670:	89bb      	ldrh	r3, [r7, #12]
	Timer1::enableInterrupt(Timer1::INTERRUPT_UPDATE);
	Timer1::setPeriod(300000);	// 300 ms
 8006672:	4843      	ldr	r0, [pc, #268]	; (8006780 <_ZN5State4initEv+0x1dc>)
 8006674:	2101      	movs	r1, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	430b      	orrs	r3, r1
 800667a:	81bb      	strh	r3, [r7, #12]
 800667c:	4b41      	ldr	r3, [pc, #260]	; (8006784 <_ZN5State4initEv+0x1e0>)
 800667e:	4798      	blx	r3

	//timer6 -> blue led -> executing rectangle scan
	Timer6::enable();
 8006680:	4b41      	ldr	r3, [pc, #260]	; (8006788 <_ZN5State4initEv+0x1e4>)
 8006682:	4798      	blx	r3
	Timer6::setMode(Timer6::UP_COUNTER);
 8006684:	2000      	movs	r0, #0
 8006686:	4b41      	ldr	r3, [pc, #260]	; (800678c <_ZN5State4initEv+0x1e8>)
 8006688:	4798      	blx	r3
	Timer6::enableInterruptVector(true, 15);
 800668a:	2001      	movs	r0, #1
 800668c:	210f      	movs	r1, #15
 800668e:	4b40      	ldr	r3, [pc, #256]	; (8006790 <_ZN5State4initEv+0x1ec>)
 8006690:	4798      	blx	r3
 8006692:	89b3      	ldrh	r3, [r6, #12]
	Timer6::enableInterrupt(Timer6::INTERRUPT_UPDATE);
	Timer6::setPeriod(1000000);	// 1000 ms
 8006694:	483f      	ldr	r0, [pc, #252]	; (8006794 <_ZN5State4initEv+0x1f0>)
 8006696:	2101      	movs	r1, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	430b      	orrs	r3, r1
 800669c:	81b3      	strh	r3, [r6, #12]
 800669e:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <_ZN5State4initEv+0x1f4>)
 80066a0:	4798      	blx	r3

	//timer7 -> orange led -> velocity controlled
	Timer7::enable();
 80066a2:	4b3e      	ldr	r3, [pc, #248]	; (800679c <_ZN5State4initEv+0x1f8>)
 80066a4:	4798      	blx	r3
	Timer7::setMode(Timer7::UP_COUNTER);
 80066a6:	2000      	movs	r0, #0
 80066a8:	4b3d      	ldr	r3, [pc, #244]	; (80067a0 <_ZN5State4initEv+0x1fc>)
 80066aa:	4798      	blx	r3
	Timer7::enableInterruptVector(true, 15);
 80066ac:	2001      	movs	r0, #1
 80066ae:	210f      	movs	r1, #15
 80066b0:	4b3c      	ldr	r3, [pc, #240]	; (80067a4 <_ZN5State4initEv+0x200>)
 80066b2:	4798      	blx	r3
 80066b4:	89ab      	ldrh	r3, [r5, #12]
	Timer7::enableInterrupt(Timer7::INTERRUPT_UPDATE);
	Timer7::setPeriod(200000);	// 700 ms
 80066b6:	483c      	ldr	r0, [pc, #240]	; (80067a8 <_ZN5State4initEv+0x204>)
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	2101      	movs	r1, #1
 80066c0:	81ab      	strh	r3, [r5, #12]
 80066c2:	4b3a      	ldr	r3, [pc, #232]	; (80067ac <_ZN5State4initEv+0x208>)
 80066c4:	4798      	blx	r3
			disable();
			
			static inline void
			pause()
			{
				TIM1->CR1 &= ~TIM_CR1_CEN;
 80066c6:	883b      	ldrh	r3, [r7, #0]
 80066c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	803b      	strh	r3, [r7, #0]
			disable();
			
			static inline void
			pause()
			{
				TIM6->CR1 &= ~TIM_CR1_CEN;
 80066d6:	8833      	ldrh	r3, [r6, #0]
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	8033      	strh	r3, [r6, #0]
			disable();
			
			static inline void
			pause()
			{
				TIM7->CR1 &= ~TIM_CR1_CEN;
 80066e2:	882b      	ldrh	r3, [r5, #0]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	802b      	strh	r3, [r5, #0]

	State::set(State::INITIALIZING);
}

void State::set(int newState){
	currentState = newState;
 80066ee:	4b30      	ldr	r3, [pc, #192]	; (80067b0 <_ZN5State4initEv+0x20c>)
 80066f0:	2100      	movs	r1, #0
 80066f2:	6019      	str	r1, [r3, #0]

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 80066f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066f8:	8363      	strh	r3, [r4, #26]
GPIO__OUTPUT(ledBlue, D, 15);
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	8363      	strh	r3, [r4, #26]
GPIO__OUTPUT(ledOrange, D, 13);
 8006700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006704:	8363      	strh	r3, [r4, #26]
GPIO__OUTPUT(ledGreen, D, 12);
 8006706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670a:	8363      	strh	r3, [r4, #26]
 800670c:	b1f2      	cbz	r2, 800674c <_ZN5State4initEv+0x1a8>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 800670e:	2a02      	cmp	r2, #2
				this->writeBin(s);
 8006710:	4640      	mov	r0, r8
 8006712:	4928      	ldr	r1, [pc, #160]	; (80067b4 <_ZN5State4initEv+0x210>)
 8006714:	bf0c      	ite	eq
 8006716:	4b28      	ldreq	r3, [pc, #160]	; (80067b8 <_ZN5State4initEv+0x214>)
			}
			else {
				this->writeHex(s);
 8006718:	4b28      	ldrne	r3, [pc, #160]	; (80067bc <_ZN5State4initEv+0x218>)
 800671a:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 800671c:	4c28      	ldr	r4, [pc, #160]	; (80067c0 <_ZN5State4initEv+0x21c>)
 800671e:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <_ZN5State4initEv+0x220>)
 8006720:	4620      	mov	r0, r4
 8006722:	2100      	movs	r1, #0
 8006724:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006726:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800672a:	b1b3      	cbz	r3, 800675a <_ZN5State4initEv+0x1b6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 800672c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 800672e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006730:	4620      	mov	r0, r4
 8006732:	bf0c      	ite	eq
 8006734:	4b24      	ldreq	r3, [pc, #144]	; (80067c8 <_ZN5State4initEv+0x224>)
			}
			else {
				this->writeHex(v);
 8006736:	4b25      	ldrne	r3, [pc, #148]	; (80067cc <_ZN5State4initEv+0x228>)
 8006738:	4798      	blx	r3

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <_ZN5State4initEv+0x1c4>)
 800673c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006740:	831a      	strh	r2, [r3, #24]

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 8006742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006746:	831a      	strh	r2, [r3, #24]
 8006748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 800674c:	f8d8 0000 	ldr.w	r0, [r8]
 8006750:	4918      	ldr	r1, [pc, #96]	; (80067b4 <_ZN5State4initEv+0x210>)
 8006752:	6803      	ldr	r3, [r0, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	4798      	blx	r3
 8006758:	e7e0      	b.n	800671c <_ZN5State4initEv+0x178>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	6803      	ldr	r3, [r0, #0]
 800675e:	210a      	movs	r1, #10
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4798      	blx	r3
 8006764:	e7e9      	b.n	800673a <_ZN5State4initEv+0x196>
 8006766:	bf00      	nop
 8006768:	40020c00 	.word	0x40020c00
 800676c:	40010000 	.word	0x40010000
 8006770:	40001000 	.word	0x40001000
 8006774:	40001400 	.word	0x40001400
 8006778:	08006e89 	.word	0x08006e89
 800677c:	08006f01 	.word	0x08006f01
 8006780:	000493e0 	.word	0x000493e0
 8006784:	08006ed1 	.word	0x08006ed1
 8006788:	08007081 	.word	0x08007081
 800678c:	080070a1 	.word	0x080070a1
 8006790:	080070e5 	.word	0x080070e5
 8006794:	000f4240 	.word	0x000f4240
 8006798:	080070b5 	.word	0x080070b5
 800679c:	08007109 	.word	0x08007109
 80067a0:	08007129 	.word	0x08007129
 80067a4:	0800716d 	.word	0x0800716d
 80067a8:	00030d40 	.word	0x00030d40
 80067ac:	0800713d 	.word	0x0800713d
 80067b0:	2000144c 	.word	0x2000144c
 80067b4:	080098b8 	.word	0x080098b8
 80067b8:	080079ed 	.word	0x080079ed
 80067bc:	080079a9 	.word	0x080079a9
 80067c0:	200013bc 	.word	0x200013bc
 80067c4:	080078f9 	.word	0x080078f9
 80067c8:	08007af5 	.word	0x08007af5
 80067cc:	08007ac1 	.word	0x08007ac1
 80067d0:	08006ea9 	.word	0x08006ea9

080067d4 <_ZN5State3setEi>:
	Timer7::setPeriod(200000);	// 700 ms

	State::set(State::INITIALIZING);
}

void State::set(int newState){
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4e3d      	ldr	r6, [pc, #244]	; (80068cc <_ZN5State3setEi+0xf8>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80067d8:	4d3d      	ldr	r5, [pc, #244]	; (80068d0 <_ZN5State3setEi+0xfc>)
 80067da:	8833      	ldrh	r3, [r6, #0]
 80067dc:	4c3d      	ldr	r4, [pc, #244]	; (80068d4 <_ZN5State3setEi+0x100>)
 80067de:	686f      	ldr	r7, [r5, #4]
 80067e0:	493d      	ldr	r1, [pc, #244]	; (80068d8 <_ZN5State3setEi+0x104>)

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 80067e2:	4a3e      	ldr	r2, [pc, #248]	; (80068dc <_ZN5State3setEi+0x108>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	8033      	strh	r3, [r6, #0]
 80067ee:	8823      	ldrh	r3, [r4, #0]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	041b      	lsls	r3, r3, #16
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	8023      	strh	r3, [r4, #0]
 80067fa:	880b      	ldrh	r3, [r1, #0]
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	800b      	strh	r3, [r1, #0]

	State::set(State::INITIALIZING);
}

void State::set(int newState){
	currentState = newState;
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <_ZN5State3setEi+0x10c>)
 8006808:	6018      	str	r0, [r3, #0]

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 800680a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800680e:	8353      	strh	r3, [r2, #26]
GPIO__OUTPUT(ledBlue, D, 15);
 8006810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006814:	8353      	strh	r3, [r2, #26]
GPIO__OUTPUT(ledOrange, D, 13);
 8006816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800681a:	8353      	strh	r3, [r2, #26]
GPIO__OUTPUT(ledGreen, D, 12);
 800681c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	Timer7::setPeriod(200000);	// 700 ms

	State::set(State::INITIALIZING);
}

void State::set(int newState){
 8006820:	4604      	mov	r4, r0
using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
GPIO__OUTPUT(ledGreen, D, 12);
 8006822:	8353      	strh	r3, [r2, #26]
 8006824:	2f00      	cmp	r7, #0
 8006826:	d04b      	beq.n	80068c0 <_ZN5State3setEi+0xec>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006828:	2f02      	cmp	r7, #2
				this->writeBin(s);
 800682a:	4628      	mov	r0, r5
 800682c:	492d      	ldr	r1, [pc, #180]	; (80068e4 <_ZN5State3setEi+0x110>)
 800682e:	bf0c      	ite	eq
 8006830:	4b2d      	ldreq	r3, [pc, #180]	; (80068e8 <_ZN5State3setEi+0x114>)
			}
			else {
				this->writeHex(s);
 8006832:	4b2e      	ldrne	r3, [pc, #184]	; (80068ec <_ZN5State3setEi+0x118>)
 8006834:	4798      	blx	r3
		// function here for the default type 'int'. As 'int' has the same
		// width as 'int32_t' we just use a typedef here.
		ALWAYS_INLINE IOStream&
		operator << (const int& v)
		{
			this->writeInteger(static_cast<int32_t>(v));
 8006836:	4e26      	ldr	r6, [pc, #152]	; (80068d0 <_ZN5State3setEi+0xfc>)
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <_ZN5State3setEi+0x11c>)
 800683a:	4630      	mov	r0, r6
 800683c:	4621      	mov	r1, r4
 800683e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006840:	686b      	ldr	r3, [r5, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <_ZN5State3setEi+0xe0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006846:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006848:	2b02      	cmp	r3, #2
				this->writeBin(v);
 800684a:	4630      	mov	r0, r6
 800684c:	bf0c      	ite	eq
 800684e:	4b29      	ldreq	r3, [pc, #164]	; (80068f4 <_ZN5State3setEi+0x120>)
			}
			else {
				this->writeHex(v);
 8006850:	4b29      	ldrne	r3, [pc, #164]	; (80068f8 <_ZN5State3setEi+0x124>)
 8006852:	4798      	blx	r3
void State::set(int newState){
	currentState = newState;
	disableAllLeds();

	dout << "going to state " << newState << endl;
	switch(newState){
 8006854:	2c20      	cmp	r4, #32
 8006856:	d818      	bhi.n	800688a <_ZN5State3setEi+0xb6>
 8006858:	e8df f004 	tbb	[pc, r4]
 800685c:	17171f24 	.word	0x17171f24
 8006860:	17171718 	.word	0x17171718
 8006864:	17171711 	.word	0x17171711
 8006868:	17171717 	.word	0x17171717
 800686c:	17171711 	.word	0x17171711
 8006870:	17171717 	.word	0x17171717
 8006874:	17171717 	.word	0x17171717
 8006878:	17171717 	.word	0x17171717
 800687c:	11          	.byte	0x11
 800687d:	00          	.byte	0x00
			}
			
			static inline void
			start()
			{
				TIM1->CR1 |= TIM_CR1_CEN;
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <_ZN5State3setEi+0xf8>)
 8006880:	881a      	ldrh	r2, [r3, #0]
 8006882:	b292      	uxth	r2, r2
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			
			static inline void
			start()
			{
				TIM6->CR1 |= TIM_CR1_CEN;
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <_ZN5State3setEi+0x100>)
 800688e:	881a      	ldrh	r2, [r3, #0]
 8006890:	b292      	uxth	r2, r2
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
GPIO__OUTPUT(ledGreen, D, 12);
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <_ZN5State3setEi+0x108>)
 800689c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068a0:	831a      	strh	r2, [r3, #24]
 80068a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <_ZN5State3setEi+0x108>)
 80068a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068aa:	831a      	strh	r2, [r3, #24]

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 80068ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068b0:	831a      	strh	r2, [r3, #24]
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 80068b4:	6830      	ldr	r0, [r6, #0]
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	210a      	movs	r1, #10
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4798      	blx	r3
 80068be:	e7c9      	b.n	8006854 <_ZN5State3setEi+0x80>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 80068c0:	6828      	ldr	r0, [r5, #0]
 80068c2:	4908      	ldr	r1, [pc, #32]	; (80068e4 <_ZN5State3setEi+0x110>)
 80068c4:	6803      	ldr	r3, [r0, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4798      	blx	r3
 80068ca:	e7b4      	b.n	8006836 <_ZN5State3setEi+0x62>
 80068cc:	40010000 	.word	0x40010000
 80068d0:	200013bc 	.word	0x200013bc
 80068d4:	40001000 	.word	0x40001000
 80068d8:	40001400 	.word	0x40001400
 80068dc:	40020c00 	.word	0x40020c00
 80068e0:	2000144c 	.word	0x2000144c
 80068e4:	080098b8 	.word	0x080098b8
 80068e8:	080079ed 	.word	0x080079ed
 80068ec:	080079a9 	.word	0x080079a9
 80068f0:	080078f9 	.word	0x080078f9
 80068f4:	08007af5 	.word	0x08007af5
 80068f8:	08007ac1 	.word	0x08007ac1

080068fc <_ZN5State9setOrangeEb>:
GPIO__OUTPUT(ledBlue, D, 15);
GPIO__OUTPUT(ledOrange, D, 13);
 80068fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <_ZN5State9setOrangeEb+0x10>)
 8006902:	b908      	cbnz	r0, 8006908 <_ZN5State9setOrangeEb+0xc>
 8006904:	835a      	strh	r2, [r3, #26]
 8006906:	4770      	bx	lr
 8006908:	831a      	strh	r2, [r3, #24]
 800690a:	4770      	bx	lr
 800690c:	40020c00 	.word	0x40020c00

08006910 <TIM1_UP_TIM10_IRQHandler>:
			static inline void
			resetInterruptFlags(InterruptFlag flags)
			{
				// Flags are cleared by writing a zero to the flag position.
				// Writing a one is ignored.
				TIM1->SR = ~flags;
 8006910:	4a06      	ldr	r2, [pc, #24]	; (800692c <TIM1_UP_TIM10_IRQHandler+0x1c>)

#include <xpcc/architecture.hpp>

using namespace xpcc::stm32;

GPIO__OUTPUT(ledRed, D, 14);
 8006912:	4b07      	ldr	r3, [pc, #28]	; (8006930 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8006914:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8006918:	8211      	strh	r1, [r2, #16]
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006924:	bf14      	ite	ne
 8006926:	835a      	strhne	r2, [r3, #26]
 8006928:	831a      	strheq	r2, [r3, #24]
 800692a:	4770      	bx	lr
 800692c:	40010000 	.word	0x40010000
 8006930:	40020c00 	.word	0x40020c00

08006934 <TIM6_DAC_IRQHandler>:
			static void
			resetInterruptFlags(InterruptFlag interrupt)
			{
				// Flags are cleared by writing a zero to the flag position.
				// Writing a one is ignored.
				TIM6->SR = ~interrupt;
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <TIM6_DAC_IRQHandler+0x1c>)
GPIO__OUTPUT(ledBlue, D, 15);
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <TIM6_DAC_IRQHandler+0x20>)
 8006938:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800693c:	8211      	strh	r1, [r2, #16]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006948:	bf14      	ite	ne
 800694a:	835a      	strhne	r2, [r3, #26]
 800694c:	831a      	strheq	r2, [r3, #24]
 800694e:	4770      	bx	lr
 8006950:	40001000 	.word	0x40001000
 8006954:	40020c00 	.word	0x40020c00

08006958 <TIM7_IRQHandler>:
			static void
			resetInterruptFlags(InterruptFlag interrupt)
			{
				// Flags are cleared by writing a zero to the flag position.
				// Writing a one is ignored.
				TIM7->SR = ~interrupt;
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <TIM7_IRQHandler+0x1c>)
GPIO__OUTPUT(ledOrange, D, 13);
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <TIM7_IRQHandler+0x20>)
 800695c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8006960:	8211      	strh	r1, [r2, #16]
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8006968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800696c:	bf14      	ite	ne
 800696e:	835a      	strhne	r2, [r3, #26]
 8006970:	831a      	strheq	r2, [r3, #24]
 8006972:	4770      	bx	lr
 8006974:	40001400 	.word	0x40001400
 8006978:	40020c00 	.word	0x40020c00

0800697c <_ZN5Utils13enableSystickEv>:
#include <xpcc/math/filter/pid.hpp>
#include <xpcc/architecture.hpp>
#include "control.h"
#include "encoder.h"

void Utils::enableSystick(){
 800697c:	b508      	push	{r3, lr}
	#if CONTROL_FREQUENCY == 1000
		xpcc::stm32::SysTickTimer::enable();
 800697e:	4802      	ldr	r0, [pc, #8]	; (8006988 <_ZN5Utils13enableSystickEv+0xc>)
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <_ZN5Utils13enableSystickEv+0x10>)
 8006982:	4798      	blx	r3
 8006984:	bd08      	pop	{r3, pc}
 8006986:	bf00      	nop
 8006988:	0002903f 	.word	0x0002903f
 800698c:	08006e49 	.word	0x08006e49

08006990 <_ZN5Utils14disableSystickEv>:
	#else
	#error bad control frequency
	#endif
}

void Utils::disableSystick(){
 8006990:	b508      	push	{r3, lr}
	xpcc::stm32::SysTickTimer::disable();
 8006992:	4b01      	ldr	r3, [pc, #4]	; (8006998 <_ZN5Utils14disableSystickEv+0x8>)
 8006994:	4798      	blx	r3
 8006996:	bd08      	pop	{r3, pc}
 8006998:	08006e65 	.word	0x08006e65

0800699c <_ZN5Utils19startLoggingControlEv>:
}

void Utils::startLoggingControl(){
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
	xpcc::Pid<float,1>::Parameter v_param = Control<Y>::getVPidParams();
 800699e:	f8df e260 	ldr.w	lr, [pc, #608]	; 8006c00 <_ZN5Utils19startLoggingControlEv+0x264>
	xpcc::Pid<float,1>::Parameter pos_param = Control<Y>::getPosPidParams();
 80069a2:	4f86      	ldr	r7, [pc, #536]	; (8006bbc <_ZN5Utils19startLoggingControlEv+0x220>)
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80069a4:	4c86      	ldr	r4, [pc, #536]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
void Utils::disableSystick(){
	xpcc::stm32::SysTickTimer::disable();
}

void Utils::startLoggingControl(){
	xpcc::Pid<float,1>::Parameter v_param = Control<Y>::getVPidParams();
 80069a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

void Utils::disableSystick(){
	xpcc::stm32::SysTickTimer::disable();
}

void Utils::startLoggingControl(){
 80069aa:	b08b      	sub	sp, #44	; 0x2c
	xpcc::Pid<float,1>::Parameter v_param = Control<Y>::getVPidParams();
 80069ac:	466e      	mov	r6, sp
 80069ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	xpcc::Pid<float,1>::Parameter pos_param = Control<Y>::getPosPidParams();
 80069b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80069b2:	ad05      	add	r5, sp, #20
 80069b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
void Utils::disableSystick(){
	xpcc::stm32::SysTickTimer::disable();
}

void Utils::startLoggingControl(){
	xpcc::Pid<float,1>::Parameter v_param = Control<Y>::getVPidParams();
 80069b6:	f8de 1000 	ldr.w	r1, [lr]
	xpcc::Pid<float,1>::Parameter pos_param = Control<Y>::getPosPidParams();
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6863      	ldr	r3, [r4, #4]
void Utils::disableSystick(){
	xpcc::stm32::SysTickTimer::disable();
}

void Utils::startLoggingControl(){
	xpcc::Pid<float,1>::Parameter v_param = Control<Y>::getVPidParams();
 80069be:	6031      	str	r1, [r6, #0]
	xpcc::Pid<float,1>::Parameter pos_param = Control<Y>::getPosPidParams();
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80b2 	beq.w	8006b2c <_ZN5Utils19startLoggingControlEv+0x190>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80069c8:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80069ca:	4620      	mov	r0, r4
 80069cc:	bf0c      	ite	eq
 80069ce:	4b7d      	ldreq	r3, [pc, #500]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 80069d0:	4b7d      	ldrne	r3, [pc, #500]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 80069d2:	497e      	ldr	r1, [pc, #504]	; (8006bcc <_ZN5Utils19startLoggingControlEv+0x230>)
			}
			else {
				this->writeHex(s);
 80069d4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	4879      	ldr	r0, [pc, #484]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80b0 	beq.w	8006b40 <_ZN5Utils19startLoggingControlEv+0x1a4>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 80069e0:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 80069e2:	2b02      	cmp	r3, #2
				this->writeBin(v);
 80069e4:	bf0c      	ite	eq
 80069e6:	4b7a      	ldreq	r3, [pc, #488]	; (8006bd0 <_ZN5Utils19startLoggingControlEv+0x234>)
			}
			else {
				this->writeHex(v);
 80069e8:	4b7a      	ldrne	r3, [pc, #488]	; (8006bd4 <_ZN5Utils19startLoggingControlEv+0x238>)
 80069ea:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	4874      	ldr	r0, [pc, #464]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80af 	beq.w	8006b54 <_ZN5Utils19startLoggingControlEv+0x1b8>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 80069f6:	2b02      	cmp	r3, #2
				this->writeBin(s);
 80069f8:	bf0c      	ite	eq
 80069fa:	4b72      	ldreq	r3, [pc, #456]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 80069fc:	4b72      	ldrne	r3, [pc, #456]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 80069fe:	4976      	ldr	r1, [pc, #472]	; (8006bd8 <_ZN5Utils19startLoggingControlEv+0x23c>)
			}
			else {
				this->writeHex(s);
 8006a00:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	486e      	ldr	r0, [pc, #440]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80ae 	beq.w	8006b68 <_ZN5Utils19startLoggingControlEv+0x1cc>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006a0c:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006a0e:	4973      	ldr	r1, [pc, #460]	; (8006bdc <_ZN5Utils19startLoggingControlEv+0x240>)
 8006a10:	bf0c      	ite	eq
 8006a12:	4b6c      	ldreq	r3, [pc, #432]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006a14:	4b6c      	ldrne	r3, [pc, #432]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006a16:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006a18:	4e69      	ldr	r6, [pc, #420]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a1a:	4d71      	ldr	r5, [pc, #452]	; (8006be0 <_ZN5Utils19startLoggingControlEv+0x244>)
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4669      	mov	r1, sp
 8006a20:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80ff 	beq.w	8006c28 <_ZN5Utils19startLoggingControlEv+0x28c>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006a2a:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	496d      	ldr	r1, [pc, #436]	; (8006be4 <_ZN5Utils19startLoggingControlEv+0x248>)
 8006a30:	bf0c      	ite	eq
 8006a32:	4b64      	ldreq	r3, [pc, #400]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006a34:	4b64      	ldrne	r3, [pc, #400]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006a36:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006a38:	4e61      	ldr	r6, [pc, #388]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a3a:	a901      	add	r1, sp, #4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006a40:	6863      	ldr	r3, [r4, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80ea 	beq.w	8006c1c <_ZN5Utils19startLoggingControlEv+0x280>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006a48:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	4966      	ldr	r1, [pc, #408]	; (8006be8 <_ZN5Utils19startLoggingControlEv+0x24c>)
 8006a4e:	bf0c      	ite	eq
 8006a50:	4b5c      	ldreq	r3, [pc, #368]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006a52:	4b5d      	ldrne	r3, [pc, #372]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006a54:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006a56:	4e5a      	ldr	r6, [pc, #360]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a58:	a902      	add	r1, sp, #8
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80d5 	beq.w	8006c10 <_ZN5Utils19startLoggingControlEv+0x274>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006a66:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006a68:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	bf0c      	ite	eq
 8006a6e:	4b58      	ldreq	r3, [pc, #352]	; (8006bd0 <_ZN5Utils19startLoggingControlEv+0x234>)
			}
			else {
				this->writeHex(v);
 8006a70:	4b58      	ldrne	r3, [pc, #352]	; (8006bd4 <_ZN5Utils19startLoggingControlEv+0x238>)
 8006a72:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	4852      	ldr	r0, [pc, #328]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80c3 	beq.w	8006c04 <_ZN5Utils19startLoggingControlEv+0x268>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006a7e:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006a80:	495a      	ldr	r1, [pc, #360]	; (8006bec <_ZN5Utils19startLoggingControlEv+0x250>)
 8006a82:	bf0c      	ite	eq
 8006a84:	4b4f      	ldreq	r3, [pc, #316]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006a86:	4b50      	ldrne	r3, [pc, #320]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006a88:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	484c      	ldr	r0, [pc, #304]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 808e 	beq.w	8006bb0 <_ZN5Utils19startLoggingControlEv+0x214>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006a94:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006a96:	4951      	ldr	r1, [pc, #324]	; (8006bdc <_ZN5Utils19startLoggingControlEv+0x240>)
 8006a98:	bf0c      	ite	eq
 8006a9a:	4b4a      	ldreq	r3, [pc, #296]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006a9c:	4b4a      	ldrne	r3, [pc, #296]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006a9e:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006aa0:	4e47      	ldr	r6, [pc, #284]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006aa2:	a905      	add	r1, sp, #20
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d07a      	beq.n	8006ba4 <_ZN5Utils19startLoggingControlEv+0x208>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006aae:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	494c      	ldr	r1, [pc, #304]	; (8006be4 <_ZN5Utils19startLoggingControlEv+0x248>)
 8006ab4:	bf0c      	ite	eq
 8006ab6:	4b43      	ldreq	r3, [pc, #268]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006ab8:	4b43      	ldrne	r3, [pc, #268]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006aba:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006abc:	4e40      	ldr	r6, [pc, #256]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006abe:	a906      	add	r1, sp, #24
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d066      	beq.n	8006b98 <_ZN5Utils19startLoggingControlEv+0x1fc>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006aca:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006acc:	4630      	mov	r0, r6
 8006ace:	4946      	ldr	r1, [pc, #280]	; (8006be8 <_ZN5Utils19startLoggingControlEv+0x24c>)
 8006ad0:	bf0c      	ite	eq
 8006ad2:	4b3c      	ldreq	r3, [pc, #240]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006ad4:	4b3c      	ldrne	r3, [pc, #240]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006ad6:	4798      	blx	r3
#endif
		
		ALWAYS_INLINE IOStream&
		operator << (const float& v)
		{
			this->writeFloat(v);
 8006ad8:	4e39      	ldr	r6, [pc, #228]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006ada:	a907      	add	r1, sp, #28
 8006adc:	4630      	mov	r0, r6
 8006ade:	47a8      	blx	r5
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d052      	beq.n	8006b8c <_ZN5Utils19startLoggingControlEv+0x1f0>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006ae6:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006ae8:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006aea:	4630      	mov	r0, r6
 8006aec:	bf0c      	ite	eq
 8006aee:	4b38      	ldreq	r3, [pc, #224]	; (8006bd0 <_ZN5Utils19startLoggingControlEv+0x234>)
			}
			else {
				this->writeHex(v);
 8006af0:	4b38      	ldrne	r3, [pc, #224]	; (8006bd4 <_ZN5Utils19startLoggingControlEv+0x238>)
 8006af2:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	4832      	ldr	r0, [pc, #200]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d041      	beq.n	8006b80 <_ZN5Utils19startLoggingControlEv+0x1e4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006afc:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006afe:	493c      	ldr	r1, [pc, #240]	; (8006bf0 <_ZN5Utils19startLoggingControlEv+0x254>)
 8006b00:	bf0c      	ite	eq
 8006b02:	4b30      	ldreq	r3, [pc, #192]	; (8006bc4 <_ZN5Utils19startLoggingControlEv+0x228>)
			}
			else {
				this->writeHex(s);
 8006b04:	4b30      	ldrne	r3, [pc, #192]	; (8006bc8 <_ZN5Utils19startLoggingControlEv+0x22c>)
 8006b06:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006b08:	6863      	ldr	r3, [r4, #4]
 8006b0a:	482d      	ldr	r0, [pc, #180]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d031      	beq.n	8006b74 <_ZN5Utils19startLoggingControlEv+0x1d8>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006b10:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006b12:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006b14:	bf0c      	ite	eq
 8006b16:	4b2e      	ldreq	r3, [pc, #184]	; (8006bd0 <_ZN5Utils19startLoggingControlEv+0x234>)
			}
			else {
				this->writeHex(v);
 8006b18:	4b2e      	ldrne	r3, [pc, #184]	; (8006bd4 <_ZN5Utils19startLoggingControlEv+0x238>)
 8006b1a:	4798      	blx	r3
#include "control.h"
#include "encoder.h"

void Utils::enableSystick(){
	#if CONTROL_FREQUENCY == 1000
		xpcc::stm32::SysTickTimer::enable();
 8006b1c:	4835      	ldr	r0, [pc, #212]	; (8006bf4 <_ZN5Utils19startLoggingControlEv+0x258>)
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <_ZN5Utils19startLoggingControlEv+0x25c>)
 8006b20:	4798      	blx	r3
 8006b22:	2032      	movs	r0, #50	; 0x32
 8006b24:	4b35      	ldr	r3, [pc, #212]	; (8006bfc <_ZN5Utils19startLoggingControlEv+0x260>)
 8006b26:	4798      	blx	r3
			<< "  D: " << pos_param.kd
			<< endl;
	controlOut << "w_x x w_v v v_u v_ureal" << endl;
	Utils::enableSystick();
	xpcc::delay_ms(50);
}
 8006b28:	b00b      	add	sp, #44	; 0x2c
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	4927      	ldr	r1, [pc, #156]	; (8006bcc <_ZN5Utils19startLoggingControlEv+0x230>)
 8006b30:	6803      	ldr	r3, [r0, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	4821      	ldr	r0, [pc, #132]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f af50 	bne.w	80069e0 <_ZN5Utils19startLoggingControlEv+0x44>
				this->device->write(v);
 8006b40:	6800      	ldr	r0, [r0, #0]
 8006b42:	6803      	ldr	r3, [r0, #0]
 8006b44:	210a      	movs	r1, #10
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	481c      	ldr	r0, [pc, #112]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f47f af51 	bne.w	80069f6 <_ZN5Utils19startLoggingControlEv+0x5a>
				this->device->write(s);
 8006b54:	6800      	ldr	r0, [r0, #0]
 8006b56:	4920      	ldr	r1, [pc, #128]	; (8006bd8 <_ZN5Utils19startLoggingControlEv+0x23c>)
 8006b58:	6803      	ldr	r3, [r0, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4798      	blx	r3
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	4817      	ldr	r0, [pc, #92]	; (8006bc0 <_ZN5Utils19startLoggingControlEv+0x224>)
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f af52 	bne.w	8006a0c <_ZN5Utils19startLoggingControlEv+0x70>
				this->device->write(s);
 8006b68:	6800      	ldr	r0, [r0, #0]
 8006b6a:	491c      	ldr	r1, [pc, #112]	; (8006bdc <_ZN5Utils19startLoggingControlEv+0x240>)
 8006b6c:	6803      	ldr	r3, [r0, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4798      	blx	r3
 8006b72:	e751      	b.n	8006a18 <_ZN5Utils19startLoggingControlEv+0x7c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8006b74:	6800      	ldr	r0, [r0, #0]
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	210a      	movs	r1, #10
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4798      	blx	r3
 8006b7e:	e7cd      	b.n	8006b1c <_ZN5Utils19startLoggingControlEv+0x180>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006b80:	6800      	ldr	r0, [r0, #0]
 8006b82:	491b      	ldr	r1, [pc, #108]	; (8006bf0 <_ZN5Utils19startLoggingControlEv+0x254>)
 8006b84:	6803      	ldr	r3, [r0, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4798      	blx	r3
 8006b8a:	e7bd      	b.n	8006b08 <_ZN5Utils19startLoggingControlEv+0x16c>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8006b8c:	6830      	ldr	r0, [r6, #0]
 8006b8e:	6803      	ldr	r3, [r0, #0]
 8006b90:	210a      	movs	r1, #10
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4798      	blx	r3
 8006b96:	e7ad      	b.n	8006af4 <_ZN5Utils19startLoggingControlEv+0x158>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006b98:	6830      	ldr	r0, [r6, #0]
 8006b9a:	4913      	ldr	r1, [pc, #76]	; (8006be8 <_ZN5Utils19startLoggingControlEv+0x24c>)
 8006b9c:	6803      	ldr	r3, [r0, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4798      	blx	r3
 8006ba2:	e799      	b.n	8006ad8 <_ZN5Utils19startLoggingControlEv+0x13c>
 8006ba4:	6830      	ldr	r0, [r6, #0]
 8006ba6:	490f      	ldr	r1, [pc, #60]	; (8006be4 <_ZN5Utils19startLoggingControlEv+0x248>)
 8006ba8:	6803      	ldr	r3, [r0, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4798      	blx	r3
 8006bae:	e785      	b.n	8006abc <_ZN5Utils19startLoggingControlEv+0x120>
 8006bb0:	6800      	ldr	r0, [r0, #0]
 8006bb2:	490a      	ldr	r1, [pc, #40]	; (8006bdc <_ZN5Utils19startLoggingControlEv+0x240>)
 8006bb4:	6803      	ldr	r3, [r0, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4798      	blx	r3
 8006bba:	e771      	b.n	8006aa0 <_ZN5Utils19startLoggingControlEv+0x104>
 8006bbc:	200006d4 	.word	0x200006d4
 8006bc0:	200013c8 	.word	0x200013c8
 8006bc4:	080079ed 	.word	0x080079ed
 8006bc8:	080079a9 	.word	0x080079a9
 8006bcc:	080098c8 	.word	0x080098c8
 8006bd0:	08007af5 	.word	0x08007af5
 8006bd4:	08007ac1 	.word	0x08007ac1
 8006bd8:	080098d4 	.word	0x080098d4
 8006bdc:	080098e0 	.word	0x080098e0
 8006be0:	08007b2d 	.word	0x08007b2d
 8006be4:	080098e8 	.word	0x080098e8
 8006be8:	080098f0 	.word	0x080098f0
 8006bec:	080098f8 	.word	0x080098f8
 8006bf0:	08009400 	.word	0x08009400
 8006bf4:	0002903f 	.word	0x0002903f
 8006bf8:	08006e49 	.word	0x08006e49
 8006bfc:	20000011 	.word	0x20000011
 8006c00:	200006f4 	.word	0x200006f4
 8006c04:	6800      	ldr	r0, [r0, #0]
 8006c06:	490b      	ldr	r1, [pc, #44]	; (8006c34 <_ZN5Utils19startLoggingControlEv+0x298>)
 8006c08:	6803      	ldr	r3, [r0, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4798      	blx	r3
 8006c0e:	e73c      	b.n	8006a8a <_ZN5Utils19startLoggingControlEv+0xee>

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
 8006c10:	6830      	ldr	r0, [r6, #0]
 8006c12:	6803      	ldr	r3, [r0, #0]
 8006c14:	210a      	movs	r1, #10
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4798      	blx	r3
 8006c1a:	e72b      	b.n	8006a74 <_ZN5Utils19startLoggingControlEv+0xd8>

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
 8006c1c:	6830      	ldr	r0, [r6, #0]
 8006c1e:	4906      	ldr	r1, [pc, #24]	; (8006c38 <_ZN5Utils19startLoggingControlEv+0x29c>)
 8006c20:	6803      	ldr	r3, [r0, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4798      	blx	r3
 8006c26:	e716      	b.n	8006a56 <_ZN5Utils19startLoggingControlEv+0xba>
 8006c28:	6830      	ldr	r0, [r6, #0]
 8006c2a:	4904      	ldr	r1, [pc, #16]	; (8006c3c <_ZN5Utils19startLoggingControlEv+0x2a0>)
 8006c2c:	6803      	ldr	r3, [r0, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4798      	blx	r3
 8006c32:	e701      	b.n	8006a38 <_ZN5Utils19startLoggingControlEv+0x9c>
 8006c34:	080098f8 	.word	0x080098f8
 8006c38:	080098f0 	.word	0x080098f0
 8006c3c:	080098e8 	.word	0x080098e8

08006c40 <_ZN5Utils13calibrateZeroEv>:
private:
	static volatile bool triggered[2];
	static volatile bool state[2]; //the real current state
	static volatile int triggeredPosition[2];

	GPIO__INPUT(XFRONT, E, 11);
 8006c40:	4b4c      	ldr	r3, [pc, #304]	; (8006d74 <_ZN5Utils13calibrateZeroEv+0x134>)
 8006c42:	691a      	ldr	r2, [r3, #16]

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
 8006c44:	0510      	lsls	r0, r2, #20
		Motor<axis>::setSpeed(-900);
	}
	Motor<axis>::setSpeed(0);
}

void Utils::calibrateZero(){
 8006c46:	b570      	push	{r4, r5, r6, lr}
}

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
 8006c48:	d564      	bpl.n	8006d14 <_ZN5Utils13calibrateZeroEv+0xd4>
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4c4a      	ldr	r4, [pc, #296]	; (8006d78 <_ZN5Utils13calibrateZeroEv+0x138>)
		Motor<axis>::setSpeed(0);
		return;
	}
	while(HallSensor<axis>::getFrontState() == 1){
 8006c4e:	0519      	lsls	r1, r3, #20
 8006c50:	d505      	bpl.n	8006c5e <_ZN5Utils13calibrateZeroEv+0x1e>
		Motor<axis>::setSpeed(-900);
 8006c52:	484a      	ldr	r0, [pc, #296]	; (8006d7c <_ZN5Utils13calibrateZeroEv+0x13c>)
 8006c54:	47a0      	blx	r4
 8006c56:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <_ZN5Utils13calibrateZeroEv+0x134>)
 8006c58:	691b      	ldr	r3, [r3, #16]
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
		Motor<axis>::setSpeed(0);
		return;
	}
	while(HallSensor<axis>::getFrontState() == 1){
 8006c5a:	051b      	lsls	r3, r3, #20
 8006c5c:	d4f9      	bmi.n	8006c52 <_ZN5Utils13calibrateZeroEv+0x12>
 8006c5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006c62:	4d47      	ldr	r5, [pc, #284]	; (8006d80 <_ZN5Utils13calibrateZeroEv+0x140>)
 8006c64:	47a8      	blx	r5
 8006c66:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <_ZN5Utils13calibrateZeroEv+0x134>)
 8006c68:	691b      	ldr	r3, [r3, #16]
		Motor<axis>::setSpeed(-900);
	}
	xpcc::delay_ms(300);
	while(HallSensor<axis>::getFrontState() == 1){
 8006c6a:	051a      	lsls	r2, r3, #20
 8006c6c:	d505      	bpl.n	8006c7a <_ZN5Utils13calibrateZeroEv+0x3a>
		Motor<axis>::setSpeed(-900);
 8006c6e:	4843      	ldr	r0, [pc, #268]	; (8006d7c <_ZN5Utils13calibrateZeroEv+0x13c>)
 8006c70:	47a0      	blx	r4
 8006c72:	4b40      	ldr	r3, [pc, #256]	; (8006d74 <_ZN5Utils13calibrateZeroEv+0x134>)
 8006c74:	691b      	ldr	r3, [r3, #16]
	}
	while(HallSensor<axis>::getFrontState() == 1){
		Motor<axis>::setSpeed(-900);
	}
	xpcc::delay_ms(300);
	while(HallSensor<axis>::getFrontState() == 1){
 8006c76:	051e      	lsls	r6, r3, #20
 8006c78:	d4f9      	bmi.n	8006c6e <_ZN5Utils13calibrateZeroEv+0x2e>
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006c7a:	4e42      	ldr	r6, [pc, #264]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
		Motor<axis>::setSpeed(0);
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	47a0      	blx	r4
 8006c80:	6873      	ldr	r3, [r6, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d04e      	beq.n	8006d24 <_ZN5Utils13calibrateZeroEv+0xe4>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006c86:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006c88:	4630      	mov	r0, r6
 8006c8a:	bf0c      	ite	eq
 8006c8c:	4b3e      	ldreq	r3, [pc, #248]	; (8006d88 <_ZN5Utils13calibrateZeroEv+0x148>)
			}
			else {
				this->writeHex(s);
 8006c8e:	4b3f      	ldrne	r3, [pc, #252]	; (8006d8c <_ZN5Utils13calibrateZeroEv+0x14c>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8006c90:	493f      	ldr	r1, [pc, #252]	; (8006d90 <_ZN5Utils13calibrateZeroEv+0x150>)
			}
			else {
				this->writeHex(s);
 8006c92:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006c94:	6873      	ldr	r3, [r6, #4]
 8006c96:	483b      	ldr	r0, [pc, #236]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d04c      	beq.n	8006d36 <_ZN5Utils13calibrateZeroEv+0xf6>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006c9c:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006c9e:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006ca0:	bf0c      	ite	eq
 8006ca2:	4b3c      	ldreq	r3, [pc, #240]	; (8006d94 <_ZN5Utils13calibrateZeroEv+0x154>)
			}
			else {
				this->writeHex(v);
 8006ca4:	4b3c      	ldrne	r3, [pc, #240]	; (8006d98 <_ZN5Utils13calibrateZeroEv+0x158>)
 8006ca6:	4798      	blx	r3
	GPIO__INPUT(XEND, E, 7);
	GPIO__INPUT(YFRONT, D, 8);
 8006ca8:	4b3c      	ldr	r3, [pc, #240]	; (8006d9c <_ZN5Utils13calibrateZeroEv+0x15c>)
 8006caa:	691a      	ldr	r2, [r3, #16]
}

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
 8006cac:	05d4      	lsls	r4, r2, #23
 8006cae:	d54b      	bpl.n	8006d48 <_ZN5Utils13calibrateZeroEv+0x108>
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	4c3b      	ldr	r4, [pc, #236]	; (8006da0 <_ZN5Utils13calibrateZeroEv+0x160>)
		Motor<axis>::setSpeed(0);
		return;
	}
	while(HallSensor<axis>::getFrontState() == 1){
 8006cb4:	05d8      	lsls	r0, r3, #23
 8006cb6:	d505      	bpl.n	8006cc4 <_ZN5Utils13calibrateZeroEv+0x84>
		Motor<axis>::setSpeed(-900);
 8006cb8:	4830      	ldr	r0, [pc, #192]	; (8006d7c <_ZN5Utils13calibrateZeroEv+0x13c>)
 8006cba:	47a0      	blx	r4
 8006cbc:	4b37      	ldr	r3, [pc, #220]	; (8006d9c <_ZN5Utils13calibrateZeroEv+0x15c>)
 8006cbe:	691b      	ldr	r3, [r3, #16]
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
		Motor<axis>::setSpeed(0);
		return;
	}
	while(HallSensor<axis>::getFrontState() == 1){
 8006cc0:	05da      	lsls	r2, r3, #23
 8006cc2:	d4f9      	bmi.n	8006cb8 <_ZN5Utils13calibrateZeroEv+0x78>
 8006cc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006cc8:	47a8      	blx	r5
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <_ZN5Utils13calibrateZeroEv+0x15c>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
		Motor<axis>::setSpeed(-900);
	}
	xpcc::delay_ms(300);
	while(HallSensor<axis>::getFrontState() == 1){
 8006cce:	05d9      	lsls	r1, r3, #23
 8006cd0:	d505      	bpl.n	8006cde <_ZN5Utils13calibrateZeroEv+0x9e>
		Motor<axis>::setSpeed(-900);
 8006cd2:	482a      	ldr	r0, [pc, #168]	; (8006d7c <_ZN5Utils13calibrateZeroEv+0x13c>)
 8006cd4:	47a0      	blx	r4
 8006cd6:	4b31      	ldr	r3, [pc, #196]	; (8006d9c <_ZN5Utils13calibrateZeroEv+0x15c>)
 8006cd8:	691b      	ldr	r3, [r3, #16]
	}
	while(HallSensor<axis>::getFrontState() == 1){
		Motor<axis>::setSpeed(-900);
	}
	xpcc::delay_ms(300);
	while(HallSensor<axis>::getFrontState() == 1){
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	d4f9      	bmi.n	8006cd2 <_ZN5Utils13calibrateZeroEv+0x92>

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
		Motor<axis>::setSpeed(0);
 8006cde:	2000      	movs	r0, #0
 8006ce0:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006ce2:	6873      	ldr	r3, [r6, #4]
 8006ce4:	4827      	ldr	r0, [pc, #156]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d035      	beq.n	8006d56 <_ZN5Utils13calibrateZeroEv+0x116>
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
 8006cea:	2b02      	cmp	r3, #2
				this->writeBin(s);
 8006cec:	bf0c      	ite	eq
 8006cee:	4b26      	ldreq	r3, [pc, #152]	; (8006d88 <_ZN5Utils13calibrateZeroEv+0x148>)
			}
			else {
				this->writeHex(s);
 8006cf0:	4b26      	ldrne	r3, [pc, #152]	; (8006d8c <_ZN5Utils13calibrateZeroEv+0x14c>)
		{
			if( this->mode == Mode::Ascii ) {
				this->device->write(s);
			}
			else if( this->mode == Mode::Binary ) {
				this->writeBin(s);
 8006cf2:	492c      	ldr	r1, [pc, #176]	; (8006da4 <_ZN5Utils13calibrateZeroEv+0x164>)
			}
			else {
				this->writeHex(s);
 8006cf4:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006cf6:	6873      	ldr	r3, [r6, #4]
 8006cf8:	4822      	ldr	r0, [pc, #136]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d034      	beq.n	8006d68 <_ZN5Utils13calibrateZeroEv+0x128>
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
				this->writeBin(v);
 8006cfe:	210a      	movs	r1, #10
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
				this->device->write(v);
			}
			else if (this->mode == Mode::Binary) {
 8006d00:	2b02      	cmp	r3, #2
				this->writeBin(v);
 8006d02:	bf0c      	ite	eq
 8006d04:	4b23      	ldreq	r3, [pc, #140]	; (8006d94 <_ZN5Utils13calibrateZeroEv+0x154>)
			}
			else {
				this->writeHex(v);
 8006d06:	4b24      	ldrne	r3, [pc, #144]	; (8006d98 <_ZN5Utils13calibrateZeroEv+0x158>)
 8006d08:	4798      	blx	r3
 8006d0a:	2032      	movs	r0, #50	; 0x32
 8006d0c:	47a8      	blx	r5
	driveToZero<X>();
	dout << "X axis calibrated" << endl;
	driveToZero<Y>();
	dout << "Y axis calibrated" << endl;
	xpcc::delay_ms(50); //let the mass come to rest
	Encoder::zero();
 8006d0e:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <_ZN5Utils13calibrateZeroEv+0x168>)
 8006d10:	4798      	blx	r3
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006d14:	4e1b      	ldr	r6, [pc, #108]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006d16:	4c18      	ldr	r4, [pc, #96]	; (8006d78 <_ZN5Utils13calibrateZeroEv+0x138>)
 8006d18:	4d19      	ldr	r5, [pc, #100]	; (8006d80 <_ZN5Utils13calibrateZeroEv+0x140>)

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
		Motor<axis>::setSpeed(0);
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	47a0      	blx	r4
 8006d1e:	6873      	ldr	r3, [r6, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1b0      	bne.n	8006c86 <_ZN5Utils13calibrateZeroEv+0x46>
				this->device->write(s);
 8006d24:	6830      	ldr	r0, [r6, #0]
 8006d26:	491a      	ldr	r1, [pc, #104]	; (8006d90 <_ZN5Utils13calibrateZeroEv+0x150>)
 8006d28:	6803      	ldr	r3, [r0, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006d2e:	6873      	ldr	r3, [r6, #4]
 8006d30:	4814      	ldr	r0, [pc, #80]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1b2      	bne.n	8006c9c <_ZN5Utils13calibrateZeroEv+0x5c>
				this->device->write(v);
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	6803      	ldr	r3, [r0, #0]
 8006d3a:	210a      	movs	r1, #10
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	4798      	blx	r3
 8006d40:	4b16      	ldr	r3, [pc, #88]	; (8006d9c <_ZN5Utils13calibrateZeroEv+0x15c>)
 8006d42:	691a      	ldr	r2, [r3, #16]
}

template<Axis axis>
void driveToZero(){
	//sensors have pull ups
	if(HallSensor<axis>::getFrontState() == 0){
 8006d44:	05d4      	lsls	r4, r2, #23
 8006d46:	d4b3      	bmi.n	8006cb0 <_ZN5Utils13calibrateZeroEv+0x70>
		Motor<axis>::setSpeed(0);
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4c15      	ldr	r4, [pc, #84]	; (8006da0 <_ZN5Utils13calibrateZeroEv+0x160>)
 8006d4c:	47a0      	blx	r4
		}

		IOStream&
		operator << (const char* s)
		{
			if( this->mode == Mode::Ascii ) {
 8006d4e:	6873      	ldr	r3, [r6, #4]
 8006d50:	480c      	ldr	r0, [pc, #48]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c9      	bne.n	8006cea <_ZN5Utils13calibrateZeroEv+0xaa>
				this->device->write(s);
 8006d56:	6800      	ldr	r0, [r0, #0]
 8006d58:	4912      	ldr	r1, [pc, #72]	; (8006da4 <_ZN5Utils13calibrateZeroEv+0x164>)
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	4798      	blx	r3
		}

		IOStream&
		operator << (const char& v)
		{
			if (this->mode == Mode::Ascii) {
 8006d60:	6873      	ldr	r3, [r6, #4]
 8006d62:	4808      	ldr	r0, [pc, #32]	; (8006d84 <_ZN5Utils13calibrateZeroEv+0x144>)
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1ca      	bne.n	8006cfe <_ZN5Utils13calibrateZeroEv+0xbe>
				this->device->write(v);
 8006d68:	6800      	ldr	r0, [r0, #0]
 8006d6a:	6803      	ldr	r3, [r0, #0]
 8006d6c:	210a      	movs	r1, #10
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4798      	blx	r3
 8006d72:	e7ca      	b.n	8006d0a <_ZN5Utils13calibrateZeroEv+0xca>
 8006d74:	40021000 	.word	0x40021000
 8006d78:	080025ed 	.word	0x080025ed
 8006d7c:	fffffc7c 	.word	0xfffffc7c
 8006d80:	20000011 	.word	0x20000011
 8006d84:	200013bc 	.word	0x200013bc
 8006d88:	080079ed 	.word	0x080079ed
 8006d8c:	080079a9 	.word	0x080079a9
 8006d90:	08009904 	.word	0x08009904
 8006d94:	08007af5 	.word	0x08007af5
 8006d98:	08007ac1 	.word	0x08007ac1
 8006d9c:	40020c00 	.word	0x40020c00
 8006da0:	08002629 	.word	0x08002629
 8006da4:	08009918 	.word	0x08009918
 8006da8:	0800119d 	.word	0x0800119d

08006dac <_GLOBAL__sub_I__ZN5Utils13enableSystickEv>:
template<Axis axis> float Control<axis>::maxSpeed;

template<Axis axis> bool Control<axis>::positionControlEnabled;
template<Axis axis> bool Control<axis>::speedControlEnabled;

template<Axis axis> xpcc::Pid<float, 1> Control<axis>::v_pid;
 8006dac:	4910      	ldr	r1, [pc, #64]	; (8006df0 <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x44>)
 8006dae:	680b      	ldr	r3, [r1, #0]
 8006db0:	07da      	lsls	r2, r3, #31
 8006db2:	d40b      	bmi.n	8006dcc <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x20>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x48>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	609a      	str	r2, [r3, #8]
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8006dc2:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8006dc4:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8006dc6:	61da      	str	r2, [r3, #28]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	600b      	str	r3, [r1, #0]
template<Axis axis> xpcc::Pid<float, 1> Control<axis>::pos_pid;
 8006dcc:	490a      	ldr	r1, [pc, #40]	; (8006df8 <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x4c>)
 8006dce:	680b      	ldr	r3, [r1, #0]
 8006dd0:	07db      	lsls	r3, r3, #31
 8006dd2:	d40b      	bmi.n	8006dec <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x40>
		const T& maxErrorSum, const T& maxOutput) :
	kp(static_cast<T>(kp * ScaleFactor)),
	ki(static_cast<T>(ki * ScaleFactor)),
	kd(static_cast<T>(kd * ScaleFactor)),
	maxErrorSum(static_cast<T>(maxErrorSum * ScaleFactor)),
	maxOutput(maxOutput)
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <_GLOBAL__sub_I__ZN5Utils13enableSystickEv+0x50>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	605a      	str	r2, [r3, #4]
 8006ddc:	609a      	str	r2, [r3, #8]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	611a      	str	r2, [r3, #16]

template<typename T, unsigned int ScaleFactor>
void
xpcc::Pid<T, ScaleFactor>::reset()
{
	this->errorSum = 0;
 8006de2:	615a      	str	r2, [r3, #20]
	this->lastError = 0;
 8006de4:	619a      	str	r2, [r3, #24]
	this->output = 0;
 8006de6:	61da      	str	r2, [r3, #28]
 8006de8:	2301      	movs	r3, #1
 8006dea:	600b      	str	r3, [r1, #0]
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000728 	.word	0x20000728
 8006df4:	200006f4 	.word	0x200006f4
 8006df8:	20000730 	.word	0x20000730
 8006dfc:	200006d4 	.word	0x200006d4

08006e00 <HardFault_Handler>:

.global HardFault_Handler
.extern HardFault_Handler_CPP

HardFault_Handler:
  TST LR, #4
 8006e00:	f01e 0f04 	tst.w	lr, #4
  ITE EQ
 8006e04:	bf0c      	ite	eq
  MRSEQ R0, MSP
 8006e06:	f3ef 8008 	mrseq	r0, MSP
  MRSNE R0, PSP
 8006e0a:	f3ef 8009 	mrsne	r0, PSP
  B HardFault_Handler_CPP
 8006e0e:	f7fa ba4d 	b.w	80012ac <HardFault_Handler_CPP>
	...

08006e14 <_ZN4xpcc5Clock3nowEv>:
		uint32_t mask = 1;
		asm volatile (
				"mrs %0, PRIMASK"	"\n\t"
				"msr PRIMASK, %1"
				: "=&r" (cpsr)
				: "r" (mask));
 8006e14:	2201      	movs	r2, #1
 8006e16:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1a:	f382 8810 	msr	PRIMASK, r2
	}

	xpcc::atomic::Lock::~Lock()
	{
		asm volatile ("msr PRIMASK, %0" : : "r" (cpsr) );
 8006e1e:	f383 8810 	msr	PRIMASK, r3
		{
			atomic::Lock lock;
			tempTime = time;
		}
		
		return Timestamp(tempTime);
 8006e22:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <_ZN4xpcc5Clock3nowEv+0x14>)
	}
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	4770      	bx	lr
 8006e28:	20001450 	.word	0x20001450

08006e2c <SysTick_Handler>:

static xpcc::stm32::InterruptHandler sysTickHandler = &xpcc::dummy;

extern "C" void
SysTick_Handler(void)
{
 8006e2c:	b508      	push	{r3, lr}
#if !defined(XPCC__CPU_HOSTED)
		/// \brief	Set the current time
		static inline void
		increment(uint_fast16_t step = 1)
		{
			time += step;
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <SysTick_Handler+0x14>)
	xpcc::Clock::increment();
	sysTickHandler();
 8006e30:	4904      	ldr	r1, [pc, #16]	; (8006e44 <SysTick_Handler+0x18>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6809      	ldr	r1, [r1, #0]
 8006e36:	3201      	adds	r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	4788      	blx	r1
 8006e3c:	bd08      	pop	{r3, pc}
 8006e3e:	bf00      	nop
 8006e40:	20001450 	.word	0x20001450
 8006e44:	20000150 	.word	0x20000150

08006e48 <_ZN4xpcc5stm3212SysTickTimer6enableEm>:
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006e48:	4a04      	ldr	r2, [pc, #16]	; (8006e5c <_ZN4xpcc5stm3212SysTickTimer6enableEm+0x14>)
xpcc::stm32::SysTickTimer::enable(uint32_t reload)
{
	// Lower systick interrupt priority to lowest level
	NVIC_SetPriority(SysTick_IRQn, 0xf);
	
	SysTick->LOAD = reload;
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <_ZN4xpcc5stm3212SysTickTimer6enableEm+0x18>)
 8006e4c:	21f0      	movs	r1, #240	; 0xf0
 8006e4e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	SysTick->CTRL =
			SysTick_CTRL_CLKSOURCE_Msk |
			SysTick_CTRL_ENABLE_Msk |
			SysTick_CTRL_TICKINT_Msk;
 8006e52:	2207      	movs	r2, #7
xpcc::stm32::SysTickTimer::enable(uint32_t reload)
{
	// Lower systick interrupt priority to lowest level
	NVIC_SetPriority(SysTick_IRQn, 0xf);
	
	SysTick->LOAD = reload;
 8006e54:	6058      	str	r0, [r3, #4]
	SysTick->CTRL =
			SysTick_CTRL_CLKSOURCE_Msk |
			SysTick_CTRL_ENABLE_Msk |
			SysTick_CTRL_TICKINT_Msk;
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	e000ed00 	.word	0xe000ed00
 8006e60:	e000e010 	.word	0xe000e010

08006e64 <_ZN4xpcc5stm3212SysTickTimer7disableEv>:
}

void
xpcc::stm32::SysTickTimer::disable()
{
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <_ZN4xpcc5stm3212SysTickTimer7disableEv+0x8>)
 8006e66:	2204      	movs	r2, #4
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	4770      	bx	lr
 8006e6c:	e000e010 	.word	0xe000e010

08006e70 <_ZN4xpcc5stm3212SysTickTimer15attachInterruptEPFvvE>:
		uint32_t mask = 1;
		asm volatile (
				"mrs %0, PRIMASK"	"\n\t"
				"msr PRIMASK, %1"
				: "=&r" (cpsr)
				: "r" (mask));
 8006e70:	2201      	movs	r2, #1
 8006e72:	f3ef 8310 	mrs	r3, PRIMASK
 8006e76:	f382 8810 	msr	PRIMASK, r2
// ----------------------------------------------------------------------------
void
xpcc::stm32::SysTickTimer::attachInterrupt(InterruptHandler handler)
{
	atomic::Lock lock;
	sysTickHandler = handler;
 8006e7a:	4a02      	ldr	r2, [pc, #8]	; (8006e84 <_ZN4xpcc5stm3212SysTickTimer15attachInterruptEPFvvE+0x14>)
 8006e7c:	6010      	str	r0, [r2, #0]
	}

	xpcc::atomic::Lock::~Lock()
	{
		asm volatile ("msr PRIMASK, %0" : : "r" (cpsr) );
 8006e7e:	f383 8810 	msr	PRIMASK, r3
 8006e82:	4770      	bx	lr
 8006e84:	20000150 	.word	0x20000150

08006e88 <_ZN4xpcc5stm326Timer16enableEv>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer1::enable()
{
	// enable clock
	RCC->APB2ENR  |=  RCC_APB2ENR_TIM1EN;
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <_ZN4xpcc5stm326Timer16enableEv+0x1c>)
 8006e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
	
	// reset timer
	RCC->APB2RSTR |=  RCC_APB2RSTR_TIM1RST;
 8006e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_TIM1RST;
 8006e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ea2:	4770      	bx	lr
 8006ea4:	40023800 	.word	0x40023800

08006ea8 <_ZN4xpcc5stm326Timer17setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeE>:
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode
#if defined(STM32F3XX)
		, MasterMode2 masterMode2
#endif /* defined(STM32F3XX) */
		)
{
 8006ea8:	b470      	push	{r4, r5, r6}
	// disable timer
	TIM1->CR1 = 0;
 8006eaa:	4c08      	ldr	r4, [pc, #32]	; (8006ecc <_ZN4xpcc5stm326Timer17setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeE+0x24>)
	TIM1->CR2 = 0;
	
	if (slaveMode == SLAVE_ENCODER_1 || slaveMode == SLAVE_ENCODER_2 || slaveMode == SLAVE_ENCODER_3)
 8006eac:	1e4e      	subs	r6, r1, #1
		, MasterMode2 masterMode2
#endif /* defined(STM32F3XX) */
		)
{
	// disable timer
	TIM1->CR1 = 0;
 8006eae:	2500      	movs	r5, #0
	TIM1->CR2 = 0;
	
	if (slaveMode == SLAVE_ENCODER_1 || slaveMode == SLAVE_ENCODER_2 || slaveMode == SLAVE_ENCODER_3)
 8006eb0:	2e02      	cmp	r6, #2
		, MasterMode2 masterMode2
#endif /* defined(STM32F3XX) */
		)
{
	// disable timer
	TIM1->CR1 = 0;
 8006eb2:	8025      	strh	r5, [r4, #0]
	TIM1->CR2 = 0;
 8006eb4:	80a5      	strh	r5, [r4, #4]
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM1->PSC = prescaler - 1;
 8006eb6:	bf98      	it	ls
 8006eb8:	8525      	strhls	r5, [r4, #40]	; 0x28
	{
		setPrescaler(1);
	}
	
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM1->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 8006eba:	4c04      	ldr	r4, [pc, #16]	; (8006ecc <_ZN4xpcc5stm326Timer17setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeE+0x24>)
 8006ebc:	f040 0084 	orr.w	r0, r0, #132	; 0x84
#if defined(STM32F3XX)
	TIM1->CR2 = masterMode | masterMode2;
#else
	TIM1->CR2 = masterMode;
#endif
	TIM1->SMCR = slaveMode|slaveModeTrigger;
 8006ec0:	4311      	orrs	r1, r2
	{
		setPrescaler(1);
	}
	
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM1->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 8006ec2:	8020      	strh	r0, [r4, #0]
#if defined(STM32F3XX)
	TIM1->CR2 = masterMode | masterMode2;
#else
	TIM1->CR2 = masterMode;
 8006ec4:	80a3      	strh	r3, [r4, #4]
#endif
	TIM1->SMCR = slaveMode|slaveModeTrigger;
 8006ec6:	8121      	strh	r1, [r4, #8]
}
 8006ec8:	bc70      	pop	{r4, r5, r6}
 8006eca:	4770      	bx	lr
 8006ecc:	40010000 	.word	0x40010000

08006ed0 <_ZN4xpcc5stm326Timer19setPeriodEmb>:
{
	// This will be inaccurate for non-smooth frequencies (last six digits
	// unequal to zero)
	uint32_t cycles = microseconds * (
			((STM32_APB2_FREQUENCY==STM32_AHB_FREQUENCY)?1:2) * 
			STM32_APB2_FREQUENCY / 1000000UL);
 8006ed0:	23a8      	movs	r3, #168	; 0xa8
 8006ed2:	fb03 f000 	mul.w	r0, r3, r0
	uint16_t prescaler = (cycles + 65535) / 65536;	// always round up
 8006ed6:	f500 437f 	add.w	r3, r0, #65280	; 0xff00
 8006eda:	33ff      	adds	r3, #255	; 0xff
 8006edc:	0c1a      	lsrs	r2, r3, #16
	uint16_t overflow = cycles / prescaler;
 8006ede:	fbb0 f0f2 	udiv	r0, r0, r2
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <_ZN4xpcc5stm326Timer19setPeriodEmb+0x2c>)
	
	overflow = overflow - 1;	// e.g. 36000 cycles are from 0 to 35999
 8006ee4:	3801      	subs	r0, #1
 8006ee6:	3a01      	subs	r2, #1
 8006ee8:	b280      	uxth	r0, r0
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
			}
			
			static inline void
			setOverflow(uint16_t overflow)
			{
				TIM1->ARR = overflow;
 8006eec:	62d8      	str	r0, [r3, #44]	; 0x2c
	
	setPrescaler(prescaler);
	setOverflow(overflow);
	
	if (autoApply) {
 8006eee:	b121      	cbz	r1, 8006efa <_ZN4xpcc5stm326Timer19setPeriodEmb+0x2a>
		// Generate Update Event to apply the new settings for ARR
		TIM1->EGR |= TIM_EGR_UG;
 8006ef0:	8a9a      	ldrh	r2, [r3, #20]
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	f042 0201 	orr.w	r2, r2, #1
 8006ef8:	829a      	strh	r2, [r3, #20]
	}
	
	return overflow;
}
 8006efa:	4770      	bx	lr
 8006efc:	40010000 	.word	0x40010000

08006f00 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer1::enableInterruptVector(Interrupt interrupt, bool enable, uint32_t priority)
{
	if (enable)
 8006f00:	b1f9      	cbz	r1, 8006f42 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x42>
	{
		if (interrupt & INTERRUPT_UPDATE) {
 8006f02:	07c3      	lsls	r3, r0, #31
 8006f04:	d506      	bpl.n	8006f14 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x14>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f08:	0111      	lsls	r1, r2, #4
 8006f0a:	f883 1319 	strb.w	r1, [r3, #793]	; 0x319
// below are constant the compiler is able to calculate everything at
// compile time.
static ALWAYS_INLINE void
nvicEnableInterrupt(IRQn_Type IRQn)
{
	NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8006f0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006f12:	6019      	str	r1, [r3, #0]
		if (interrupt & INTERRUPT_UPDATE) {
			NVIC_SetPriority(TIM1_UP_IRQn, priority);
			nvicEnableInterrupt(TIM1_UP_IRQn);
		}
		
		if (interrupt & INTERRUPT_BREAK) {
 8006f14:	0601      	lsls	r1, r0, #24
 8006f16:	d433      	bmi.n	8006f80 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x80>
			NVIC_SetPriority(TIM1_BRK_IRQn, priority);
			nvicEnableInterrupt(TIM1_BRK_IRQn);
		}
		
		if (interrupt & (INTERRUPT_COM | INTERRUPT_TRIGGER)) {
 8006f18:	f010 0f60 	tst.w	r0, #96	; 0x60
 8006f1c:	d006      	beq.n	8006f2c <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x2c>
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f20:	0111      	lsls	r1, r2, #4
 8006f22:	f883 131a 	strb.w	r1, [r3, #794]	; 0x31a
// below are constant the compiler is able to calculate everything at
// compile time.
static ALWAYS_INLINE void
nvicEnableInterrupt(IRQn_Type IRQn)
{
	NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8006f26:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8006f2a:	6019      	str	r1, [r3, #0]
		if (interrupt & (INTERRUPT_COM | INTERRUPT_TRIGGER)) {
			NVIC_SetPriority(TIM1_TRG_COM_IRQn, priority);
			nvicEnableInterrupt(TIM1_TRG_COM_IRQn);
		}	
		
		if (interrupt & 
 8006f2c:	f010 0f1e 	tst.w	r0, #30
 8006f30:	d025      	beq.n	8006f7e <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x7e>
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f34:	0112      	lsls	r2, r2, #4
 8006f36:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
// below are constant the compiler is able to calculate everything at
// compile time.
static ALWAYS_INLINE void
nvicEnableInterrupt(IRQn_Type IRQn)
{
	NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8006f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	4770      	bx	lr
			nvicEnableInterrupt(TIM1_CC_IRQn);
		}
	}
	else
	{
		if (interrupt & INTERRUPT_UPDATE) {
 8006f42:	07c2      	lsls	r2, r0, #31
 8006f44:	d504      	bpl.n	8006f50 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x50>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			nvicDisableInterrupt(TIM1_UP_IRQn);
		}
		
		if (interrupt & INTERRUPT_BREAK) {
 8006f50:	0603      	lsls	r3, r0, #24
 8006f52:	d504      	bpl.n	8006f5e <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x5e>
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			nvicDisableInterrupt(TIM1_BRK_IRQn);
		}
		
		if (interrupt & (INTERRUPT_COM | INTERRUPT_TRIGGER)) {
 8006f5e:	f010 0f60 	tst.w	r0, #96	; 0x60
 8006f62:	d004      	beq.n	8006f6e <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x6e>
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			nvicDisableInterrupt(TIM1_TRG_COM_IRQn);
		}
		
		if (interrupt & 
 8006f6e:	f010 0f1e 	tst.w	r0, #30
 8006f72:	d004      	beq.n	8006f7e <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x7e>
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006f7e:	4770      	bx	lr
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x98>)
 8006f82:	0111      	lsls	r1, r2, #4
 8006f84:	f883 1318 	strb.w	r1, [r3, #792]	; 0x318
		if (interrupt & INTERRUPT_BREAK) {
			NVIC_SetPriority(TIM1_BRK_IRQn, priority);
			nvicEnableInterrupt(TIM1_BRK_IRQn);
		}
		
		if (interrupt & (INTERRUPT_COM | INTERRUPT_TRIGGER)) {
 8006f88:	f010 0f60 	tst.w	r0, #96	; 0x60
// below are constant the compiler is able to calculate everything at
// compile time.
static ALWAYS_INLINE void
nvicEnableInterrupt(IRQn_Type IRQn)
{
	NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8006f8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006f90:	6019      	str	r1, [r3, #0]
		if (interrupt & INTERRUPT_BREAK) {
			NVIC_SetPriority(TIM1_BRK_IRQn, priority);
			nvicEnableInterrupt(TIM1_BRK_IRQn);
		}
		
		if (interrupt & (INTERRUPT_COM | INTERRUPT_TRIGGER)) {
 8006f92:	d0cb      	beq.n	8006f2c <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x2c>
 8006f94:	e7c3      	b.n	8006f1e <_ZN4xpcc5stm326Timer121enableInterruptVectorENS0_19GeneralPurposeTimer9InterruptEbm+0x1e>
 8006f96:	bf00      	nop
 8006f98:	e000e100 	.word	0xe000e100

08006f9c <_ZN4xpcc5stm326Timer36enableEv>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer3::enable()
{
	// enable clock
	RCC->APB1ENR  |=  RCC_APB1ENR_TIM3EN;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <_ZN4xpcc5stm326Timer36enableEv+0x1c>)
 8006f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fa0:	f042 0202 	orr.w	r2, r2, #2
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
	
	// reset timer
	RCC->APB1RSTR |=  RCC_APB1RSTR_TIM3RST;
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	f042 0202 	orr.w	r2, r2, #2
 8006fac:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM3RST;
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	f022 0202 	bic.w	r2, r2, #2
 8006fb4:	621a      	str	r2, [r3, #32]
 8006fb6:	4770      	bx	lr
 8006fb8:	40023800 	.word	0x40023800

08006fbc <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer3::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode)
{
 8006fbc:	b470      	push	{r4, r5, r6}
	// disable timer
	TIM3->CR1 = 0;
 8006fbe:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x38>)
	TIM3->CR2 = 0;
	
	if (slaveMode == SLAVE_ENCODER_1 || \
 8006fc0:	1e4e      	subs	r6, r1, #1
xpcc::stm32::Timer3::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode)
{
	// disable timer
	TIM3->CR1 = 0;
 8006fc2:	2500      	movs	r5, #0
	TIM3->CR2 = 0;
	
	if (slaveMode == SLAVE_ENCODER_1 || \
 8006fc4:	2e02      	cmp	r6, #2
xpcc::stm32::Timer3::setMode(Mode mode, SlaveMode slaveMode,
		SlaveModeTrigger slaveModeTrigger, MasterMode masterMode,
		bool enableOnePulseMode)
{
	// disable timer
	TIM3->CR1 = 0;
 8006fc6:	8025      	strh	r5, [r4, #0]
	TIM3->CR2 = 0;
 8006fc8:	80a5      	strh	r5, [r4, #4]
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM3->PSC = prescaler - 1;
 8006fca:	bf98      	it	ls
 8006fcc:	8525      	strhls	r5, [r4, #40]	; 0x28
		// Prescaler has to be 1 when using the quadrature decoder
		setPrescaler(1);
	}
	
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	if(enableOnePulseMode)
 8006fce:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8006fd2:	b94c      	cbnz	r4, 8006fe8 <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x2c>
		TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | TIM_CR1_OPM | mode;
	else
		TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 8006fd4:	4c07      	ldr	r4, [pc, #28]	; (8006ff4 <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x38>)
 8006fd6:	f040 0084 	orr.w	r0, r0, #132	; 0x84
 8006fda:	8020      	strh	r0, [r4, #0]
	TIM3->CR2 = masterMode;
 8006fdc:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x38>)
	TIM3->SMCR = slaveMode | slaveModeTrigger;
 8006fde:	4311      	orrs	r1, r2
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	if(enableOnePulseMode)
		TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | TIM_CR1_OPM | mode;
	else
		TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
	TIM3->CR2 = masterMode;
 8006fe0:	8083      	strh	r3, [r0, #4]
	TIM3->SMCR = slaveMode | slaveModeTrigger;
 8006fe2:	8101      	strh	r1, [r0, #8]
}
 8006fe4:	bc70      	pop	{r4, r5, r6}
 8006fe6:	4770      	bx	lr
		setPrescaler(1);
	}
	
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	if(enableOnePulseMode)
		TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | TIM_CR1_OPM | mode;
 8006fe8:	4c02      	ldr	r4, [pc, #8]	; (8006ff4 <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x38>)
 8006fea:	f040 008c 	orr.w	r0, r0, #140	; 0x8c
 8006fee:	8020      	strh	r0, [r4, #0]
 8006ff0:	e7f4      	b.n	8006fdc <_ZN4xpcc5stm326Timer37setModeENS0_19GeneralPurposeTimer4ModeENS1_9SlaveModeENS1_16SlaveModeTriggerENS1_10MasterModeEb+0x20>
 8006ff2:	bf00      	nop
 8006ff4:	40000400 	.word	0x40000400

08006ff8 <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer3::configureOutputChannel(uint32_t channel,
		OutputCompareMode mode, Value compareValue, PinState out)
{
 8006ff8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	channel -= 1;	// 1..4 -> 0..3
	
	// disable channel
	TIM3->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));
 8006ffc:	4c1f      	ldr	r4, [pc, #124]	; (800707c <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x84>)
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer3::configureOutputChannel(uint32_t channel,
		OutputCompareMode mode, Value compareValue, PinState out)
{
	channel -= 1;	// 1..4 -> 0..3
 8006ffe:	1e45      	subs	r5, r0, #1
	
	// disable channel
	TIM3->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));
 8007000:	f8b4 c020 	ldrh.w	ip, [r4, #32]
 8007004:	00ae      	lsls	r6, r5, #2
			
			static inline void
			setCompareValue(uint32_t channel, Value value)
			{
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
				*(&TIM3->CCR1 + (channel - 1)) = value;
 8007006:	0087      	lsls	r7, r0, #2
 8007008:	f04f 080b 	mov.w	r8, #11
 800700c:	fa1f fc8c 	uxth.w	ip, ip
 8007010:	fa08 f806 	lsl.w	r8, r8, r6
 8007014:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8007018:	ea2c 0c08 	bic.w	ip, ip, r8
	setCompareValue(channel + 1, compareValue);
	
	// enable preload (the compare value is loaded at each update event)
	uint32_t flags = mode | TIM_CCMR1_OC1PE;
	
	if (channel <= 1)
 800701c:	2d01      	cmp	r5, #1
		OutputCompareMode mode, Value compareValue, PinState out)
{
	channel -= 1;	// 1..4 -> 0..3
	
	// disable channel
	TIM3->CCER &= ~((TIM_CCER_CC1NP | TIM_CCER_CC1P | TIM_CCER_CC1E) << (channel * 4));
 800701e:	f8a4 c020 	strh.w	ip, [r4, #32]
 8007022:	f8c7 2430 	str.w	r2, [r7, #1072]	; 0x430
	
	setCompareValue(channel + 1, compareValue);
	
	// enable preload (the compare value is loaded at each update event)
	uint32_t flags = mode | TIM_CCMR1_OC1PE;
 8007026:	f041 0208 	orr.w	r2, r1, #8
	
	if (channel <= 1)
 800702a:	d919      	bls.n	8007060 <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x68>
	}
	else {
		uint32_t offset = 8 * (channel - 2);
		
		flags <<= offset;
		flags |= TIM3->CCMR2 & ~(0xff << offset);
 800702c:	8ba5      	ldrh	r5, [r4, #28]
		flags |= TIM3->CCMR1 & ~(0xff << offset);
		
		TIM3->CCMR1 = flags;
	}
	else {
		uint32_t offset = 8 * (channel - 2);
 800702e:	00c0      	lsls	r0, r0, #3
 8007030:	3818      	subs	r0, #24
		
		flags <<= offset;
		flags |= TIM3->CCMR2 & ~(0xff << offset);
 8007032:	27ff      	movs	r7, #255	; 0xff
 8007034:	b2ad      	uxth	r5, r5
 8007036:	fa07 f700 	lsl.w	r7, r7, r0
		TIM3->CCMR1 = flags;
	}
	else {
		uint32_t offset = 8 * (channel - 2);
		
		flags <<= offset;
 800703a:	fa02 f200 	lsl.w	r2, r2, r0
		flags |= TIM3->CCMR2 & ~(0xff << offset);
 800703e:	ea25 0007 	bic.w	r0, r5, r7
 8007042:	4310      	orrs	r0, r2
		
		TIM3->CCMR2 = flags; 
 8007044:	83a0      	strh	r0, [r4, #28]
	}
	
	if (mode != OUTPUT_INACTIVE && out == ENABLE) {
 8007046:	b109      	cbz	r1, 800704c <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x54>
 8007048:	2b01      	cmp	r3, #1
 800704a:	d002      	beq.n	8007052 <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x5a>
		TIM3->CCER |= (TIM_CCER_CC1E) << (channel * 4);
	}
}
 800704c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8007050:	4770      	bx	lr
		
		TIM3->CCMR2 = flags; 
	}
	
	if (mode != OUTPUT_INACTIVE && out == ENABLE) {
		TIM3->CCER |= (TIM_CCER_CC1E) << (channel * 4);
 8007052:	4a0a      	ldr	r2, [pc, #40]	; (800707c <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x84>)
 8007054:	8c11      	ldrh	r1, [r2, #32]
 8007056:	fa03 f306 	lsl.w	r3, r3, r6
 800705a:	430b      	orrs	r3, r1
 800705c:	8413      	strh	r3, [r2, #32]
 800705e:	e7f5      	b.n	800704c <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x54>
	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;
		
		flags <<= offset;
		flags |= TIM3->CCMR1 & ~(0xff << offset);
 8007060:	8b20      	ldrh	r0, [r4, #24]
	// enable preload (the compare value is loaded at each update event)
	uint32_t flags = mode | TIM_CCMR1_OC1PE;
	
	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;
 8007062:	00ed      	lsls	r5, r5, #3
		
		flags <<= offset;
		flags |= TIM3->CCMR1 & ~(0xff << offset);
 8007064:	27ff      	movs	r7, #255	; 0xff
 8007066:	b280      	uxth	r0, r0
 8007068:	fa07 f705 	lsl.w	r7, r7, r5
	
	if (channel <= 1)
	{
		uint32_t offset = 8 * channel;
		
		flags <<= offset;
 800706c:	fa02 f205 	lsl.w	r2, r2, r5
		flags |= TIM3->CCMR1 & ~(0xff << offset);
 8007070:	ea20 0507 	bic.w	r5, r0, r7
 8007074:	4315      	orrs	r5, r2
		
		TIM3->CCMR1 = flags;
 8007076:	8325      	strh	r5, [r4, #24]
 8007078:	e7e5      	b.n	8007046 <_ZN4xpcc5stm326Timer322configureOutputChannelEmNS0_19GeneralPurposeTimer17OutputCompareModeEtNS2_8PinStateE+0x4e>
 800707a:	bf00      	nop
 800707c:	40000400 	.word	0x40000400

08007080 <_ZN4xpcc5stm326Timer66enableEv>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer6::enable()
{
	// enable clock
	RCC->APB1ENR  |=  RCC_APB1ENR_TIM6EN;
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <_ZN4xpcc5stm326Timer66enableEv+0x1c>)
 8007082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007084:	f042 0210 	orr.w	r2, r2, #16
 8007088:	641a      	str	r2, [r3, #64]	; 0x40
	
	// reset timer
	RCC->APB1RSTR |=  RCC_APB1RSTR_TIM6RST;
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	f042 0210 	orr.w	r2, r2, #16
 8007090:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM6RST;
 8007092:	6a1a      	ldr	r2, [r3, #32]
 8007094:	f022 0210 	bic.w	r2, r2, #16
 8007098:	621a      	str	r2, [r3, #32]
 800709a:	4770      	bx	lr
 800709c:	40023800 	.word	0x40023800

080070a0 <_ZN4xpcc5stm326Timer67setModeENS0_10BasicTimer4ModeE>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer6::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM6->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 80070a0:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <_ZN4xpcc5stm326Timer67setModeENS0_10BasicTimer4ModeE+0x10>)
 80070a2:	f040 0084 	orr.w	r0, r0, #132	; 0x84
	TIM6->CR2 = 0;
 80070a6:	2200      	movs	r2, #0
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer6::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM6->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 80070a8:	8018      	strh	r0, [r3, #0]
	TIM6->CR2 = 0;
 80070aa:	809a      	strh	r2, [r3, #4]
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40001000 	.word	0x40001000

080070b4 <_ZN4xpcc5stm326Timer69setPeriodEmb>:
	// unequal to zero)
#if defined(STM32F2XX)
#warning "Check if these values are correct!"
	uint32_t cycles = microseconds * 60;	// APB1 clock * 2 in MHz = 30 * 2 = 60
#elif defined(STM32F4XX)
	uint32_t cycles = microseconds * 84;	// APB1 clock * 2 in MHz = 42 * 2 = 84
 80070b4:	2354      	movs	r3, #84	; 0x54
 80070b6:	fb03 f000 	mul.w	r0, r3, r0
	uint32_t cycles = microseconds * (
		((STM32_APB1_FREQUENCY == STM32_AHB_FREQUENCY) ? 1 : 2) * 
			STM32_APB1_FREQUENCY / 1000000UL);
#endif
	
	uint16_t prescaler = (cycles + 65535) / 65536;	// always round up
 80070ba:	f500 437f 	add.w	r3, r0, #65280	; 0xff00
 80070be:	33ff      	adds	r3, #255	; 0xff
 80070c0:	0c1a      	lsrs	r2, r3, #16
	uint16_t overflow = cycles / prescaler;
 80070c2:	fbb0 f0f2 	udiv	r0, r0, r2
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM6->PSC = prescaler - 1;
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <_ZN4xpcc5stm326Timer69setPeriodEmb+0x2c>)
	
	overflow = overflow - 1;	// e.g. 36000 cycles are from 0 to 35999
 80070c8:	3801      	subs	r0, #1
 80070ca:	3a01      	subs	r2, #1
 80070cc:	b280      	uxth	r0, r0
 80070ce:	851a      	strh	r2, [r3, #40]	; 0x28
			}
			
			static inline void
			setOverflow(uint16_t overflow)
			{
				TIM6->ARR = overflow;
 80070d0:	62d8      	str	r0, [r3, #44]	; 0x2c
	
	setPrescaler(prescaler);
	setOverflow(overflow);
	
	if (autoApply) {
 80070d2:	b121      	cbz	r1, 80070de <_ZN4xpcc5stm326Timer69setPeriodEmb+0x2a>
		// Generate Update Event to apply the new settings for ARR
		TIM6->EGR |= TIM_EGR_UG;
 80070d4:	8a9a      	ldrh	r2, [r3, #20]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	f042 0201 	orr.w	r2, r2, #1
 80070dc:	829a      	strh	r2, [r3, #20]
	}
	
	return overflow;
}
 80070de:	4770      	bx	lr
 80070e0:	40001000 	.word	0x40001000

080070e4 <_ZN4xpcc5stm326Timer621enableInterruptVectorEbm>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer6::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable)
 80070e4:	b928      	cbnz	r0, 80070f2 <_ZN4xpcc5stm326Timer621enableInterruptVectorEbm+0xe>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <_ZN4xpcc5stm326Timer621enableInterruptVectorEbm+0x20>)
 80070e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80070ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80070f0:	4770      	bx	lr
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80070f2:	4b04      	ldr	r3, [pc, #16]	; (8007104 <_ZN4xpcc5stm326Timer621enableInterruptVectorEbm+0x20>)
 80070f4:	0109      	lsls	r1, r1, #4
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80070f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80070fa:	f883 1336 	strb.w	r1, [r3, #822]	; 0x336
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80070fe:	605a      	str	r2, [r3, #4]
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	e000e100 	.word	0xe000e100

08007108 <_ZN4xpcc5stm326Timer76enableEv>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer7::enable()
{
	// enable clock
	RCC->APB1ENR  |=  RCC_APB1ENR_TIM7EN;
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <_ZN4xpcc5stm326Timer76enableEv+0x1c>)
 800710a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800710c:	f042 0220 	orr.w	r2, r2, #32
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
	
	// reset timer
	RCC->APB1RSTR |=  RCC_APB1RSTR_TIM7RST;
 8007112:	6a1a      	ldr	r2, [r3, #32]
 8007114:	f042 0220 	orr.w	r2, r2, #32
 8007118:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM7RST;
 800711a:	6a1a      	ldr	r2, [r3, #32]
 800711c:	f022 0220 	bic.w	r2, r2, #32
 8007120:	621a      	str	r2, [r3, #32]
 8007122:	4770      	bx	lr
 8007124:	40023800 	.word	0x40023800

08007128 <_ZN4xpcc5stm326Timer77setModeENS0_10BasicTimer4ModeE>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer7::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM7->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <_ZN4xpcc5stm326Timer77setModeENS0_10BasicTimer4ModeE+0x10>)
 800712a:	f040 0084 	orr.w	r0, r0, #132	; 0x84
	TIM7->CR2 = 0;
 800712e:	2200      	movs	r2, #0
// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer7::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM7->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | mode;
 8007130:	8018      	strh	r0, [r3, #0]
	TIM7->CR2 = 0;
 8007132:	809a      	strh	r2, [r3, #4]
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40001400 	.word	0x40001400

0800713c <_ZN4xpcc5stm326Timer79setPeriodEmb>:
	// unequal to zero)
#if defined(STM32F2XX)
#warning "Check if these values are correct!"
	uint32_t cycles = microseconds * 60;	// APB1 clock * 2 in MHz = 30 * 2 = 60
#elif defined(STM32F4XX)
	uint32_t cycles = microseconds * 84;	// APB1 clock * 2 in MHz = 42 * 2 = 84
 800713c:	2354      	movs	r3, #84	; 0x54
 800713e:	fb03 f000 	mul.w	r0, r3, r0
	uint32_t cycles = microseconds * (
		((STM32_APB1_FREQUENCY == STM32_AHB_FREQUENCY) ? 1 : 2) * 
			STM32_APB1_FREQUENCY / 1000000UL);
#endif
	
	uint16_t prescaler = (cycles + 65535) / 65536;	// always round up
 8007142:	f500 437f 	add.w	r3, r0, #65280	; 0xff00
 8007146:	33ff      	adds	r3, #255	; 0xff
 8007148:	0c1a      	lsrs	r2, r3, #16
	uint16_t overflow = cycles / prescaler;
 800714a:	fbb0 f0f2 	udiv	r0, r0, r2
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM7->PSC = prescaler - 1;
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <_ZN4xpcc5stm326Timer79setPeriodEmb+0x2c>)
	
	overflow = overflow - 1;	// e.g. 36000 cycles are from 0 to 35999
 8007150:	3801      	subs	r0, #1
 8007152:	3a01      	subs	r2, #1
 8007154:	b280      	uxth	r0, r0
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
			}
			
			static inline void
			setOverflow(uint16_t overflow)
			{
				TIM7->ARR = overflow;
 8007158:	62d8      	str	r0, [r3, #44]	; 0x2c
	
	setPrescaler(prescaler);
	setOverflow(overflow);
	
	if (autoApply) {
 800715a:	b121      	cbz	r1, 8007166 <_ZN4xpcc5stm326Timer79setPeriodEmb+0x2a>
		// Generate Update Event to apply the new settings for ARR
		TIM7->EGR |= TIM_EGR_UG;
 800715c:	8a9a      	ldrh	r2, [r3, #20]
 800715e:	b292      	uxth	r2, r2
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	829a      	strh	r2, [r3, #20]
	}
	
	return overflow;
}
 8007166:	4770      	bx	lr
 8007168:	40001400 	.word	0x40001400

0800716c <_ZN4xpcc5stm326Timer721enableInterruptVectorEbm>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::Timer7::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable)
 800716c:	b928      	cbnz	r0, 800717a <_ZN4xpcc5stm326Timer721enableInterruptVectorEbm+0xe>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <_ZN4xpcc5stm326Timer721enableInterruptVectorEbm+0x20>)
 8007170:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007178:	4770      	bx	lr
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <_ZN4xpcc5stm326Timer721enableInterruptVectorEbm+0x20>)
 800717c:	0109      	lsls	r1, r1, #4
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800717e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007182:	f883 1337 	strb.w	r1, [r3, #823]	; 0x337
    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8007186:	605a      	str	r2, [r3, #4]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	e000e100 	.word	0xe000e100

08007190 <_ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart2::configurePins(Mapping mapping)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8007190:	4b37      	ldr	r3, [pc, #220]	; (8007270 <_ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE+0xe0>)
 8007192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007194:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
	
	// Initialize IO pins
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
	if (mapping == REMAP_PA2_PA3) {
 800719a:	2800      	cmp	r0, #0
 800719c:	d033      	beq.n	8007206 <_ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE+0x76>
namespace
{
	GPIO__OUTPUT(TxdA2, A, 2);
	GPIO__INPUT(RxdA3, A, 3);
	
	GPIO__OUTPUT(TxdD5, D, 5);
 800719e:	4b35      	ldr	r3, [pc, #212]	; (8007274 <_ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE+0xe4>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071aa:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 80071ac:	6a1a      	ldr	r2, [r3, #32]
				tmp &= ~(0xf << (N * 4));
 80071ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
				tmp |= m << (N * 4);
 80071b2:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 80071b6:	621a      	str	r2, [r3, #32]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	f022 0220 	bic.w	r2, r2, #32
 80071be:	605a      	str	r2, [r3, #4]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071d2:	60da      	str	r2, [r3, #12]
	GPIO__INPUT(RxdD6, D, 6);
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80071da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071de:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 80071e0:	6a1a      	ldr	r2, [r3, #32]
				tmp &= ~(0xf << (N * 4));
 80071e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
				tmp |= m << (N * 4);
 80071e6:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 80071ea:	621a      	str	r2, [r3, #32]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007202:	60da      	str	r2, [r3, #12]
 8007204:	4770      	bx	lr
	static bool isBlocking = true;
}

namespace
{
	GPIO__OUTPUT(TxdA2, A, 2);
 8007206:	f5a3 5360 	sub.w	r3, r3, #14336	; 0x3800
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007210:	f042 0220 	orr.w	r2, r2, #32
 8007214:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 8007216:	6a1a      	ldr	r2, [r3, #32]
				tmp &= ~(0xf << (N * 4));
 8007218:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
				tmp |= m << (N * 4);
 800721c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 8007220:	621a      	str	r2, [r3, #32]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	f022 0204 	bic.w	r2, r2, #4
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007230:	f042 0210 	orr.w	r2, r2, #16
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800723c:	60da      	str	r2, [r3, #12]
	GPIO__INPUT(RxdA3, A, 3);
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007248:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N>
		struct AlternateMode<P, N, false> {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0];
 800724a:	6a1a      	ldr	r2, [r3, #32]
				tmp &= ~(0xf << (N * 4));
 800724c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
				tmp |= m << (N * 4);
 8007250:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[0] = tmp;
 8007254:	621a      	str	r2, [r3, #32]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	f022 0208 	bic.w	r2, r2, #8
 800725c:	605a      	str	r2, [r3, #4]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	4770      	bx	lr
 8007270:	40023800 	.word	0x40023800
 8007274:	40020c00 	.word	0x40020c00

08007278 <USART2_IRQHandler>:

extern "C" void
USART2_IRQHandler()
{

	uint32_t state = USART2_SR;
 8007278:	4a1a      	ldr	r2, [pc, #104]	; (80072e4 <USART2_IRQHandler+0x6c>)
 800727a:	8813      	ldrh	r3, [r2, #0]
	
	// Read Data Register not empty 
	if (state & USART_SR_RXNE)
 800727c:	f003 0120 	and.w	r1, r3, #32
 8007280:	b289      	uxth	r1, r1
		USART2->DR
#endif

extern "C" void
USART2_IRQHandler()
{
 8007282:	b430      	push	{r4, r5}

	uint32_t state = USART2_SR;
	
	// Read Data Register not empty 
	if (state & USART_SR_RXNE)
 8007284:	b171      	cbz	r1, 80072a4 <USART2_IRQHandler+0x2c>

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::push(const T& value)
{
	Index tmphead = this->head + 1;
 8007286:	4918      	ldr	r1, [pc, #96]	; (80072e8 <USART2_IRQHandler+0x70>)
	{
		// First save the errors TODO
		// error |= USART2_STATUS & (USART_FERR_bm | USART_BUFOVF_bm | USART_PERR_bm);
		
		// Then read the buffer (read from DR clears the RXNE flag)
		uint8_t data = USART2_RDR;
 8007288:	8895      	ldrh	r5, [r2, #4]
 800728a:	8808      	ldrh	r0, [r1, #0]
	if (tmphead >= (N+1)) {
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 800728c:	884c      	ldrh	r4, [r1, #2]

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::push(const T& value)
{
	Index tmphead = this->head + 1;
 800728e:	1c42      	adds	r2, r0, #1
 8007290:	b292      	uxth	r2, r2
	if (tmphead >= (N+1)) {
		tmphead = 0;
 8007292:	2aff      	cmp	r2, #255	; 0xff
 8007294:	bf88      	it	hi
 8007296:	2200      	movhi	r2, #0
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 8007298:	b2a4      	uxth	r4, r4
 800729a:	4294      	cmp	r4, r2
 800729c:	d002      	beq.n	80072a4 <USART2_IRQHandler+0x2c>
		return false;
	}
	else {
		this->buffer[this->head] = value;
 800729e:	1808      	adds	r0, r1, r0
		this->head = tmphead;
 80072a0:	800a      	strh	r2, [r1, #0]
 80072a2:	7105      	strb	r5, [r0, #4]
		
		rxBuffer.push(data);
	}
	
	// Transmit Data Register empty
	if (state & USART_SR_TXE)
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	b18b      	cbz	r3, 80072d0 <USART2_IRQHandler+0x58>
	{
		if (txBuffer.isEmpty())
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <USART2_IRQHandler+0x74>)

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::isEmpty() const
{
	return (xpcc::accessor::asVolatile(this->head) == xpcc::accessor::asVolatile(this->tail));
 80072ae:	8819      	ldrh	r1, [r3, #0]
 80072b0:	885a      	ldrh	r2, [r3, #2]
 80072b2:	b289      	uxth	r1, r1
 80072b4:	b292      	uxth	r2, r2
 80072b6:	4291      	cmp	r1, r2
 80072b8:	d00c      	beq.n	80072d4 <USART2_IRQHandler+0x5c>

template<typename T, std::size_t N>
ALWAYS_INLINE const T&
xpcc::atomic::Queue<T, N>::get() const
{
	return this->buffer[this->tail];
 80072ba:	885a      	ldrh	r2, [r3, #2]
			USART2->CR1 &= ~USART_CR1_TXEIE;
		}
		else {
			// get one byte from buffer and write it to the UART buffer
			// which starts the transmission
			USART2_TDR = txBuffer.get();
 80072bc:	1899      	adds	r1, r3, r2

template<typename T, std::size_t N>
ALWAYS_INLINE void
xpcc::atomic::Queue<T, N>::pop()
{
	Index tmptail = this->tail + 1;
 80072be:	3201      	adds	r2, #1
 80072c0:	7908      	ldrb	r0, [r1, #4]
 80072c2:	4908      	ldr	r1, [pc, #32]	; (80072e4 <USART2_IRQHandler+0x6c>)
 80072c4:	b292      	uxth	r2, r2
	if (tmptail >= (N+1)) {
		tmptail = 0;
 80072c6:	2aff      	cmp	r2, #255	; 0xff
 80072c8:	bf88      	it	hi
 80072ca:	2200      	movhi	r2, #0
 80072cc:	8088      	strh	r0, [r1, #4]
	}
	this->tail = tmptail;
 80072ce:	805a      	strh	r2, [r3, #2]
			txBuffer.pop();
		}
	}
}
 80072d0:	bc30      	pop	{r4, r5}
 80072d2:	4770      	bx	lr
	if (state & USART_SR_TXE)
	{
		if (txBuffer.isEmpty())
		{
			// transmission finished, disable DRE interrupt
			USART2->CR1 &= ~USART_CR1_TXEIE;
 80072d4:	4a03      	ldr	r2, [pc, #12]	; (80072e4 <USART2_IRQHandler+0x6c>)
 80072d6:	8993      	ldrh	r3, [r2, #12]
 80072d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	8193      	strh	r3, [r2, #12]
 80072e2:	e7f5      	b.n	80072d0 <USART2_IRQHandler+0x58>
 80072e4:	40004400 	.word	0x40004400
 80072e8:	20001558 	.word	0x20001558
 80072ec:	20001454 	.word	0x20001454

080072f0 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart2::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80072f2:	4e13      	ldr	r6, [pc, #76]	; (8007340 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x50>)
	
	isBlocking = blocking;
 80072f4:	4d13      	ldr	r5, [pc, #76]	; (8007344 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x54>)
void
xpcc::stm32::BufferedUsart2::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80072f6:	6c37      	ldr	r7, [r6, #64]	; 0x40
	
	isBlocking = blocking;
	
	USART2->CR1 = 0;
 80072f8:	4c13      	ldr	r4, [pc, #76]	; (8007348 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x58>)
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x5c>)
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
	
	isBlocking = blocking;
 80072fc:	702a      	strb	r2, [r5, #0]
 80072fe:	0109      	lsls	r1, r1, #4
	
	USART2->CR1 = 0;
 8007300:	2500      	movs	r5, #0
	
	// Set vector priority
	NVIC_SetPriority(USART2_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART2_IRQn / 32] = 1 << (USART2_IRQn & 0x1F);
 8007302:	2240      	movs	r2, #64	; 0x40
void
xpcc::stm32::BufferedUsart2::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8007304:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000
 8007308:	6437      	str	r7, [r6, #64]	; 0x40
	
	isBlocking = blocking;
	
	USART2->CR1 = 0;
 800730a:	81a5      	strh	r5, [r4, #12]
 800730c:	f883 1326 	strb.w	r1, [r3, #806]	; 0x326
	
	// Set vector priority
	NVIC_SetPriority(USART2_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART2_IRQn / 32] = 1 << (USART2_IRQn & 0x1F);
 8007310:	605a      	str	r2, [r3, #4]
	
	USART2->CR1 |= USART_CR1_RXNEIE;
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f043 0320 	orr.w	r3, r3, #32

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart2::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
 800731a:	4601      	mov	r1, r0
	NVIC_SetPriority(USART2_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART2_IRQn / 32] = 1 << (USART2_IRQn & 0x1F);
	
	USART2->CR1 |= USART_CR1_RXNEIE;
 800731c:	81a3      	strh	r3, [r4, #12]
	
	// Set baudrate
	USART2->BRR = calculateBaudrateSettings(apbClk, baudrate);
 800731e:	480c      	ldr	r0, [pc, #48]	; (8007350 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x60>)
 8007320:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <_ZN4xpcc5stm3214BufferedUsart211setBaudrateEmmb+0x64>)
 8007322:	4798      	blx	r3
 8007324:	8120      	strh	r0, [r4, #8]
	
	// Transmitter & Receiver-Enable, 8 Data Bits, 1 Stop Bit
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f043 030c 	orr.w	r3, r3, #12
 800732e:	81a3      	strh	r3, [r4, #12]
	USART2->CR2 = 0;
 8007330:	8225      	strh	r5, [r4, #16]
	USART2->CR3 = 0;
 8007332:	82a5      	strh	r5, [r4, #20]
	
	USART2->CR1 |= USART_CR1_UE;		// Uart Enable
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007340:	40023800 	.word	0x40023800
 8007344:	20000154 	.word	0x20000154
 8007348:	40004400 	.word	0x40004400
 800734c:	e000e100 	.word	0xe000e100
 8007350:	0280de80 	.word	0x0280de80
 8007354:	08007e9d 	.word	0x08007e9d

08007358 <_ZN4xpcc5stm3214BufferedUsart25writeEh>:
}

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart2::write(uint8_t c)
{
 8007358:	b470      	push	{r4, r5, r6}
 800735a:	4d12      	ldr	r5, [pc, #72]	; (80073a4 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x4c>)
 800735c:	882e      	ldrh	r6, [r5, #0]
 800735e:	1c71      	adds	r1, r6, #1
 8007360:	b289      	uxth	r1, r1
{
	Index tmphead = this->head + 1;
	if (tmphead >= (N+1)) {
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 8007362:	886c      	ldrh	r4, [r5, #2]
	while ( !txBuffer.push(c) ) {
 8007364:	4a0f      	ldr	r2, [pc, #60]	; (80073a4 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x4c>)
template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::push(const T& value)
{
	Index tmphead = this->head + 1;
	if (tmphead >= (N+1)) {
 8007366:	29ff      	cmp	r1, #255	; 0xff
 8007368:	bf94      	ite	ls
 800736a:	460b      	movls	r3, r1
 800736c:	2300      	movhi	r3, #0
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 800736e:	b2a4      	uxth	r4, r4
 8007370:	429c      	cmp	r4, r3
 8007372:	d011      	beq.n	8007398 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x40>
		return false;
	}
	else {
		this->buffer[this->head] = value;
 8007374:	1991      	adds	r1, r2, r6
		this->head = tmphead;
 8007376:	8013      	strh	r3, [r2, #0]
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
		return false;
	}
	else {
		this->buffer[this->head] = value;
 8007378:	7108      	strb	r0, [r1, #4]
		uint32_t mask = 1;
		asm volatile (
				"mrs %0, PRIMASK"	"\n\t"
				"msr PRIMASK, %1"
				: "=&r" (cpsr)
				: "r" (mask));
 800737a:	2301      	movs	r3, #1
 800737c:	f3ef 8210 	mrs	r2, PRIMASK
 8007380:	f383 8810 	msr	PRIMASK, r3
	
	// Disable interrupts while enabling the transmit interrupt
	atomic::Lock lock;
	
	// Transmit Data Register Empty Interrupt Enable
	USART2->CR1 |= USART_CR1_TXEIE;
 8007384:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x50>)
 8007386:	8999      	ldrh	r1, [r3, #12]
 8007388:	b289      	uxth	r1, r1
 800738a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800738e:	8199      	strh	r1, [r3, #12]
	}

	xpcc::atomic::Lock::~Lock()
	{
		asm volatile ("msr PRIMASK, %0" : : "r" (cpsr) );
 8007390:	f382 8810 	msr	PRIMASK, r2
}
 8007394:	bc70      	pop	{r4, r5, r6}
 8007396:	4770      	bx	lr
// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart2::write(uint8_t c)
{
	while ( !txBuffer.push(c) ) {
		if (!isBlocking) {
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x54>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e0      	bne.n	8007362 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0xa>
 80073a0:	e7f8      	b.n	8007394 <_ZN4xpcc5stm3214BufferedUsart25writeEh+0x3c>
 80073a2:	bf00      	nop
 80073a4:	20001454 	.word	0x20001454
 80073a8:	40004400 	.word	0x40004400
 80073ac:	20000154 	.word	0x20000154

080073b0 <_ZN4xpcc5stm3214BufferedUsart24readERh>:

// ----------------------------------------------------------------------------
bool
xpcc::stm32::BufferedUsart2::read(uint8_t& c)
{
	if (rxBuffer.isEmpty()) {
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <_ZN4xpcc5stm3214BufferedUsart24readERh+0x2c>)

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::isEmpty() const
{
	return (xpcc::accessor::asVolatile(this->head) == xpcc::accessor::asVolatile(this->tail));
 80073b2:	8819      	ldrh	r1, [r3, #0]
 80073b4:	885a      	ldrh	r2, [r3, #2]
 80073b6:	b289      	uxth	r1, r1
 80073b8:	b292      	uxth	r2, r2
 80073ba:	4291      	cmp	r1, r2
 80073bc:	d00b      	beq.n	80073d6 <_ZN4xpcc5stm3214BufferedUsart24readERh+0x26>

template<typename T, std::size_t N>
ALWAYS_INLINE const T&
xpcc::atomic::Queue<T, N>::get() const
{
	return this->buffer[this->tail];
 80073be:	885a      	ldrh	r2, [r3, #2]
		return false;
	}
	else {
		c = rxBuffer.get();
 80073c0:	1899      	adds	r1, r3, r2

template<typename T, std::size_t N>
ALWAYS_INLINE void
xpcc::atomic::Queue<T, N>::pop()
{
	Index tmptail = this->tail + 1;
 80073c2:	3201      	adds	r2, #1
 80073c4:	7909      	ldrb	r1, [r1, #4]
 80073c6:	b292      	uxth	r2, r2
	if (tmptail >= (N+1)) {
		tmptail = 0;
 80073c8:	2aff      	cmp	r2, #255	; 0xff
 80073ca:	bf88      	it	hi
 80073cc:	2200      	movhi	r2, #0
 80073ce:	7001      	strb	r1, [r0, #0]
	}
	this->tail = tmptail;
 80073d0:	805a      	strh	r2, [r3, #2]
		rxBuffer.pop();
		
		return true;
 80073d2:	2001      	movs	r0, #1
 80073d4:	4770      	bx	lr
// ----------------------------------------------------------------------------
bool
xpcc::stm32::BufferedUsart2::read(uint8_t& c)
{
	if (rxBuffer.isEmpty()) {
		return false;
 80073d6:	2000      	movs	r0, #0
		c = rxBuffer.get();
		rxBuffer.pop();
		
		return true;
	}
}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20001558 	.word	0x20001558

080073e0 <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE>:

#include <xpcc/architecture/detect.hpp>

template<typename T, std::size_t N>
xpcc::atomic::Queue<T, N>::Queue() :
	head(0), tail(0)
 80073e0:	4903      	ldr	r1, [pc, #12]	; (80073f0 <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE+0x10>)
 80073e2:	4a04      	ldr	r2, [pc, #16]	; (80073f4 <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart213configurePinsENS1_7MappingE+0x14>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	800b      	strh	r3, [r1, #0]
 80073e8:	804b      	strh	r3, [r1, #2]
 80073ea:	8013      	strh	r3, [r2, #0]
 80073ec:	8053      	strh	r3, [r2, #2]
 80073ee:	4770      	bx	lr
 80073f0:	20001558 	.word	0x20001558
 80073f4:	20001454 	.word	0x20001454

080073f8 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE>:
// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::configurePins(Mapping mapping)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0xe8>)
 80073fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
	
	// Initialize IO pins
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
	if (mapping == REMAP_PB10_PB11) {
 8007402:	2800      	cmp	r0, #0
 8007404:	d035      	beq.n	8007472 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0x7a>
		TxdB10::setAlternateFunction(AF_USART3, xpcc::stm32::PUSH_PULL);
		RxdB11::setAlternateFunction(AF_USART3);
	}
	else if (mapping == REMAP_PC10_PC11) {
 8007406:	2801      	cmp	r0, #1
 8007408:	d068      	beq.n	80074dc <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0xe4>
namespace
{
	GPIO__OUTPUT(TxdB10, B, 10);
	GPIO__INPUT(RxdB11, B, 11);
	
	GPIO__OUTPUT(TxdD8, D, 8);
 800740a:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0xec>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007412:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007416:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 8007418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 800741a:	f022 020f 	bic.w	r2, r2, #15
				tmp |= (m << ((N - 8) * 4));
 800741e:	f042 0207 	orr.w	r2, r2, #7
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 8007422:	625a      	str	r2, [r3, #36]	; 0x24
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800742a:	605a      	str	r2, [r3, #4]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007432:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800743e:	60da      	str	r2, [r3, #12]
	GPIO__INPUT(RxdD9, D, 9);
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007446:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800744a:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 800744c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 800744e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
				tmp |= (m << ((N - 8) * 4));
 8007452:	f042 0270 	orr.w	r2, r2, #112	; 0x70
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 8007456:	625a      	str	r2, [r3, #36]	; 0x24
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800745e:	605a      	str	r2, [r3, #4]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007466:	609a      	str	r2, [r3, #8]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800746e:	60da      	str	r2, [r3, #12]
 8007470:	4770      	bx	lr
	static bool isBlocking = true;
}

namespace
{
	GPIO__OUTPUT(TxdB10, B, 10);
 8007472:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
	GPIO__INPUT(RxdB11, B, 11);
	
	GPIO__OUTPUT(TxdD8, D, 8);
	GPIO__INPUT(RxdD9, D, 9);
	
	GPIO__OUTPUT(TxdC10, C, 10);
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800747c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007480:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 8007482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 8007484:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
				tmp |= (m << ((N - 8) * 4));
 8007488:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 800748c:	625a      	str	r2, [r3, #36]	; 0x24
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800749c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074a0:	609a      	str	r2, [r3, #8]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80074a8:	60da      	str	r2, [r3, #12]
	GPIO__INPUT(RxdC11, C, 11);
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80074b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80074b4:	601a      	str	r2, [r3, #0]
		
		/** \internal */
		template<unsigned int P, unsigned char N, bool = (N >= 8)>
		struct AlternateMode {
			ALWAYS_INLINE static void setMode(AlternateFunction m) {
				uint32_t tmp = reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1];
 80074b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				tmp &= ~(0xf << ((N - 8) * 4));
 80074b8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
				tmp |= (m << ((N - 8) * 4));
 80074bc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
				reinterpret_cast<GPIO_TypeDef*>(P)->AFR[1] = tmp;
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80074d0:	609a      	str	r2, [r3, #8]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	4770      	bx	lr
	GPIO__INPUT(RxdB11, B, 11);
	
	GPIO__OUTPUT(TxdD8, D, 8);
	GPIO__INPUT(RxdD9, D, 9);
	
	GPIO__OUTPUT(TxdC10, C, 10);
 80074dc:	4b02      	ldr	r3, [pc, #8]	; (80074e8 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0xf0>)
 80074de:	e7ca      	b.n	8007476 <_ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0x7e>
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40020c00 	.word	0x40020c00
 80074e8:	40020800 	.word	0x40020800

080074ec <USART3_IRQHandler>:

extern "C" void
USART3_IRQHandler()
{

	uint32_t state = USART3_SR;
 80074ec:	4b15      	ldr	r3, [pc, #84]	; (8007544 <USART3_IRQHandler+0x58>)
//ugly hack
#include "/home/jonas/3dLaserProfilometer/microcontroller/laserInterface.h"

extern "C" void
USART3_IRQHandler()
{
 80074ee:	b510      	push	{r4, lr}

	uint32_t state = USART3_SR;
 80074f0:	881c      	ldrh	r4, [r3, #0]
	
	// Read Data Register not empty 
	if (state & USART_SR_RXNE)
 80074f2:	f004 0220 	and.w	r2, r4, #32
 80074f6:	b292      	uxth	r2, r2
 80074f8:	b9b2      	cbnz	r2, 8007528 <USART3_IRQHandler+0x3c>
		//rxBuffer.push(data);
		Laser::handleChar(char(data));
	}
	
	// Transmit Data Register empty
	if (state & USART_SR_TXE)
 80074fa:	f004 0480 	and.w	r4, r4, #128	; 0x80
 80074fe:	b2a4      	uxth	r4, r4
 8007500:	b18c      	cbz	r4, 8007526 <USART3_IRQHandler+0x3a>
	{
		if (txBuffer.isEmpty())
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <USART3_IRQHandler+0x5c>)

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::isEmpty() const
{
	return (xpcc::accessor::asVolatile(this->head) == xpcc::accessor::asVolatile(this->tail));
 8007504:	8819      	ldrh	r1, [r3, #0]
 8007506:	885a      	ldrh	r2, [r3, #2]
 8007508:	b289      	uxth	r1, r1
 800750a:	b292      	uxth	r2, r2
 800750c:	4291      	cmp	r1, r2
 800750e:	d010      	beq.n	8007532 <USART3_IRQHandler+0x46>

template<typename T, std::size_t N>
ALWAYS_INLINE const T&
xpcc::atomic::Queue<T, N>::get() const
{
	return this->buffer[this->tail];
 8007510:	885a      	ldrh	r2, [r3, #2]
			USART3->CR1 &= ~USART_CR1_TXEIE;
		}
		else {
			// get one byte from buffer and write it to the UART buffer
			// which starts the transmission
			USART3_TDR = txBuffer.get();
 8007512:	1899      	adds	r1, r3, r2

template<typename T, std::size_t N>
ALWAYS_INLINE void
xpcc::atomic::Queue<T, N>::pop()
{
	Index tmptail = this->tail + 1;
 8007514:	3201      	adds	r2, #1
 8007516:	7908      	ldrb	r0, [r1, #4]
 8007518:	490a      	ldr	r1, [pc, #40]	; (8007544 <USART3_IRQHandler+0x58>)
 800751a:	b292      	uxth	r2, r2
	if (tmptail >= (N+1)) {
		tmptail = 0;
 800751c:	2aff      	cmp	r2, #255	; 0xff
 800751e:	bf88      	it	hi
 8007520:	2200      	movhi	r2, #0
 8007522:	8088      	strh	r0, [r1, #4]
	}
	this->tail = tmptail;
 8007524:	805a      	strh	r2, [r3, #2]
 8007526:	bd10      	pop	{r4, pc}
	{
		// First save the errors TODO
		// error |= USART3_STATUS & (USART_FERR_bm | USART_BUFOVF_bm | USART_PERR_bm);
		
		// Then read the buffer (read from DR clears the RXNE flag)
		uint8_t data = USART3_RDR;
 8007528:	8898      	ldrh	r0, [r3, #4]
		
		//rxBuffer.push(data);
		Laser::handleChar(char(data));
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <USART3_IRQHandler+0x60>)
 800752c:	b2c0      	uxtb	r0, r0
 800752e:	4798      	blx	r3
 8007530:	e7e3      	b.n	80074fa <USART3_IRQHandler+0xe>
	if (state & USART_SR_TXE)
	{
		if (txBuffer.isEmpty())
		{
			// transmission finished, disable DRE interrupt
			USART3->CR1 &= ~USART_CR1_TXEIE;
 8007532:	4a04      	ldr	r2, [pc, #16]	; (8007544 <USART3_IRQHandler+0x58>)
 8007534:	8993      	ldrh	r3, [r2, #12]
 8007536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	8193      	strh	r3, [r2, #12]
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	40004800 	.word	0x40004800
 8007548:	2000165c 	.word	0x2000165c
 800754c:	08001f69 	.word	0x08001f69

08007550 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8007552:	4e13      	ldr	r6, [pc, #76]	; (80075a0 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x50>)
	
	isBlocking = blocking;
 8007554:	4d13      	ldr	r5, [pc, #76]	; (80075a4 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x54>)
void
xpcc::stm32::BufferedUsart3::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8007556:	6c37      	ldr	r7, [r6, #64]	; 0x40
	
	isBlocking = blocking;
	
	USART3->CR1 = 0;
 8007558:	4c13      	ldr	r4, [pc, #76]	; (80075a8 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x58>)
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x5c>)
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
	
	isBlocking = blocking;
 800755c:	702a      	strb	r2, [r5, #0]
 800755e:	0109      	lsls	r1, r1, #4
	
	USART3->CR1 = 0;
 8007560:	2500      	movs	r5, #0
	
	// Set vector priority
	NVIC_SetPriority(USART3_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART3_IRQn / 32] = 1 << (USART3_IRQn & 0x1F);
 8007562:	2280      	movs	r2, #128	; 0x80
void
xpcc::stm32::BufferedUsart3::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8007564:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
 8007568:	6437      	str	r7, [r6, #64]	; 0x40
	
	isBlocking = blocking;
	
	USART3->CR1 = 0;
 800756a:	81a5      	strh	r5, [r4, #12]
 800756c:	f883 1327 	strb.w	r1, [r3, #807]	; 0x327
	
	// Set vector priority
	NVIC_SetPriority(USART3_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART3_IRQn / 32] = 1 << (USART3_IRQn & 0x1F);
 8007570:	605a      	str	r2, [r3, #4]
	
	USART3->CR1 |= USART_CR1_RXNEIE;
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f043 0320 	orr.w	r3, r3, #32

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::setBaudrate(uint32_t baudrate,
		uint32_t interruptPriority, bool blocking)
{
 800757a:	4601      	mov	r1, r0
	NVIC_SetPriority(USART3_IRQn, interruptPriority);
	
	// Enable USART in the interrupt controller and enable receive ready interrupt
	NVIC->ISER[USART3_IRQn / 32] = 1 << (USART3_IRQn & 0x1F);
	
	USART3->CR1 |= USART_CR1_RXNEIE;
 800757c:	81a3      	strh	r3, [r4, #12]
	
	// Set baudrate
	USART3->BRR = calculateBaudrateSettings(apbClk, baudrate);
 800757e:	480c      	ldr	r0, [pc, #48]	; (80075b0 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x60>)
 8007580:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <_ZN4xpcc5stm3214BufferedUsart311setBaudrateEmmb+0x64>)
 8007582:	4798      	blx	r3
 8007584:	8120      	strh	r0, [r4, #8]
	
	// Transmitter & Receiver-Enable, 8 Data Bits, 1 Stop Bit
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f043 030c 	orr.w	r3, r3, #12
 800758e:	81a3      	strh	r3, [r4, #12]
	USART3->CR2 = 0;
 8007590:	8225      	strh	r5, [r4, #16]
	USART3->CR3 = 0;
 8007592:	82a5      	strh	r5, [r4, #20]
	
	USART3->CR1 |= USART_CR1_UE;		// Uart Enable
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a0:	40023800 	.word	0x40023800
 80075a4:	20000155 	.word	0x20000155
 80075a8:	40004800 	.word	0x40004800
 80075ac:	e000e100 	.word	0xe000e100
 80075b0:	0280de80 	.word	0x0280de80
 80075b4:	08007e9d 	.word	0x08007e9d

080075b8 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh>:
}

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::write(const uint8_t *s, uint8_t n)
{
 80075b8:	b4f0      	push	{r4, r5, r6, r7}
	while (n-- != 0) {
 80075ba:	e011      	b.n	80075e0 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x28>
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
		return false;
	}
	else {
		this->buffer[this->head] = value;
 80075bc:	19d1      	adds	r1, r2, r7
		this->head = tmphead;
 80075be:	8013      	strh	r3, [r2, #0]
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
		return false;
	}
	else {
		this->buffer[this->head] = value;
 80075c0:	f881 c004 	strb.w	ip, [r1, #4]
		uint32_t mask = 1;
		asm volatile (
				"mrs %0, PRIMASK"	"\n\t"
				"msr PRIMASK, %1"
				: "=&r" (cpsr)
				: "r" (mask));
 80075c4:	2301      	movs	r3, #1
 80075c6:	f3ef 8210 	mrs	r2, PRIMASK
 80075ca:	f383 8810 	msr	PRIMASK, r3
	
	// Disable interrupts while enabling the transmit interrupt
	atomic::Lock lock;
	
	// Transmit Data Register Empty Interrupt Enable
	USART3->CR1 |= USART_CR1_TXEIE;
 80075ce:	4b11      	ldr	r3, [pc, #68]	; (8007614 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x5c>)
 80075d0:	8999      	ldrh	r1, [r3, #12]
 80075d2:	b289      	uxth	r1, r1
 80075d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80075d8:	8199      	strh	r1, [r3, #12]
	}

	xpcc::atomic::Lock::~Lock()
	{
		asm volatile ("msr PRIMASK, %0" : : "r" (cpsr) );
 80075da:	f382 8810 	msr	PRIMASK, r2
 80075de:	4629      	mov	r1, r5

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::write(const uint8_t *s, uint8_t n)
{
	while (n-- != 0) {
 80075e0:	1e4d      	subs	r5, r1, #1
 80075e2:	b2ed      	uxtb	r5, r5
 80075e4:	b199      	cbz	r1, 800760e <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x56>
 80075e6:	4e0c      	ldr	r6, [pc, #48]	; (8007618 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x60>)
		write(*s++);
 80075e8:	f810 cb01 	ldrb.w	ip, [r0], #1
 80075ec:	8837      	ldrh	r7, [r6, #0]
 80075ee:	1c79      	adds	r1, r7, #1
 80075f0:	b289      	uxth	r1, r1
{
	Index tmphead = this->head + 1;
	if (tmphead >= (N+1)) {
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 80075f2:	8874      	ldrh	r4, [r6, #2]

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::write(uint8_t c)
{
	while ( !txBuffer.push(c) ) {
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x60>)
template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::push(const T& value)
{
	Index tmphead = this->head + 1;
	if (tmphead >= (N+1)) {
 80075f6:	29ff      	cmp	r1, #255	; 0xff
 80075f8:	bf94      	ite	ls
 80075fa:	460b      	movls	r3, r1
 80075fc:	2300      	movhi	r3, #0
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 80075fe:	b2a4      	uxth	r4, r4
 8007600:	429c      	cmp	r4, r3
 8007602:	d1db      	bne.n	80075bc <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x4>
		if (!isBlocking) {
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x64>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f2      	bne.n	80075f2 <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x3a>
 800760c:	e7e7      	b.n	80075de <_ZN4xpcc5stm3214BufferedUsart35writeEPKhh+0x26>
xpcc::stm32::BufferedUsart3::write(const uint8_t *s, uint8_t n)
{
	while (n-- != 0) {
		write(*s++);
	}
}
 800760e:	bcf0      	pop	{r4, r5, r6, r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40004800 	.word	0x40004800
 8007618:	2000165c 	.word	0x2000165c
 800761c:	20000155 	.word	0x20000155

08007620 <_ZN4xpcc5stm3214BufferedUsart35writeEh>:

// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::write(uint8_t c)
{
 8007620:	b470      	push	{r4, r5, r6}
 8007622:	4d12      	ldr	r5, [pc, #72]	; (800766c <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x4c>)
 8007624:	882e      	ldrh	r6, [r5, #0]
 8007626:	1c71      	adds	r1, r6, #1
 8007628:	b289      	uxth	r1, r1
 800762a:	886c      	ldrh	r4, [r5, #2]
	while ( !txBuffer.push(c) ) {
 800762c:	4a0f      	ldr	r2, [pc, #60]	; (800766c <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x4c>)
template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::push(const T& value)
{
	Index tmphead = this->head + 1;
	if (tmphead >= (N+1)) {
 800762e:	29ff      	cmp	r1, #255	; 0xff
 8007630:	bf94      	ite	ls
 8007632:	460b      	movls	r3, r1
 8007634:	2300      	movhi	r3, #0
		tmphead = 0;
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
 8007636:	b2a4      	uxth	r4, r4
 8007638:	429c      	cmp	r4, r3
 800763a:	d011      	beq.n	8007660 <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x40>
		return false;
	}
	else {
		this->buffer[this->head] = value;
 800763c:	1991      	adds	r1, r2, r6
		this->head = tmphead;
 800763e:	8013      	strh	r3, [r2, #0]
	}
	if (tmphead == xpcc::accessor::asVolatile(this->tail)) {
		return false;
	}
	else {
		this->buffer[this->head] = value;
 8007640:	7108      	strb	r0, [r1, #4]
		uint32_t mask = 1;
		asm volatile (
				"mrs %0, PRIMASK"	"\n\t"
				"msr PRIMASK, %1"
				: "=&r" (cpsr)
				: "r" (mask));
 8007642:	2301      	movs	r3, #1
 8007644:	f3ef 8210 	mrs	r2, PRIMASK
 8007648:	f383 8810 	msr	PRIMASK, r3
	
	// Disable interrupts while enabling the transmit interrupt
	atomic::Lock lock;
	
	// Transmit Data Register Empty Interrupt Enable
	USART3->CR1 |= USART_CR1_TXEIE;
 800764c:	4b08      	ldr	r3, [pc, #32]	; (8007670 <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x50>)
 800764e:	8999      	ldrh	r1, [r3, #12]
 8007650:	b289      	uxth	r1, r1
 8007652:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007656:	8199      	strh	r1, [r3, #12]
	}

	xpcc::atomic::Lock::~Lock()
	{
		asm volatile ("msr PRIMASK, %0" : : "r" (cpsr) );
 8007658:	f382 8810 	msr	PRIMASK, r2
}
 800765c:	bc70      	pop	{r4, r5, r6}
 800765e:	4770      	bx	lr
// ----------------------------------------------------------------------------
void
xpcc::stm32::BufferedUsart3::write(uint8_t c)
{
	while ( !txBuffer.push(c) ) {
		if (!isBlocking) {
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x54>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e0      	bne.n	800762a <_ZN4xpcc5stm3214BufferedUsart35writeEh+0xa>
 8007668:	e7f8      	b.n	800765c <_ZN4xpcc5stm3214BufferedUsart35writeEh+0x3c>
 800766a:	bf00      	nop
 800766c:	2000165c 	.word	0x2000165c
 8007670:	40004800 	.word	0x40004800
 8007674:	20000155 	.word	0x20000155

08007678 <_ZN4xpcc5stm3214BufferedUsart34readERh>:

// ----------------------------------------------------------------------------
bool
xpcc::stm32::BufferedUsart3::read(uint8_t& c)
{
	if (rxBuffer.isEmpty()) {
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <_ZN4xpcc5stm3214BufferedUsart34readERh+0x2c>)

template<typename T, std::size_t N>
ALWAYS_INLINE bool
xpcc::atomic::Queue<T, N>::isEmpty() const
{
	return (xpcc::accessor::asVolatile(this->head) == xpcc::accessor::asVolatile(this->tail));
 800767a:	8819      	ldrh	r1, [r3, #0]
 800767c:	885a      	ldrh	r2, [r3, #2]
 800767e:	b289      	uxth	r1, r1
 8007680:	b292      	uxth	r2, r2
 8007682:	4291      	cmp	r1, r2
 8007684:	d00b      	beq.n	800769e <_ZN4xpcc5stm3214BufferedUsart34readERh+0x26>

template<typename T, std::size_t N>
ALWAYS_INLINE const T&
xpcc::atomic::Queue<T, N>::get() const
{
	return this->buffer[this->tail];
 8007686:	885a      	ldrh	r2, [r3, #2]
		return false;
	}
	else {
		c = rxBuffer.get();
 8007688:	1899      	adds	r1, r3, r2

template<typename T, std::size_t N>
ALWAYS_INLINE void
xpcc::atomic::Queue<T, N>::pop()
{
	Index tmptail = this->tail + 1;
 800768a:	3201      	adds	r2, #1
 800768c:	7909      	ldrb	r1, [r1, #4]
 800768e:	b292      	uxth	r2, r2
	if (tmptail >= (N+1)) {
		tmptail = 0;
 8007690:	2aff      	cmp	r2, #255	; 0xff
 8007692:	bf88      	it	hi
 8007694:	2200      	movhi	r2, #0
 8007696:	7001      	strb	r1, [r0, #0]
	}
	this->tail = tmptail;
 8007698:	805a      	strh	r2, [r3, #2]
		rxBuffer.pop();
		
		return true;
 800769a:	2001      	movs	r0, #1
 800769c:	4770      	bx	lr
// ----------------------------------------------------------------------------
bool
xpcc::stm32::BufferedUsart3::read(uint8_t& c)
{
	if (rxBuffer.isEmpty()) {
		return false;
 800769e:	2000      	movs	r0, #0
		c = rxBuffer.get();
		rxBuffer.pop();
		
		return true;
	}
}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20001760 	.word	0x20001760

080076a8 <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE>:

#include <xpcc/architecture/detect.hpp>

template<typename T, std::size_t N>
xpcc::atomic::Queue<T, N>::Queue() :
	head(0), tail(0)
 80076a8:	4903      	ldr	r1, [pc, #12]	; (80076b8 <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0x10>)
 80076aa:	4a04      	ldr	r2, [pc, #16]	; (80076bc <_GLOBAL__sub_I__ZN4xpcc5stm3214BufferedUsart313configurePinsENS1_7MappingE+0x14>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	800b      	strh	r3, [r1, #0]
 80076b0:	804b      	strh	r3, [r1, #2]
 80076b2:	8013      	strh	r3, [r2, #0]
 80076b4:	8053      	strh	r3, [r2, #2]
 80076b6:	4770      	bx	lr
 80076b8:	20001760 	.word	0x20001760
 80076bc:	2000165c 	.word	0x2000165c

080076c0 <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm>:
// ----------------------------------------------------------------------------
bool
xpcc::stm32::Clock::enableHse(HseConfig config, uint32_t waitCycles)
{
	if (config == HseConfig::HSE_BYPASS) {
		RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm+0x28>)
 80076c2:	681a      	ldr	r2, [r3, #0]

// ----------------------------------------------------------------------------
bool
xpcc::stm32::Clock::enableHse(HseConfig config, uint32_t waitCycles)
{
	if (config == HseConfig::HSE_BYPASS) {
 80076c4:	2801      	cmp	r0, #1
		RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
 80076c6:	bf0c      	ite	eq
 80076c8:	f442 22a0 	orreq.w	r2, r2, #327680	; 0x50000
	}
	else {
		RCC->CR |= RCC_CR_HSEON;
 80076cc:	f442 3280 	orrne.w	r2, r2, #65536	; 0x10000
 80076d0:	601a      	str	r2, [r3, #0]
	}

	uint32_t t = waitCycles;
	while (!(RCC->CR & RCC_CR_HSERDY) && --t) {
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm+0x28>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	039b      	lsls	r3, r3, #14
 80076d8:	d401      	bmi.n	80076de <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm+0x1e>
 80076da:	3901      	subs	r1, #1
 80076dc:	d1f9      	bne.n	80076d2 <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm+0x12>
	}

	return (RCC->CR & RCC_CR_HSERDY);
 80076de:	4b02      	ldr	r3, [pc, #8]	; (80076e8 <_ZN4xpcc5stm325Clock9enableHseENS1_9HseConfigEm+0x28>)
 80076e0:	6818      	ldr	r0, [r3, #0]
}
 80076e2:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80076e6:	4770      	bx	lr
 80076e8:	40023800 	.word	0x40023800

080076ec <_ZN4xpcc5stm325Clock9enablePllENS1_9PllSourceEht>:
{
	uint32_t tmp = 0;
	
	// Read reserved values and clear all other values
	tmp |= RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <_ZN4xpcc5stm325Clock9enablePllENS1_9PllSourceEht+0x38>)

// ----------------------------------------------------------------------------
void
xpcc::stm32::Clock::enablePll(PllSource source, uint8_t pllM,
		uint16_t pllN)
{
 80076ee:	b430      	push	{r4, r5}
	uint32_t tmp = 0;
	
	// Read reserved values and clear all other values
	tmp |= RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
 80076f0:	685d      	ldr	r5, [r3, #4]
 80076f2:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <_ZN4xpcc5stm325Clock9enablePllENS1_9PllSourceEht+0x3c>)
 80076f4:	402c      	ands	r4, r5
	
	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;
	
	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;
 80076f6:	0192      	lsls	r2, r2, #6
	tmp |= RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
	
	// PLLSRC source for pll and for plli2s
	tmp |= (source == PllSource::PLL_HSI) ? RCC_PLLCFGR_PLLSRC_HSI
			: RCC_PLLCFGR_PLLSRC_HSE;
 80076f8:	f044 64e0 	orr.w	r4, r4, #117440512	; 0x7000000
	
	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;
 80076fc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	
	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;
 8007700:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8007704:	4015      	ands	r5, r2
	// PLLSRC source for pll and for plli2s
	tmp |= (source == PllSource::PLL_HSI) ? RCC_PLLCFGR_PLLSRC_HSI
			: RCC_PLLCFGR_PLLSRC_HSE;
	
	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;
 8007706:	430c      	orrs	r4, r1
	tmp |= RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
	
	// PLLSRC source for pll and for plli2s
	tmp |= (source == PllSource::PLL_HSI) ? RCC_PLLCFGR_PLLSRC_HSI
			: RCC_PLLCFGR_PLLSRC_HSE;
 8007708:	2800      	cmp	r0, #0
 800770a:	bf14      	ite	ne
 800770c:	f44f 0080 	movne.w	r0, #4194304	; 0x400000
 8007710:	2000      	moveq	r0, #0
	
	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;
	
	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;
 8007712:	432c      	orrs	r4, r5
	
#if defined(STM32F4XX)
	// VCO output frequency must be configured to 336MHz
	// PLLP (16) = 0 (factor = 2) for CPU frequency = 168MHz
	// PLLQ (24) = 7 (factor = 7) for 48MHz
	tmp |= (7UL << 24) & RCC_PLLCFGR_PLLQ;
 8007714:	4304      	orrs	r4, r0
#	warning "this is not tested yet"
#else
#	error "This file is not supposed to be used with the given CPU (only STM32F2/4xx)"
#endif
	
	RCC->PLLCFGR = tmp;
 8007716:	605c      	str	r4, [r3, #4]
	
	// enable pll
	RCC->CR |= RCC_CR_PLLON;
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bc30      	pop	{r4, r5}
 8007722:	4770      	bx	lr
 8007724:	40023800 	.word	0x40023800
 8007728:	f0bc8000 	.word	0xf0bc8000

0800772c <_ZN4xpcc5stm325Clock11switchToPllEm>:
// ----------------------------------------------------------------------------
bool
xpcc::stm32::Clock::switchToPll(uint32_t waitCycles)
{
	uint32_t t = waitCycles;
	while (!(RCC->CR & RCC_CR_PLLRDY)) {
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <_ZN4xpcc5stm325Clock11switchToPllEm+0x30>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	0192      	lsls	r2, r2, #6
 8007732:	d402      	bmi.n	800773a <_ZN4xpcc5stm325Clock11switchToPllEm+0xe>
		if (!(--t)) {
 8007734:	3801      	subs	r0, #1
 8007736:	d1f9      	bne.n	800772c <_ZN4xpcc5stm325Clock11switchToPllEm>
	while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
	{
	}

	return true;
}
 8007738:	4770      	bx	lr

#if defined(STM32F4XX)
	// APB2 84MHz, APB1 42MHz, AHB 168MHz, select PLL as source
	RCC->CFGR =
			(RCC->CFGR & 0xffff0000) | // Try to generate a halfword write
			((RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_HPRE_DIV1 | RCC_CFGR_SW_PLL) & 0x0000ffff);
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	0c12      	lsrs	r2, r2, #16
 800773e:	0412      	lsls	r2, r2, #16
 8007740:	f442 4214 	orr.w	r2, r2, #37888	; 0x9400
 8007744:	f042 0202 	orr.w	r2, r2, #2
 8007748:	609a      	str	r2, [r3, #8]
#else
#	error "This file is not supposed to be used with the given CPU (only STM32F2/4xx)"
#endif
	
	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800774a:	4b04      	ldr	r3, [pc, #16]	; (800775c <_ZN4xpcc5stm325Clock11switchToPllEm+0x30>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 030c 	and.w	r3, r3, #12
 8007752:	2b08      	cmp	r3, #8
 8007754:	d1f9      	bne.n	800774a <_ZN4xpcc5stm325Clock11switchToPllEm+0x1e>
	{
	}

	return true;
 8007756:	2001      	movs	r0, #1
}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40023800 	.word	0x40023800

08007760 <defaultHandler>:
 * enters an infinite loop leaving the processor state intact for a debugger
 * to be examined.
*/
void
defaultHandler(void)
{
 8007760:	e7fe      	b.n	8007760 <defaultHandler>
 8007762:	bf00      	nop

08007764 <Reset_Handler>:
exit(int) __attribute__ ((noreturn, weak));

// ----------------------------------------------------------------------------
void
Reset_Handler(void)
{
 8007764:	b500      	push	{lr}
	// startup delay
	for (volatile unsigned long i = 0; i < 500000; i++)
 8007766:	2300      	movs	r3, #0
exit(int) __attribute__ ((noreturn, weak));

// ----------------------------------------------------------------------------
void
Reset_Handler(void)
{
 8007768:	b083      	sub	sp, #12
 800776a:	e001      	b.n	8007770 <Reset_Handler+0xc>
	// startup delay
	for (volatile unsigned long i = 0; i < 500000; i++)
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	3301      	adds	r3, #1
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	9a01      	ldr	r2, [sp, #4]
 8007774:	4b34      	ldr	r3, [pc, #208]	; (8007848 <Reset_Handler+0xe4>)
 8007776:	429a      	cmp	r2, r3
 8007778:	d9f8      	bls.n	800776c <Reset_Handler+0x8>
	}
	
	// Copy functions to RAM (.fastcode)
	uint32_t* src = &__fastcode_load;
	uint32_t* dest = &__fastcode_start;
	while (dest < &__fastcode_end)
 800777a:	4b34      	ldr	r3, [pc, #208]	; (800784c <Reset_Handler+0xe8>)
 800777c:	4834      	ldr	r0, [pc, #208]	; (8007850 <Reset_Handler+0xec>)
 800777e:	4283      	cmp	r3, r0
 8007780:	d206      	bcs.n	8007790 <Reset_Handler+0x2c>
 8007782:	4a34      	ldr	r2, [pc, #208]	; (8007854 <Reset_Handler+0xf0>)
	{
		*(dest++) = *(src++);
 8007784:	f852 1b04 	ldr.w	r1, [r2], #4
 8007788:	f843 1b04 	str.w	r1, [r3], #4
	}
	
	// Copy functions to RAM (.fastcode)
	uint32_t* src = &__fastcode_load;
	uint32_t* dest = &__fastcode_start;
	while (dest < &__fastcode_end)
 800778c:	4283      	cmp	r3, r0
 800778e:	d3f9      	bcc.n	8007784 <Reset_Handler+0x20>
	}
	
	// Copy the data segment initializers from flash to RAM (.data)
	src = &__data_load;
	dest = &__data_start;
	while (dest < &__data_end)
 8007790:	4b31      	ldr	r3, [pc, #196]	; (8007858 <Reset_Handler+0xf4>)
 8007792:	4832      	ldr	r0, [pc, #200]	; (800785c <Reset_Handler+0xf8>)
 8007794:	4283      	cmp	r3, r0
 8007796:	d206      	bcs.n	80077a6 <Reset_Handler+0x42>
 8007798:	4a31      	ldr	r2, [pc, #196]	; (8007860 <Reset_Handler+0xfc>)
	{
		*(dest++) = *(src++);
 800779a:	f852 1b04 	ldr.w	r1, [r2], #4
 800779e:	f843 1b04 	str.w	r1, [r3], #4
	}
	
	// Copy the data segment initializers from flash to RAM (.data)
	src = &__data_load;
	dest = &__data_start;
	while (dest < &__data_end)
 80077a2:	4283      	cmp	r3, r0
 80077a4:	d3f9      	bcc.n	800779a <Reset_Handler+0x36>
		*(dest++) = *(src++);
	}
	
	// Fill the bss segment with zero (.bss)
	dest = &__bss_start;
	while (dest < &__bss_end)
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <Reset_Handler+0x100>)
 80077a8:	492f      	ldr	r1, [pc, #188]	; (8007868 <Reset_Handler+0x104>)
 80077aa:	428b      	cmp	r3, r1
 80077ac:	d204      	bcs.n	80077b8 <Reset_Handler+0x54>
	{
		*(dest++) = 0;
 80077ae:	2200      	movs	r2, #0
 80077b0:	f843 2b04 	str.w	r2, [r3], #4
		*(dest++) = *(src++);
	}
	
	// Fill the bss segment with zero (.bss)
	dest = &__bss_start;
	while (dest < &__bss_end)
 80077b4:	428b      	cmp	r3, r1
 80077b6:	d3fa      	bcc.n	80077ae <Reset_Handler+0x4a>
		*(dest++) = 0;
	}
	
#if defined(STM32F4XX)
	// prepare flash latency for working at 168MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_5;
 80077b8:	4a2c      	ldr	r2, [pc, #176]	; (800786c <Reset_Handler+0x108>)
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;

#if defined(STM32F4XX)
	// Enable FPU in privileged and user mode
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  // set CP10 and CP11 Full Access
 80077ba:	492d      	ldr	r1, [pc, #180]	; (8007870 <Reset_Handler+0x10c>)
		*(dest++) = 0;
	}
	
#if defined(STM32F4XX)
	// prepare flash latency for working at 168MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_5;
 80077bc:	6810      	ldr	r0, [r2, #0]
#if defined(STM32F4XX)
	// Enable FPU in privileged and user mode
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  // set CP10 and CP11 Full Access
	
	// Enable Core Coupled Memory (CCM)
	RCC->AHB1ENR |= RCC_AHB1ENR_CCMDATARAMEN;
 80077be:	4b2d      	ldr	r3, [pc, #180]	; (8007874 <Reset_Handler+0x110>)
		*(dest++) = 0;
	}
	
#if defined(STM32F4XX)
	// prepare flash latency for working at 168MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_5;
 80077c0:	f020 0007 	bic.w	r0, r0, #7
 80077c4:	f040 0005 	orr.w	r0, r0, #5
 80077c8:	6010      	str	r0, [r2, #0]
#else
	#error "This file is not supposed to be used with given CPU (only STM32F2/4xx)"
#endif
	
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;
 80077ca:	6810      	ldr	r0, [r2, #0]
 80077cc:	f440 60e0 	orr.w	r0, r0, #1792	; 0x700
 80077d0:	6010      	str	r0, [r2, #0]

#if defined(STM32F4XX)
	// Enable FPU in privileged and user mode
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  // set CP10 and CP11 Full Access
 80077d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80077d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80077da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	
	// Enable Core Coupled Memory (CCM)
	RCC->AHB1ENR |= RCC_AHB1ENR_CCMDATARAMEN;
 80077de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	
	// Enable GPIO clock
	// TODO adapt to actual pin count!
	// GPIOA-D
	RCC->AHB1ENR  |=   RCC_AHB1ENR_GPIOAEN   | RCC_AHB1ENR_GPIOBEN   | RCC_AHB1ENR_GPIOCEN   | RCC_AHB1ENR_GPIODEN;
 80077e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e8:	f042 020f 	orr.w	r2, r2, #15
 80077ec:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1RSTR |=   RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOBRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST;
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	f042 020f 	orr.w	r2, r2, #15
 80077f4:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOBRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST);
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	f022 020f 	bic.w	r2, r2, #15
 80077fc:	611a      	str	r2, [r3, #16]
	// GPIOE-I
	RCC->AHB1ENR  |=   RCC_AHB1ENR_GPIOEEN   | RCC_AHB1ENR_GPIOFEN   | RCC_AHB1ENR_GPIOGEN   | RCC_AHB1ENR_GPIOHEN   | RCC_AHB1ENR_GPIOIEN;
 80077fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007800:	f442 72f8 	orr.w	r2, r2, #496	; 0x1f0
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1RSTR |=   RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST | RCC_AHB1RSTR_GPIOHRST | RCC_AHB1RSTR_GPIOIRST;
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	f442 72f8 	orr.w	r2, r2, #496	; 0x1f0
 800780c:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST | RCC_AHB1RSTR_GPIOHRST | RCC_AHB1RSTR_GPIOIRST);
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8007814:	611a      	str	r2, [r3, #16]
	
	// Setup NVIC
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);
 8007816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
 800781a:	2300      	movs	r3, #0
	RCC->AHB1RSTR &= ~(RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST | RCC_AHB1RSTR_GPIOHRST | RCC_AHB1RSTR_GPIOIRST);
	
	// Setup NVIC
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);
 800781c:	608a      	str	r2, [r1, #8]

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
		const uint32_t priority = 0xF;
		NVIC->IP[i] = (priority & 0xF) << 4;
 800781e:	f103 4260 	add.w	r2, r3, #3758096384	; 0xe0000000
 8007822:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
 8007826:	3301      	adds	r3, #1
		const uint32_t priority = 0xF;
		NVIC->IP[i] = (priority & 0xF) << 4;
 8007828:	21f0      	movs	r1, #240	; 0xf0
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
 800782a:	2b52      	cmp	r3, #82	; 0x52
		const uint32_t priority = 0xF;
		NVIC->IP[i] = (priority & 0xF) << 4;
 800782c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
	// Set vector table
	const uint32_t offset = 0;
	SCB->VTOR = 0x08000000 | (offset & 0x1FFFFF80);

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < NR_INTERRUPTS; i++) {
 8007830:	d1f5      	bne.n	800781e <Reset_Handler+0xba>
	}
	
	// Set the PRIGROUP[10:8] bits to
	// - 4 bits for pre-emption priority,
	// - 0 bits for subpriority
	SCB->AIRCR = 0x05FA0000 | 0x300;
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <Reset_Handler+0x114>)
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <Reset_Handler+0x10c>)
 8007836:	60da      	str	r2, [r3, #12]
			SCB_SHCSR_BUSFAULTENA_Msk |
			SCB_SHCSR_USGFAULTENA_Msk |
			SCB_SHCSR_MEMFAULTENA_Msk;*/
	
	// Call CTORS of static objects
	__libc_init_array();
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <Reset_Handler+0x118>)
 800783a:	4798      	blx	r3
	
	// Call the application's entry point
	main();
 800783c:	4b10      	ldr	r3, [pc, #64]	; (8007880 <Reset_Handler+0x11c>)
 800783e:	4798      	blx	r3
	
	exit(1);
 8007840:	2001      	movs	r0, #1
 8007842:	4b10      	ldr	r3, [pc, #64]	; (8007884 <Reset_Handler+0x120>)
 8007844:	4798      	blx	r3
 8007846:	bf00      	nop
 8007848:	0007a11f 	.word	0x0007a11f
 800784c:	20000000 	.word	0x20000000
 8007850:	20000030 	.word	0x20000030
 8007854:	08000190 	.word	0x08000190
 8007858:	20000030 	.word	0x20000030
 800785c:	20000664 	.word	0x20000664
 8007860:	08009970 	.word	0x08009970
 8007864:	20000664 	.word	0x20000664
 8007868:	20001898 	.word	0x20001898
 800786c:	40023c00 	.word	0x40023c00
 8007870:	e000ed00 	.word	0xe000ed00
 8007874:	40023800 	.word	0x40023800
 8007878:	05fa0300 	.word	0x05fa0300
 800787c:	08008841 	.word	0x08008841
 8007880:	08002439 	.word	0x08002439
 8007884:	080078c3 	.word	0x080078c3

08007888 <__cxa_pure_virtual>:
	// ------------------------------------------------------------------------
	void* __dso_handle = (void *) &__dso_handle;
	
	void
	__cxa_pure_virtual()
	{
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <__aeabi_atexit>:
	// ------------------------------------------------------------------------
	int
	__aeabi_atexit(void */*object*/, void (*/*destructor*/)(void *), void */*dso_handle*/)
	{
		return 0;
	}
 800788c:	2000      	movs	r0, #0
 800788e:	4770      	bx	lr

08007890 <_ZdlPv>:
	return malloc(size);
}

void
operator delete(void *p) throw ()
{
 8007890:	b508      	push	{r3, lr}
	free(p);
 8007892:	4b01      	ldr	r3, [pc, #4]	; (8007898 <_ZdlPv+0x8>)
 8007894:	4798      	blx	r3
 8007896:	bd08      	pop	{r3, pc}
 8007898:	080088a9 	.word	0x080088a9

0800789c <_sbrk_r>:
extern "C"
void *
_sbrk_r(struct _reent *,  ptrdiff_t size)
{
	// move heap pointer
	uint8_t *heap = __brkval;
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <_sbrk_r+0x14>)
 800789e:	6818      	ldr	r0, [r3, #0]
	__brkval += size;
 80078a0:	1841      	adds	r1, r0, r1
 80078a2:	6019      	str	r1, [r3, #0]
	
	if (__brkval >= &__heap_end) {
 80078a4:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <_sbrk_r+0x18>)
 80078a6:	4299      	cmp	r1, r3
 80078a8:	d300      	bcc.n	80078ac <_sbrk_r+0x10>
 80078aa:	e7fe      	b.n	80078aa <_sbrk_r+0xe>
		abort();
	}
	
	//  Return pointer to start of new heap area.
	return heap;
}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	2000015c 	.word	0x2000015c
 80078b4:	2001c000 	.word	0x2001c000
	...

080078c0 <_defaultHandler>:
// Default functions which does nothing more than to return	
	.weak	_defaultHandler
	.type	_defaultHandler, %function
	.func   _defaultHandler
_defaultHandler:
	bx		lr
 80078c0:	4770      	bx	lr

080078c2 <_exit>:
exit:
	// Disable Interrupts
	// TODO
	
	// Enter an infinite loop
    b    	.
 80078c2:	e7fe      	b.n	80078c2 <_exit>
 80078c4:	f3af 8000 	nop.w
 80078c8:	f3af 8000 	nop.w
 80078cc:	f3af 8000 	nop.w

080078d0 <_ZN4xpcc8IODevice5writeEPKc>:
#include "iodevice.hpp"

// ----------------------------------------------------------------------------
void
xpcc::IODevice::write(const char* str)
{
 80078d0:	b538      	push	{r3, r4, r5, lr}
	char c;
	while ((c = *str++)) {
 80078d2:	460c      	mov	r4, r1
#include "iodevice.hpp"

// ----------------------------------------------------------------------------
void
xpcc::IODevice::write(const char* str)
{
 80078d4:	4605      	mov	r5, r0
	char c;
	while ((c = *str++)) {
 80078d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078da:	b139      	cbz	r1, 80078ec <_ZN4xpcc8IODevice5writeEPKc+0x1c>
		this->write(c);
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	4628      	mov	r0, r5
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	4798      	blx	r3
// ----------------------------------------------------------------------------
void
xpcc::IODevice::write(const char* str)
{
	char c;
	while ((c = *str++)) {
 80078e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e8:	2900      	cmp	r1, #0
 80078ea:	d1f7      	bne.n	80078dc <_ZN4xpcc8IODevice5writeEPKc+0xc>
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop

080078f0 <_ZN4xpcc8IOStreamC1ERNS_8IODeviceE>:
FLASH_STORAGE(uint16_t base[]) = { 10, 100, 1000, 10000 };

// ----------------------------------------------------------------------------
xpcc::IOStream::IOStream(IODevice& outputDevice) :
	device(&outputDevice),
	mode(Mode::Ascii)
 80078f0:	2200      	movs	r2, #0
 80078f2:	e880 0006 	stmia.w	r0, {r1, r2}
{
}
 80078f6:	4770      	bx	lr

080078f8 <_ZN4xpcc8IOStream12writeIntegerEl>:
	this->device->write(static_cast<char>(value) + '0');
}

void
xpcc::IOStream::writeInteger(int32_t value)
{
 80078f8:	b530      	push	{r4, r5, lr}
	// Uses the optimized non standard function 'ltoa()' which is
	// not always available.

	this->device->write(ltoa(value, buffer, 10));
#else
	if (value < 0) {
 80078fa:	1e0c      	subs	r4, r1, #0
	this->device->write(static_cast<char>(value) + '0');
}

void
xpcc::IOStream::writeInteger(int32_t value)
{
 80078fc:	b085      	sub	sp, #20
 80078fe:	4605      	mov	r5, r0
	// Uses the optimized non standard function 'ltoa()' which is
	// not always available.

	this->device->write(ltoa(value, buffer, 10));
#else
	if (value < 0) {
 8007900:	db18      	blt.n	8007934 <_ZN4xpcc8IOStream12writeIntegerEl+0x3c>
	char buffer[ArithmeticTraits<uint32_t>::decimalDigits + 1]; // +1 for '\0'
	
	// ptr points to the end of the string, it will be filled backwards
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';
 8007902:	a904      	add	r1, sp, #16
 8007904:	2300      	movs	r3, #0
 8007906:	f801 3d02 	strb.w	r3, [r1, #-2]!
	if (value < 0) {
		this->device->write('-');
		this->writeInteger(static_cast<uint32_t>(-value));
	}
	else{
		this->writeInteger(static_cast<uint32_t>(value));
 800790a:	4623      	mov	r3, r4

	*ptr = '\0';

	// calculate the string backwards
	do{
		uint32_t quot = value / 10;
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <_ZN4xpcc8IOStream12writeIntegerEl+0x70>)
 800790e:	fba2 0203 	umull	r0, r2, r2, r3
 8007912:	08d2      	lsrs	r2, r2, #3
		uint8_t rem = value - quot*10;
 8007914:	3330      	adds	r3, #48	; 0x30
 8007916:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		*(--ptr) = static_cast<char>(rem) + '0';
 800791a:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 800791e:	f801 4d01 	strb.w	r4, [r1, #-1]!
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';

	// calculate the string backwards
	do{
 8007922:	4613      	mov	r3, r2
 8007924:	2a00      	cmp	r2, #0
 8007926:	d1f1      	bne.n	800790c <_ZN4xpcc8IOStream12writeIntegerEl+0x14>
		*(--ptr) = static_cast<char>(rem) + '0';
		value = quot;
	}while (value != 0);

	// write string
	this->device->write(ptr);
 8007928:	6828      	ldr	r0, [r5, #0]
 800792a:	6803      	ldr	r3, [r0, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	4798      	blx	r3
	}
	else{
		this->writeInteger(static_cast<uint32_t>(value));
	}
#endif
}
 8007930:	b005      	add	sp, #20
 8007932:	bd30      	pop	{r4, r5, pc}
	// not always available.

	this->device->write(ltoa(value, buffer, 10));
#else
	if (value < 0) {
		this->device->write('-');
 8007934:	6800      	ldr	r0, [r0, #0]
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	212d      	movs	r1, #45	; 0x2d
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	4798      	blx	r3
	char buffer[ArithmeticTraits<uint32_t>::decimalDigits + 1]; // +1 for '\0'
	
	// ptr points to the end of the string, it will be filled backwards
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';
 800793e:	a904      	add	r1, sp, #16
 8007940:	2300      	movs	r3, #0
 8007942:	f801 3d02 	strb.w	r3, [r1, #-2]!

	this->device->write(ltoa(value, buffer, 10));
#else
	if (value < 0) {
		this->device->write('-');
		this->writeInteger(static_cast<uint32_t>(-value));
 8007946:	4263      	negs	r3, r4

	*ptr = '\0';

	// calculate the string backwards
	do{
		uint32_t quot = value / 10;
 8007948:	4a07      	ldr	r2, [pc, #28]	; (8007968 <_ZN4xpcc8IOStream12writeIntegerEl+0x70>)
 800794a:	fba2 0203 	umull	r0, r2, r2, r3
 800794e:	08d2      	lsrs	r2, r2, #3
		uint8_t rem = value - quot*10;
 8007950:	3330      	adds	r3, #48	; 0x30
 8007952:	eb02 0082 	add.w	r0, r2, r2, lsl #2
		*(--ptr) = static_cast<char>(rem) + '0';
 8007956:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 800795a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';

	// calculate the string backwards
	do{
 800795e:	4613      	mov	r3, r2
 8007960:	2a00      	cmp	r2, #0
 8007962:	d1f1      	bne.n	8007948 <_ZN4xpcc8IOStream12writeIntegerEl+0x50>
 8007964:	e7e0      	b.n	8007928 <_ZN4xpcc8IOStream12writeIntegerEl+0x30>
 8007966:	bf00      	nop
 8007968:	cccccccd 	.word	0xcccccccd

0800796c <_ZN4xpcc8IOStream12writeIntegerEm>:
#endif
}

void
xpcc::IOStream::writeInteger(uint32_t value)
{
 800796c:	b510      	push	{r4, lr}
 800796e:	b084      	sub	sp, #16
	char buffer[ArithmeticTraits<uint32_t>::decimalDigits + 1]; // +1 for '\0'
	
	// ptr points to the end of the string, it will be filled backwards
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';
 8007970:	ac04      	add	r4, sp, #16
 8007972:	2300      	movs	r3, #0
 8007974:	f804 3d02 	strb.w	r3, [r4, #-2]!
#endif
}

void
xpcc::IOStream::writeInteger(uint32_t value)
{
 8007978:	460b      	mov	r3, r1

	*ptr = '\0';

	// calculate the string backwards
	do{
		uint32_t quot = value / 10;
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <_ZN4xpcc8IOStream12writeIntegerEm+0x38>)
 800797c:	fba2 1203 	umull	r1, r2, r2, r3
 8007980:	08d2      	lsrs	r2, r2, #3
		uint8_t rem = value - quot*10;
 8007982:	3330      	adds	r3, #48	; 0x30
 8007984:	eb02 0182 	add.w	r1, r2, r2, lsl #2
		*(--ptr) = static_cast<char>(rem) + '0';
 8007988:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 800798c:	f804 1d01 	strb.w	r1, [r4, #-1]!
	char *ptr = buffer + ArithmeticTraits<uint32_t>::decimalDigits;

	*ptr = '\0';

	// calculate the string backwards
	do{
 8007990:	4613      	mov	r3, r2
 8007992:	2a00      	cmp	r2, #0
 8007994:	d1f1      	bne.n	800797a <_ZN4xpcc8IOStream12writeIntegerEm+0xe>
		*(--ptr) = static_cast<char>(rem) + '0';
		value = quot;
	}while (value != 0);

	// write string
	this->device->write(ptr);
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	6803      	ldr	r3, [r0, #0]
 800799a:	4621      	mov	r1, r4
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	4798      	blx	r3
#endif
}
 80079a0:	b004      	add	sp, #16
 80079a2:	bd10      	pop	{r4, pc}
 80079a4:	cccccccd 	.word	0xcccccccd

080079a8 <_ZN4xpcc8IOStream8writeHexEPKc>:
#endif

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(const char* s)
{
 80079a8:	b570      	push	{r4, r5, r6, lr}
	while (*s != '\0') {
 80079aa:	780c      	ldrb	r4, [r1, #0]
#endif

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(const char* s)
{
 80079ac:	460d      	mov	r5, r1
 80079ae:	4606      	mov	r6, r0
	while (*s != '\0') {
 80079b0:	b1d4      	cbz	r4, 80079e8 <_ZN4xpcc8IOStream8writeHexEPKc+0x40>
		character = nibble + 'A' - 10;
	}
	else {
		character = nibble + '0';
	}
	this->device->write(character);
 80079b2:	6830      	ldr	r0, [r6, #0]

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(uint8_t value)
{
	writeHexNibble(value >> 4);
 80079b4:	0923      	lsrs	r3, r4, #4
		character = nibble + 'A' - 10;
	}
	else {
		character = nibble + '0';
	}
	this->device->write(character);
 80079b6:	6802      	ldr	r2, [r0, #0]
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHexNibble(uint8_t nibble)
{
	char character;
	if (nibble > 9) {
 80079b8:	2b09      	cmp	r3, #9
		character = nibble + 'A' - 10;
 80079ba:	bf8c      	ite	hi
 80079bc:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	}
	else {
		character = nibble + '0';
 80079c0:	f103 0130 	addls.w	r1, r3, #48	; 0x30
	}
	this->device->write(character);
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	4798      	blx	r3
 80079c8:	6830      	ldr	r0, [r6, #0]
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(uint8_t value)
{
	writeHexNibble(value >> 4);
	writeHexNibble(value & 0xF);
 80079ca:	f004 040f 	and.w	r4, r4, #15
		character = nibble + 'A' - 10;
	}
	else {
		character = nibble + '0';
	}
	this->device->write(character);
 80079ce:	6803      	ldr	r3, [r0, #0]
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHexNibble(uint8_t nibble)
{
	char character;
	if (nibble > 9) {
 80079d0:	2c09      	cmp	r4, #9
		character = nibble + 'A' - 10;
 80079d2:	bf8c      	ite	hi
 80079d4:	f104 0137 	addhi.w	r1, r4, #55	; 0x37
	}
	else {
		character = nibble + '0';
 80079d8:	f104 0130 	addls.w	r1, r4, #48	; 0x30
	}
	this->device->write(character);
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	4798      	blx	r3

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(const char* s)
{
	while (*s != '\0') {
 80079e0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d1e4      	bne.n	80079b2 <_ZN4xpcc8IOStream8writeHexEPKc+0xa>
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
 80079ea:	bf00      	nop

080079ec <_ZN4xpcc8IOStream8writeBinEPKc>:
	}
}

void
xpcc::IOStream::writeBin(const char* s)
{
 80079ec:	b570      	push	{r4, r5, r6, lr}
	while (*s != '\0') {
 80079ee:	780d      	ldrb	r5, [r1, #0]
	}
}

void
xpcc::IOStream::writeBin(const char* s)
{
 80079f0:	460e      	mov	r6, r1
 80079f2:	4604      	mov	r4, r0
	while (*s != '\0') {
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	d142      	bne.n	8007a7e <_ZN4xpcc8IOStream8writeBinEPKc+0x92>
 80079f8:	e04f      	b.n	8007a9a <_ZN4xpcc8IOStream8writeBinEPKc+0xae>
	{
		if (value & 0x80) {
			this->device->write('1');
		}
		else {
			this->device->write('0');
 80079fa:	2130      	movs	r1, #48	; 0x30
 80079fc:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 80079fe:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a00:	006d      	lsls	r5, r5, #1
 8007a02:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a04:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a06:	062a      	lsls	r2, r5, #24
			this->device->write('1');
 8007a08:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a0a:	d456      	bmi.n	8007aba <_ZN4xpcc8IOStream8writeBinEPKc+0xce>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a0c:	2130      	movs	r1, #48	; 0x30
 8007a0e:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a10:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a12:	006d      	lsls	r5, r5, #1
 8007a14:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a16:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a18:	0629      	lsls	r1, r5, #24
			this->device->write('1');
 8007a1a:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a1c:	d44a      	bmi.n	8007ab4 <_ZN4xpcc8IOStream8writeBinEPKc+0xc8>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a1e:	2130      	movs	r1, #48	; 0x30
 8007a20:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a22:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a24:	006d      	lsls	r5, r5, #1
 8007a26:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a28:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a2a:	062a      	lsls	r2, r5, #24
			this->device->write('1');
 8007a2c:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a2e:	d43e      	bmi.n	8007aae <_ZN4xpcc8IOStream8writeBinEPKc+0xc2>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a30:	2130      	movs	r1, #48	; 0x30
 8007a32:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a34:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a36:	006d      	lsls	r5, r5, #1
 8007a38:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a3a:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a3c:	0629      	lsls	r1, r5, #24
			this->device->write('1');
 8007a3e:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a40:	d432      	bmi.n	8007aa8 <_ZN4xpcc8IOStream8writeBinEPKc+0xbc>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a42:	2130      	movs	r1, #48	; 0x30
 8007a44:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a46:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a48:	006d      	lsls	r5, r5, #1
 8007a4a:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a4c:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a4e:	062a      	lsls	r2, r5, #24
			this->device->write('1');
 8007a50:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a52:	d426      	bmi.n	8007aa2 <_ZN4xpcc8IOStream8writeBinEPKc+0xb6>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a54:	2130      	movs	r1, #48	; 0x30
 8007a56:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a58:	6820      	ldr	r0, [r4, #0]
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007a5a:	006d      	lsls	r5, r5, #1
 8007a5c:	b2ed      	uxtb	r5, r5
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a5e:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a60:	0629      	lsls	r1, r5, #24
			this->device->write('1');
 8007a62:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a64:	d41a      	bmi.n	8007a9c <_ZN4xpcc8IOStream8writeBinEPKc+0xb0>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a66:	2130      	movs	r1, #48	; 0x30
 8007a68:	4798      	blx	r3
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a6e:	066a      	lsls	r2, r5, #25
			this->device->write('1');
 8007a70:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a72:	d40c      	bmi.n	8007a8e <_ZN4xpcc8IOStream8writeBinEPKc+0xa2>
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007a74:	2130      	movs	r1, #48	; 0x30
 8007a76:	4798      	blx	r3
}

void
xpcc::IOStream::writeBin(const char* s)
{
	while (*s != '\0') {
 8007a78:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8007a7c:	b16d      	cbz	r5, 8007a9a <_ZN4xpcc8IOStream8writeBinEPKc+0xae>
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a82:	0629      	lsls	r1, r5, #24
			this->device->write('1');
 8007a84:	689b      	ldr	r3, [r3, #8]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007a86:	d5b8      	bpl.n	80079fa <_ZN4xpcc8IOStream8writeBinEPKc+0xe>
			this->device->write('1');
 8007a88:	2131      	movs	r1, #49	; 0x31
 8007a8a:	4798      	blx	r3
 8007a8c:	e7b7      	b.n	80079fe <_ZN4xpcc8IOStream8writeBinEPKc+0x12>
 8007a8e:	2131      	movs	r1, #49	; 0x31
 8007a90:	4798      	blx	r3
}

void
xpcc::IOStream::writeBin(const char* s)
{
	while (*s != '\0') {
 8007a92:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	d1f1      	bne.n	8007a7e <_ZN4xpcc8IOStream8writeBinEPKc+0x92>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007a9c:	2131      	movs	r1, #49	; 0x31
 8007a9e:	4798      	blx	r3
 8007aa0:	e7e3      	b.n	8007a6a <_ZN4xpcc8IOStream8writeBinEPKc+0x7e>
 8007aa2:	2131      	movs	r1, #49	; 0x31
 8007aa4:	4798      	blx	r3
 8007aa6:	e7d7      	b.n	8007a58 <_ZN4xpcc8IOStream8writeBinEPKc+0x6c>
 8007aa8:	2131      	movs	r1, #49	; 0x31
 8007aaa:	4798      	blx	r3
 8007aac:	e7cb      	b.n	8007a46 <_ZN4xpcc8IOStream8writeBinEPKc+0x5a>
 8007aae:	2131      	movs	r1, #49	; 0x31
 8007ab0:	4798      	blx	r3
 8007ab2:	e7bf      	b.n	8007a34 <_ZN4xpcc8IOStream8writeBinEPKc+0x48>
 8007ab4:	2131      	movs	r1, #49	; 0x31
 8007ab6:	4798      	blx	r3
 8007ab8:	e7b3      	b.n	8007a22 <_ZN4xpcc8IOStream8writeBinEPKc+0x36>
 8007aba:	2131      	movs	r1, #49	; 0x31
 8007abc:	4798      	blx	r3
 8007abe:	e7a7      	b.n	8007a10 <_ZN4xpcc8IOStream8writeBinEPKc+0x24>

08007ac0 <_ZN4xpcc8IOStream8writeHexEh>:
}

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(uint8_t value)
{
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	460d      	mov	r5, r1
	writeHexNibble(value >> 4);
 8007ac4:	0909      	lsrs	r1, r1, #4
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHexNibble(uint8_t nibble)
{
	char character;
	if (nibble > 9) {
 8007ac6:	2909      	cmp	r1, #9
}

// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(uint8_t value)
{
 8007ac8:	4604      	mov	r4, r0
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHexNibble(uint8_t nibble)
{
	char character;
	if (nibble > 9) {
 8007aca:	d911      	bls.n	8007af0 <_ZN4xpcc8IOStream8writeHexEh+0x30>
		character = nibble + 'A' - 10;
 8007acc:	3137      	adds	r1, #55	; 0x37
	}
	else {
		character = nibble + '0';
	}
	this->device->write(character);
 8007ace:	6820      	ldr	r0, [r4, #0]
 8007ad0:	6803      	ldr	r3, [r0, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	4798      	blx	r3
 8007ad6:	6820      	ldr	r0, [r4, #0]
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHex(uint8_t value)
{
	writeHexNibble(value >> 4);
	writeHexNibble(value & 0xF);
 8007ad8:	f005 050f 	and.w	r5, r5, #15
		character = nibble + 'A' - 10;
	}
	else {
		character = nibble + '0';
	}
	this->device->write(character);
 8007adc:	6803      	ldr	r3, [r0, #0]
// ----------------------------------------------------------------------------
void
xpcc::IOStream::writeHexNibble(uint8_t nibble)
{
	char character;
	if (nibble > 9) {
 8007ade:	2d09      	cmp	r5, #9
		character = nibble + 'A' - 10;
 8007ae0:	bf8c      	ite	hi
 8007ae2:	f105 0137 	addhi.w	r1, r5, #55	; 0x37
	}
	else {
		character = nibble + '0';
 8007ae6:	f105 0130 	addls.w	r1, r5, #48	; 0x30
	}
	this->device->write(character);
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	4798      	blx	r3
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
	char character;
	if (nibble > 9) {
		character = nibble + 'A' - 10;
	}
	else {
		character = nibble + '0';
 8007af0:	3130      	adds	r1, #48	; 0x30
 8007af2:	e7ec      	b.n	8007ace <_ZN4xpcc8IOStream8writeHexEh+0xe>

08007af4 <_ZN4xpcc8IOStream8writeBinEh>:
	writeHexNibble(value & 0xF);
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4606      	mov	r6, r0
 8007af8:	460d      	mov	r5, r1
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007afa:	2400      	movs	r4, #0
 8007afc:	e005      	b.n	8007b0a <_ZN4xpcc8IOStream8writeBinEh+0x16>
 8007afe:	3401      	adds	r4, #1
			this->device->write('1');
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007b00:	006d      	lsls	r5, r5, #1
	{
		if (value & 0x80) {
			this->device->write('1');
		}
		else {
			this->device->write('0');
 8007b02:	4798      	blx	r3
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007b04:	2c08      	cmp	r4, #8
			this->device->write('1');
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007b06:	b2ed      	uxtb	r5, r5
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007b08:	d00e      	beq.n	8007b28 <_ZN4xpcc8IOStream8writeBinEh+0x34>
	{
		if (value & 0x80) {
			this->device->write('1');
 8007b0a:	6830      	ldr	r0, [r6, #0]
 8007b0c:	6803      	ldr	r3, [r0, #0]
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007b0e:	f015 0f80 	tst.w	r5, #128	; 0x80
			this->device->write('1');
 8007b12:	689b      	ldr	r3, [r3, #8]
		}
		else {
			this->device->write('0');
 8007b14:	f04f 0130 	mov.w	r1, #48	; 0x30
void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
 8007b18:	d0f1      	beq.n	8007afe <_ZN4xpcc8IOStream8writeBinEh+0xa>
			this->device->write('1');
 8007b1a:	2131      	movs	r1, #49	; 0x31
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007b1c:	3401      	adds	r4, #1
			this->device->write('1');
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007b1e:	006d      	lsls	r5, r5, #1
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
	{
		if (value & 0x80) {
			this->device->write('1');
 8007b20:	4798      	blx	r3
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007b22:	2c08      	cmp	r4, #8
			this->device->write('1');
		}
		else {
			this->device->write('0');
		}
		value <<= 1;
 8007b24:	b2ed      	uxtb	r5, r5
}

void
xpcc::IOStream::writeBin(uint8_t value)
{
	for (uint_fast8_t ii = 0; ii < 8; ii++)
 8007b26:	d1f0      	bne.n	8007b0a <_ZN4xpcc8IOStream8writeBinEh+0x16>
			this->device->write('0');
		}
		value <<= 1;
	}

}
 8007b28:	bd70      	pop	{r4, r5, r6, pc}
 8007b2a:	bf00      	nop

08007b2c <_ZN4xpcc8IOStream10writeFloatERKf>:

#include "iostream.hpp"

void
xpcc::IOStream::writeFloat(const float& value)
{
 8007b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	this->device->write(str);
#elif defined(XPCC__CPU_CORTEX_M4)
	float v;
	char *ptr = &str[0];
	
	if (value < 0) {
 8007b2e:	edd1 7a00 	vldr	s15, [r1]
 8007b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

#include "iostream.hpp"

void
xpcc::IOStream::writeFloat(const float& value)
{
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	4607      	mov	r7, r0
	this->device->write(str);
#elif defined(XPCC__CPU_CORTEX_M4)
	float v;
	char *ptr = &str[0];
	
	if (value < 0) {
 8007b3e:	d471      	bmi.n	8007c24 <_ZN4xpcc8IOStream10writeFloatERKf+0xf8>
#if defined(XPCC__CPU_AVR)
	dtostre(value, str, 5, 0);
	this->device->write(str);
#elif defined(XPCC__CPU_CORTEX_M4)
	float v;
	char *ptr = &str[0];
 8007b40:	466b      	mov	r3, sp
	else {
		v = value;
	}
	
	int32_t ep = 0;
	if (v != 0)
 8007b42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	d069      	beq.n	8007c20 <_ZN4xpcc8IOStream10writeFloatERKf+0xf4>
	{
		while (v < 1.f) {
 8007b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8007b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	d50b      	bpl.n	8007b76 <_ZN4xpcc8IOStream10writeFloatERKf+0x4a>
			v *= 10;
 8007b5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8007b62:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
	
	int32_t ep = 0;
	if (v != 0)
	{
		while (v < 1.f) {
 8007b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8007b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
			v *= 10;
			ep -= 1;
 8007b6e:	3c01      	subs	r4, #1
	}
	
	int32_t ep = 0;
	if (v != 0)
	{
		while (v < 1.f) {
 8007b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b74:	d4f3      	bmi.n	8007b5e <_ZN4xpcc8IOStream10writeFloatERKf+0x32>
			v *= 10;
			ep -= 1;
		}

		while (v > 10) {
 8007b76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8007b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b82:	dd0b      	ble.n	8007b9c <_ZN4xpcc8IOStream10writeFloatERKf+0x70>
			v *= 0.1f;
 8007b84:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007c3c <_ZN4xpcc8IOStream10writeFloatERKf+0x110>
 8007b88:	ee67 7a87 	vmul.f32	s15, s15, s14
		while (v < 1.f) {
			v *= 10;
			ep -= 1;
		}

		while (v > 10) {
 8007b8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8007b90:	eef4 7ac7 	vcmpe.f32	s15, s14
			v *= 0.1f;
			ep += 1;
 8007b94:	3401      	adds	r4, #1
		while (v < 1.f) {
			v *= 10;
			ep -= 1;
		}

		while (v > 10) {
 8007b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9a:	dcf3      	bgt.n	8007b84 <_ZN4xpcc8IOStream10writeFloatERKf+0x58>
			v *= 0.1f;
			ep += 1;
		}
	}
	
	for (uint32_t i = 0; i < 6; ++i)
 8007b9c:	2200      	movs	r2, #0
	{
		int8_t num = static_cast<int8_t>(v);
 8007b9e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8007ba2:	ee16 5a90 	vmov	r5, s13
		*ptr++ = (num + '0');
 8007ba6:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8007baa:	701e      	strb	r6, [r3, #0]
		if (i == 0) {
			*ptr++ = '.';
		}
		
		// next digit
		v = (v - num) * 10;
 8007bac:	b26e      	sxtb	r6, r5
	for (uint32_t i = 0; i < 6; ++i)
	{
		int8_t num = static_cast<int8_t>(v);
		*ptr++ = (num + '0');
		
		if (i == 0) {
 8007bae:	b972      	cbnz	r2, 8007bce <_ZN4xpcc8IOStream10writeFloatERKf+0xa2>
			*ptr++ = '.';
		}
		
		// next digit
		v = (v - num) * 10;
 8007bb0:	ee06 6a90 	vmov	s13, r6
 8007bb4:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
	{
		int8_t num = static_cast<int8_t>(v);
		*ptr++ = (num + '0');
		
		if (i == 0) {
			*ptr++ = '.';
 8007bb8:	222e      	movs	r2, #46	; 0x2e
		}
		
		// next digit
		v = (v - num) * 10;
 8007bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
	{
		int8_t num = static_cast<int8_t>(v);
		*ptr++ = (num + '0');
		
		if (i == 0) {
			*ptr++ = '.';
 8007bc2:	705a      	strb	r2, [r3, #1]
		}
		
		// next digit
		v = (v - num) * 10;
 8007bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
	{
		int8_t num = static_cast<int8_t>(v);
		*ptr++ = (num + '0');
		
		if (i == 0) {
			*ptr++ = '.';
 8007bc8:	3302      	adds	r3, #2
			v *= 0.1f;
			ep += 1;
		}
	}
	
	for (uint32_t i = 0; i < 6; ++i)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	e7e7      	b.n	8007b9e <_ZN4xpcc8IOStream10writeFloatERKf+0x72>
 8007bce:	3201      	adds	r2, #1
	{
		int8_t num = static_cast<int8_t>(v);
		*ptr++ = (num + '0');
 8007bd0:	3301      	adds	r3, #1
			v *= 0.1f;
			ep += 1;
		}
	}
	
	for (uint32_t i = 0; i < 6; ++i)
 8007bd2:	2a06      	cmp	r2, #6
		if (i == 0) {
			*ptr++ = '.';
		}
		
		// next digit
		v = (v - num) * 10;
 8007bd4:	b26d      	sxtb	r5, r5
			v *= 0.1f;
			ep += 1;
		}
	}
	
	for (uint32_t i = 0; i < 6; ++i)
 8007bd6:	d00a      	beq.n	8007bee <_ZN4xpcc8IOStream10writeFloatERKf+0xc2>
		if (i == 0) {
			*ptr++ = '.';
		}
		
		// next digit
		v = (v - num) * 10;
 8007bd8:	ee06 5a90 	vmov	s13, r5
 8007bdc:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 8007be0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007be4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 8007be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bec:	e7d7      	b.n	8007b9e <_ZN4xpcc8IOStream10writeFloatERKf+0x72>
	}
	
	*ptr++ = 'e';
 8007bee:	2265      	movs	r2, #101	; 0x65
	if (ep < 0) {
 8007bf0:	2c00      	cmp	r4, #0
		
		// next digit
		v = (v - num) * 10;
	}
	
	*ptr++ = 'e';
 8007bf2:	701a      	strb	r2, [r3, #0]
	if (ep < 0) {
 8007bf4:	db1e      	blt.n	8007c34 <_ZN4xpcc8IOStream10writeFloatERKf+0x108>
		ep = -ep;
		*ptr++ = '-';
	}
	else {
		*ptr++ = '+';
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	202b      	movs	r0, #43	; 0x2b
	}
	if (ep < 10) {
 8007bfa:	2c09      	cmp	r4, #9
 8007bfc:	7058      	strb	r0, [r3, #1]
 8007bfe:	dc02      	bgt.n	8007c06 <_ZN4xpcc8IOStream10writeFloatERKf+0xda>
		*ptr++ = '0';
 8007c00:	2330      	movs	r3, #48	; 0x30
 8007c02:	f802 3b01 	strb.w	r3, [r2], #1
	}
	*ptr++ = '\0';	// End of string
	this->device->write(str);
 8007c06:	6838      	ldr	r0, [r7, #0]
		*ptr++ = '+';
	}
	if (ep < 10) {
		*ptr++ = '0';
	}
	*ptr++ = '\0';	// End of string
 8007c08:	2300      	movs	r3, #0
 8007c0a:	7013      	strb	r3, [r2, #0]
	this->device->write(str);
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	4669      	mov	r1, sp
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4798      	blx	r3
	
	this->writeInteger(ep);
 8007c14:	4638      	mov	r0, r7
 8007c16:	4621      	mov	r1, r4
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <_ZN4xpcc8IOStream10writeFloatERKf+0x114>)
 8007c1a:	4798      	blx	r3
#else
	snprintf(str, sizeof(str), "%.5e", (double) value);
	this->device->write(str);
#endif
}
 8007c1c:	b005      	add	sp, #20
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}
	else {
		v = value;
	}
	
	int32_t ep = 0;
 8007c20:	2400      	movs	r4, #0
 8007c22:	e7bb      	b.n	8007b9c <_ZN4xpcc8IOStream10writeFloatERKf+0x70>
	float v;
	char *ptr = &str[0];
	
	if (value < 0) {
		v = -value;
		*ptr++ = '-';
 8007c24:	232d      	movs	r3, #45	; 0x2d
 8007c26:	f88d 3000 	strb.w	r3, [sp]
#elif defined(XPCC__CPU_CORTEX_M4)
	float v;
	char *ptr = &str[0];
	
	if (value < 0) {
		v = -value;
 8007c2a:	eef1 7a67 	vneg.f32	s15, s15
		*ptr++ = '-';
 8007c2e:	f10d 0301 	add.w	r3, sp, #1
 8007c32:	e786      	b.n	8007b42 <_ZN4xpcc8IOStream10writeFloatERKf+0x16>
		v = (v - num) * 10;
	}
	
	*ptr++ = 'e';
	if (ep < 0) {
		ep = -ep;
 8007c34:	4264      	negs	r4, r4
		*ptr++ = '-';
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	202d      	movs	r0, #45	; 0x2d
 8007c3a:	e7de      	b.n	8007bfa <_ZN4xpcc8IOStream10writeFloatERKf+0xce>
 8007c3c:	3dcccccd 	.word	0x3dcccccd
 8007c40:	080078f9 	.word	0x080078f9

08007c44 <_ZN4xpcc5dummyEv>:

#include "dummy.hpp"

void
xpcc::dummy()
{
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop

08007c48 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8007c48:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8007c4a:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8007c4c:	b963      	cbnz	r3, 8007c68 <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007c4e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007c50:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007c52:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007c5c:	3120      	adds	r1, #32
 8007c5e:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <NVIC_Init+0x6c>)
 8007c60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8007c64:	bc30      	pop	{r4, r5}
 8007c66:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <NVIC_Init+0x70>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007c6a:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8007c6c:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8007c6e:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8007c70:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8007c72:	43d2      	mvns	r2, r2
 8007c74:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8007c78:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007c7c:	b2c9      	uxtb	r1, r1
 8007c7e:	fa05 f101 	lsl.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8007c82:	250f      	movs	r5, #15
 8007c84:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007c88:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8007c8a:	4022      	ands	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8007c8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8007c90:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8007c92:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8007c96:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8007c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007c9c:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007c9e:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007ca0:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007caa:	4a02      	ldr	r2, [pc, #8]	; (8007cb4 <NVIC_Init+0x6c>)
 8007cac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007cb0:	e7d8      	b.n	8007c64 <NVIC_Init+0x1c>
 8007cb2:	bf00      	nop
 8007cb4:	e000e100 	.word	0xe000e100
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8007cbc:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007cbe:	b919      	cbnz	r1, 8007cc8 <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	6003      	str	r3, [r0, #0]
 8007cc6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8007cc8:	f043 0301 	orr.w	r3, r3, #1
 8007ccc:	6003      	str	r3, [r0, #0]
 8007cce:	4770      	bx	lr

08007cd0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007cd0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	680d      	ldr	r5, [r1, #0]
 8007cd8:	e002      	b.n	8007ce0 <GPIO_Init+0x10>
 8007cda:	3301      	adds	r3, #1
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d02e      	beq.n	8007d3e <GPIO_Init+0x6e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	fa02 f203 	lsl.w	r2, r2, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8007ce6:	ea02 0405 	and.w	r4, r2, r5

    if (currentpin == pos)
 8007cea:	4294      	cmp	r4, r2
 8007cec:	d1f5      	bne.n	8007cda <GPIO_Init+0xa>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007cee:	005a      	lsls	r2, r3, #1
 8007cf0:	2703      	movs	r7, #3
 8007cf2:	f8d0 c000 	ldr.w	ip, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007cf6:	790e      	ldrb	r6, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007cf8:	fa07 f702 	lsl.w	r7, r7, r2
 8007cfc:	43ff      	mvns	r7, r7
 8007cfe:	ea07 0c0c 	and.w	ip, r7, ip
 8007d02:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007d06:	f8d0 8000 	ldr.w	r8, [r0]
 8007d0a:	fa06 f902 	lsl.w	r9, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007d0e:	3e01      	subs	r6, #1
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007d10:	f04f 0c03 	mov.w	ip, #3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007d14:	ea49 0808 	orr.w	r8, r9, r8

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007d18:	2e01      	cmp	r6, #1
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007d1a:	fa0c fc02 	lsl.w	ip, ip, r2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007d1e:	f8c0 8000 	str.w	r8, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007d22:	d90f      	bls.n	8007d44 <GPIO_Init+0x74>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007d24:	68c7      	ldr	r7, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007d26:	79ce      	ldrb	r6, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007d28:	ea27 040c 	bic.w	r4, r7, ip
 8007d2c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007d2e:	68c4      	ldr	r4, [r0, #12]
 8007d30:	fa06 f202 	lsl.w	r2, r6, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007d34:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007d36:	4322      	orrs	r2, r4
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007d38:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8007d3a:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007d3c:	d1d0      	bne.n	8007ce0 <GPIO_Init+0x10>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8007d3e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8007d42:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007d44:	f8d0 9008 	ldr.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007d48:	794e      	ldrb	r6, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007d4a:	f891 8006 	ldrb.w	r8, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007d4e:	ea07 0709 	and.w	r7, r7, r9
 8007d52:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007d54:	6887      	ldr	r7, [r0, #8]
 8007d56:	fa06 f602 	lsl.w	r6, r6, r2
 8007d5a:	433e      	orrs	r6, r7
 8007d5c:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007d5e:	6846      	ldr	r6, [r0, #4]
 8007d60:	ea26 0404 	bic.w	r4, r6, r4
 8007d64:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007d66:	6846      	ldr	r6, [r0, #4]
 8007d68:	fa08 f403 	lsl.w	r4, r8, r3
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8007d6c:	b2a4      	uxth	r4, r4
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8007d6e:	4334      	orrs	r4, r6
 8007d70:	6044      	str	r4, [r0, #4]
 8007d72:	e7d7      	b.n	8007d24 <GPIO_Init+0x54>

08007d74 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8007d74:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8007d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d7a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8007d7c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8007d7e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8007d80:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007d82:	71c3      	strb	r3, [r0, #7]
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d88:	08cb      	lsrs	r3, r1, #3
 8007d8a:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d8c:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007d90:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d92:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007d94:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8007d98:	240f      	movs	r4, #15
 8007d9a:	fa04 f401 	lsl.w	r4, r4, r1
 8007d9e:	ea25 0404 	bic.w	r4, r5, r4
 8007da2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007da6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007daa:	fa02 f201 	lsl.w	r2, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007dae:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8007db0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8007db4:	bc30      	pop	{r4, r5}
 8007db6:	4770      	bx	lr

08007db8 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <RCC_AHB1PeriphClockCmd+0x14>)
 8007dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007dbc:	b919      	cbnz	r1, 8007dc6 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8007dbe:	ea22 0000 	bic.w	r0, r2, r0
 8007dc2:	6318      	str	r0, [r3, #48]	; 0x30
 8007dc4:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8007dc6:	4310      	orrs	r0, r2
 8007dc8:	6318      	str	r0, [r3, #48]	; 0x30
 8007dca:	4770      	bx	lr
 8007dcc:	40023800 	.word	0x40023800

08007dd0 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <RCC_APB1PeriphClockCmd+0x14>)
 8007dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007dd4:	b919      	cbnz	r1, 8007dde <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8007dd6:	ea22 0000 	bic.w	r0, r2, r0
 8007dda:	6418      	str	r0, [r3, #64]	; 0x40
 8007ddc:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8007dde:	4310      	orrs	r0, r2
 8007de0:	6418      	str	r0, [r3, #64]	; 0x40
 8007de2:	4770      	bx	lr
 8007de4:	40023800 	.word	0x40023800

08007de8 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8007de8:	62c1      	str	r1, [r0, #44]	; 0x2c
 8007dea:	4770      	bx	lr

08007dec <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8007dec:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007dee:	b929      	cbnz	r1, 8007dfc <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	041b      	lsls	r3, r3, #16
 8007df6:	0c1b      	lsrs	r3, r3, #16
 8007df8:	8003      	strh	r3, [r0, #0]
 8007dfa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	8003      	strh	r3, [r0, #0]
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop

08007e08 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8007e08:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0a:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8007e0c:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007e10:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007e14:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007e18:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007e1c:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007e1e:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007e22:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8007e24:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007e26:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8007e28:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007e2a:	4332      	orrs	r2, r6

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8007e2c:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8007e2e:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007e32:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8007e36:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8007e38:	f044 0401 	orr.w	r4, r4, #1
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3c:	8101      	strh	r1, [r0, #8]
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8007e3e:	461e      	mov	r6, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8007e40:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e42:	8403      	strh	r3, [r0, #32]
}
 8007e44:	bc70      	pop	{r4, r5, r6}
 8007e46:	4770      	bx	lr

08007e48 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8007e48:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007e4a:	b929      	cbnz	r1, 8007e58 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8007e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	0c1b      	lsrs	r3, r3, #16
 8007e54:	8183      	strh	r3, [r0, #12]
 8007e56:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e5e:	8183      	strh	r3, [r0, #12]
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop

08007e64 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8007e64:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8007e68:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007e6a:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8007e6e:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007e70:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8007e72:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007e76:	d00d      	beq.n	8007e94 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007e78:	2902      	cmp	r1, #2
 8007e7a:	d00d      	beq.n	8007e98 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007e7c:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8007e7e:	b92a      	cbnz	r2, 8007e8c <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007e80:	6802      	ldr	r2, [r0, #0]
 8007e82:	ea22 0303 	bic.w	r3, r2, r3
 8007e86:	6003      	str	r3, [r0, #0]
  }
}
 8007e88:	bc10      	pop	{r4}
 8007e8a:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007e8c:	6802      	ldr	r2, [r0, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	6003      	str	r3, [r0, #0]
 8007e92:	e7f9      	b.n	8007e88 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8007e94:	300c      	adds	r0, #12
 8007e96:	e7f2      	b.n	8007e7e <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8007e98:	3010      	adds	r0, #16
 8007e9a:	e7f0      	b.n	8007e7e <USART_ITConfig+0x1a>

08007e9c <_ZN4xpcc5stm328UartBase25calculateBaudrateSettingsEmm>:

uint16_t
xpcc::stm32::UartBase::calculateBaudrateSettings(uint32_t sabclk, uint32_t baudrate)
{
	// see http://www.mikrocontroller.net/topic/143715
	return ((2 * sabclk) / baudrate + 1) / 2;
 8007e9c:	0040      	lsls	r0, r0, #1
 8007e9e:	fbb0 f1f1 	udiv	r1, r0, r1
 8007ea2:	1c48      	adds	r0, r1, #1
}
 8007ea4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop

08007eac <__aeabi_drsub>:
 8007eac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007eb0:	e002      	b.n	8007eb8 <__adddf3>
 8007eb2:	bf00      	nop

08007eb4 <__aeabi_dsub>:
 8007eb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007eb8 <__adddf3>:
 8007eb8:	b530      	push	{r4, r5, lr}
 8007eba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007ebe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007ec2:	ea94 0f05 	teq	r4, r5
 8007ec6:	bf08      	it	eq
 8007ec8:	ea90 0f02 	teqeq	r0, r2
 8007ecc:	bf1f      	itttt	ne
 8007ece:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007ed2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007ed6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007eda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ede:	f000 80e2 	beq.w	80080a6 <__adddf3+0x1ee>
 8007ee2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007ee6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007eea:	bfb8      	it	lt
 8007eec:	426d      	neglt	r5, r5
 8007eee:	dd0c      	ble.n	8007f0a <__adddf3+0x52>
 8007ef0:	442c      	add	r4, r5
 8007ef2:	ea80 0202 	eor.w	r2, r0, r2
 8007ef6:	ea81 0303 	eor.w	r3, r1, r3
 8007efa:	ea82 0000 	eor.w	r0, r2, r0
 8007efe:	ea83 0101 	eor.w	r1, r3, r1
 8007f02:	ea80 0202 	eor.w	r2, r0, r2
 8007f06:	ea81 0303 	eor.w	r3, r1, r3
 8007f0a:	2d36      	cmp	r5, #54	; 0x36
 8007f0c:	bf88      	it	hi
 8007f0e:	bd30      	pophi	{r4, r5, pc}
 8007f10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f20:	d002      	beq.n	8007f28 <__adddf3+0x70>
 8007f22:	4240      	negs	r0, r0
 8007f24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f34:	d002      	beq.n	8007f3c <__adddf3+0x84>
 8007f36:	4252      	negs	r2, r2
 8007f38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f3c:	ea94 0f05 	teq	r4, r5
 8007f40:	f000 80a7 	beq.w	8008092 <__adddf3+0x1da>
 8007f44:	f1a4 0401 	sub.w	r4, r4, #1
 8007f48:	f1d5 0e20 	rsbs	lr, r5, #32
 8007f4c:	db0d      	blt.n	8007f6a <__adddf3+0xb2>
 8007f4e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007f52:	fa22 f205 	lsr.w	r2, r2, r5
 8007f56:	1880      	adds	r0, r0, r2
 8007f58:	f141 0100 	adc.w	r1, r1, #0
 8007f5c:	fa03 f20e 	lsl.w	r2, r3, lr
 8007f60:	1880      	adds	r0, r0, r2
 8007f62:	fa43 f305 	asr.w	r3, r3, r5
 8007f66:	4159      	adcs	r1, r3
 8007f68:	e00e      	b.n	8007f88 <__adddf3+0xd0>
 8007f6a:	f1a5 0520 	sub.w	r5, r5, #32
 8007f6e:	f10e 0e20 	add.w	lr, lr, #32
 8007f72:	2a01      	cmp	r2, #1
 8007f74:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007f78:	bf28      	it	cs
 8007f7a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007f7e:	fa43 f305 	asr.w	r3, r3, r5
 8007f82:	18c0      	adds	r0, r0, r3
 8007f84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007f88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f8c:	d507      	bpl.n	8007f9e <__adddf3+0xe6>
 8007f8e:	f04f 0e00 	mov.w	lr, #0
 8007f92:	f1dc 0c00 	rsbs	ip, ip, #0
 8007f96:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007f9a:	eb6e 0101 	sbc.w	r1, lr, r1
 8007f9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007fa2:	d31b      	bcc.n	8007fdc <__adddf3+0x124>
 8007fa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007fa8:	d30c      	bcc.n	8007fc4 <__adddf3+0x10c>
 8007faa:	0849      	lsrs	r1, r1, #1
 8007fac:	ea5f 0030 	movs.w	r0, r0, rrx
 8007fb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007fb4:	f104 0401 	add.w	r4, r4, #1
 8007fb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007fbc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007fc0:	f080 809a 	bcs.w	80080f8 <__adddf3+0x240>
 8007fc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007fc8:	bf08      	it	eq
 8007fca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007fce:	f150 0000 	adcs.w	r0, r0, #0
 8007fd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007fd6:	ea41 0105 	orr.w	r1, r1, r5
 8007fda:	bd30      	pop	{r4, r5, pc}
 8007fdc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007fe0:	4140      	adcs	r0, r0
 8007fe2:	eb41 0101 	adc.w	r1, r1, r1
 8007fe6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007fea:	f1a4 0401 	sub.w	r4, r4, #1
 8007fee:	d1e9      	bne.n	8007fc4 <__adddf3+0x10c>
 8007ff0:	f091 0f00 	teq	r1, #0
 8007ff4:	bf04      	itt	eq
 8007ff6:	4601      	moveq	r1, r0
 8007ff8:	2000      	moveq	r0, #0
 8007ffa:	fab1 f381 	clz	r3, r1
 8007ffe:	bf08      	it	eq
 8008000:	3320      	addeq	r3, #32
 8008002:	f1a3 030b 	sub.w	r3, r3, #11
 8008006:	f1b3 0220 	subs.w	r2, r3, #32
 800800a:	da0c      	bge.n	8008026 <__adddf3+0x16e>
 800800c:	320c      	adds	r2, #12
 800800e:	dd08      	ble.n	8008022 <__adddf3+0x16a>
 8008010:	f102 0c14 	add.w	ip, r2, #20
 8008014:	f1c2 020c 	rsb	r2, r2, #12
 8008018:	fa01 f00c 	lsl.w	r0, r1, ip
 800801c:	fa21 f102 	lsr.w	r1, r1, r2
 8008020:	e00c      	b.n	800803c <__adddf3+0x184>
 8008022:	f102 0214 	add.w	r2, r2, #20
 8008026:	bfd8      	it	le
 8008028:	f1c2 0c20 	rsble	ip, r2, #32
 800802c:	fa01 f102 	lsl.w	r1, r1, r2
 8008030:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008034:	bfdc      	itt	le
 8008036:	ea41 010c 	orrle.w	r1, r1, ip
 800803a:	4090      	lslle	r0, r2
 800803c:	1ae4      	subs	r4, r4, r3
 800803e:	bfa2      	ittt	ge
 8008040:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008044:	4329      	orrge	r1, r5
 8008046:	bd30      	popge	{r4, r5, pc}
 8008048:	ea6f 0404 	mvn.w	r4, r4
 800804c:	3c1f      	subs	r4, #31
 800804e:	da1c      	bge.n	800808a <__adddf3+0x1d2>
 8008050:	340c      	adds	r4, #12
 8008052:	dc0e      	bgt.n	8008072 <__adddf3+0x1ba>
 8008054:	f104 0414 	add.w	r4, r4, #20
 8008058:	f1c4 0220 	rsb	r2, r4, #32
 800805c:	fa20 f004 	lsr.w	r0, r0, r4
 8008060:	fa01 f302 	lsl.w	r3, r1, r2
 8008064:	ea40 0003 	orr.w	r0, r0, r3
 8008068:	fa21 f304 	lsr.w	r3, r1, r4
 800806c:	ea45 0103 	orr.w	r1, r5, r3
 8008070:	bd30      	pop	{r4, r5, pc}
 8008072:	f1c4 040c 	rsb	r4, r4, #12
 8008076:	f1c4 0220 	rsb	r2, r4, #32
 800807a:	fa20 f002 	lsr.w	r0, r0, r2
 800807e:	fa01 f304 	lsl.w	r3, r1, r4
 8008082:	ea40 0003 	orr.w	r0, r0, r3
 8008086:	4629      	mov	r1, r5
 8008088:	bd30      	pop	{r4, r5, pc}
 800808a:	fa21 f004 	lsr.w	r0, r1, r4
 800808e:	4629      	mov	r1, r5
 8008090:	bd30      	pop	{r4, r5, pc}
 8008092:	f094 0f00 	teq	r4, #0
 8008096:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800809a:	bf06      	itte	eq
 800809c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80080a0:	3401      	addeq	r4, #1
 80080a2:	3d01      	subne	r5, #1
 80080a4:	e74e      	b.n	8007f44 <__adddf3+0x8c>
 80080a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80080aa:	bf18      	it	ne
 80080ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80080b0:	d029      	beq.n	8008106 <__adddf3+0x24e>
 80080b2:	ea94 0f05 	teq	r4, r5
 80080b6:	bf08      	it	eq
 80080b8:	ea90 0f02 	teqeq	r0, r2
 80080bc:	d005      	beq.n	80080ca <__adddf3+0x212>
 80080be:	ea54 0c00 	orrs.w	ip, r4, r0
 80080c2:	bf04      	itt	eq
 80080c4:	4619      	moveq	r1, r3
 80080c6:	4610      	moveq	r0, r2
 80080c8:	bd30      	pop	{r4, r5, pc}
 80080ca:	ea91 0f03 	teq	r1, r3
 80080ce:	bf1e      	ittt	ne
 80080d0:	2100      	movne	r1, #0
 80080d2:	2000      	movne	r0, #0
 80080d4:	bd30      	popne	{r4, r5, pc}
 80080d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80080da:	d105      	bne.n	80080e8 <__adddf3+0x230>
 80080dc:	0040      	lsls	r0, r0, #1
 80080de:	4149      	adcs	r1, r1
 80080e0:	bf28      	it	cs
 80080e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80080e6:	bd30      	pop	{r4, r5, pc}
 80080e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80080ec:	bf3c      	itt	cc
 80080ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80080f2:	bd30      	popcc	{r4, r5, pc}
 80080f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80080f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80080fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	bd30      	pop	{r4, r5, pc}
 8008106:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800810a:	bf1a      	itte	ne
 800810c:	4619      	movne	r1, r3
 800810e:	4610      	movne	r0, r2
 8008110:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008114:	bf1c      	itt	ne
 8008116:	460b      	movne	r3, r1
 8008118:	4602      	movne	r2, r0
 800811a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800811e:	bf06      	itte	eq
 8008120:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008124:	ea91 0f03 	teqeq	r1, r3
 8008128:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800812c:	bd30      	pop	{r4, r5, pc}
 800812e:	bf00      	nop

08008130 <__aeabi_ui2d>:
 8008130:	f090 0f00 	teq	r0, #0
 8008134:	bf04      	itt	eq
 8008136:	2100      	moveq	r1, #0
 8008138:	4770      	bxeq	lr
 800813a:	b530      	push	{r4, r5, lr}
 800813c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008140:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008144:	f04f 0500 	mov.w	r5, #0
 8008148:	f04f 0100 	mov.w	r1, #0
 800814c:	e750      	b.n	8007ff0 <__adddf3+0x138>
 800814e:	bf00      	nop

08008150 <__aeabi_i2d>:
 8008150:	f090 0f00 	teq	r0, #0
 8008154:	bf04      	itt	eq
 8008156:	2100      	moveq	r1, #0
 8008158:	4770      	bxeq	lr
 800815a:	b530      	push	{r4, r5, lr}
 800815c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008160:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008164:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008168:	bf48      	it	mi
 800816a:	4240      	negmi	r0, r0
 800816c:	f04f 0100 	mov.w	r1, #0
 8008170:	e73e      	b.n	8007ff0 <__adddf3+0x138>
 8008172:	bf00      	nop

08008174 <__aeabi_f2d>:
 8008174:	0042      	lsls	r2, r0, #1
 8008176:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800817a:	ea4f 0131 	mov.w	r1, r1, rrx
 800817e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008182:	bf1f      	itttt	ne
 8008184:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008188:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800818c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008190:	4770      	bxne	lr
 8008192:	f092 0f00 	teq	r2, #0
 8008196:	bf14      	ite	ne
 8008198:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800819c:	4770      	bxeq	lr
 800819e:	b530      	push	{r4, r5, lr}
 80081a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80081a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80081ac:	e720      	b.n	8007ff0 <__adddf3+0x138>
 80081ae:	bf00      	nop

080081b0 <__aeabi_ul2d>:
 80081b0:	ea50 0201 	orrs.w	r2, r0, r1
 80081b4:	bf08      	it	eq
 80081b6:	4770      	bxeq	lr
 80081b8:	b530      	push	{r4, r5, lr}
 80081ba:	f04f 0500 	mov.w	r5, #0
 80081be:	e00a      	b.n	80081d6 <__aeabi_l2d+0x16>

080081c0 <__aeabi_l2d>:
 80081c0:	ea50 0201 	orrs.w	r2, r0, r1
 80081c4:	bf08      	it	eq
 80081c6:	4770      	bxeq	lr
 80081c8:	b530      	push	{r4, r5, lr}
 80081ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80081ce:	d502      	bpl.n	80081d6 <__aeabi_l2d+0x16>
 80081d0:	4240      	negs	r0, r0
 80081d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80081e2:	f43f aedc 	beq.w	8007f9e <__adddf3+0xe6>
 80081e6:	f04f 0203 	mov.w	r2, #3
 80081ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081ee:	bf18      	it	ne
 80081f0:	3203      	addne	r2, #3
 80081f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081f6:	bf18      	it	ne
 80081f8:	3203      	addne	r2, #3
 80081fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80081fe:	f1c2 0320 	rsb	r3, r2, #32
 8008202:	fa00 fc03 	lsl.w	ip, r0, r3
 8008206:	fa20 f002 	lsr.w	r0, r0, r2
 800820a:	fa01 fe03 	lsl.w	lr, r1, r3
 800820e:	ea40 000e 	orr.w	r0, r0, lr
 8008212:	fa21 f102 	lsr.w	r1, r1, r2
 8008216:	4414      	add	r4, r2
 8008218:	e6c1      	b.n	8007f9e <__adddf3+0xe6>
 800821a:	bf00      	nop

0800821c <__aeabi_dmul>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008222:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008226:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800822a:	bf1d      	ittte	ne
 800822c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008230:	ea94 0f0c 	teqne	r4, ip
 8008234:	ea95 0f0c 	teqne	r5, ip
 8008238:	f000 f8de 	bleq	80083f8 <__aeabi_dmul+0x1dc>
 800823c:	442c      	add	r4, r5
 800823e:	ea81 0603 	eor.w	r6, r1, r3
 8008242:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008246:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800824a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800824e:	bf18      	it	ne
 8008250:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800825c:	d038      	beq.n	80082d0 <__aeabi_dmul+0xb4>
 800825e:	fba0 ce02 	umull	ip, lr, r0, r2
 8008262:	f04f 0500 	mov.w	r5, #0
 8008266:	fbe1 e502 	umlal	lr, r5, r1, r2
 800826a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800826e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008272:	f04f 0600 	mov.w	r6, #0
 8008276:	fbe1 5603 	umlal	r5, r6, r1, r3
 800827a:	f09c 0f00 	teq	ip, #0
 800827e:	bf18      	it	ne
 8008280:	f04e 0e01 	orrne.w	lr, lr, #1
 8008284:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008288:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800828c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008290:	d204      	bcs.n	800829c <__aeabi_dmul+0x80>
 8008292:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008296:	416d      	adcs	r5, r5
 8008298:	eb46 0606 	adc.w	r6, r6, r6
 800829c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80082a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80082a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80082a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80082ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80082b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80082b4:	bf88      	it	hi
 80082b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80082ba:	d81e      	bhi.n	80082fa <__aeabi_dmul+0xde>
 80082bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80082c0:	bf08      	it	eq
 80082c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80082c6:	f150 0000 	adcs.w	r0, r0, #0
 80082ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80082d4:	ea46 0101 	orr.w	r1, r6, r1
 80082d8:	ea40 0002 	orr.w	r0, r0, r2
 80082dc:	ea81 0103 	eor.w	r1, r1, r3
 80082e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80082e4:	bfc2      	ittt	gt
 80082e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80082ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80082ee:	bd70      	popgt	{r4, r5, r6, pc}
 80082f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80082f4:	f04f 0e00 	mov.w	lr, #0
 80082f8:	3c01      	subs	r4, #1
 80082fa:	f300 80ab 	bgt.w	8008454 <__aeabi_dmul+0x238>
 80082fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008302:	bfde      	ittt	le
 8008304:	2000      	movle	r0, #0
 8008306:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800830a:	bd70      	pople	{r4, r5, r6, pc}
 800830c:	f1c4 0400 	rsb	r4, r4, #0
 8008310:	3c20      	subs	r4, #32
 8008312:	da35      	bge.n	8008380 <__aeabi_dmul+0x164>
 8008314:	340c      	adds	r4, #12
 8008316:	dc1b      	bgt.n	8008350 <__aeabi_dmul+0x134>
 8008318:	f104 0414 	add.w	r4, r4, #20
 800831c:	f1c4 0520 	rsb	r5, r4, #32
 8008320:	fa00 f305 	lsl.w	r3, r0, r5
 8008324:	fa20 f004 	lsr.w	r0, r0, r4
 8008328:	fa01 f205 	lsl.w	r2, r1, r5
 800832c:	ea40 0002 	orr.w	r0, r0, r2
 8008330:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800833c:	fa21 f604 	lsr.w	r6, r1, r4
 8008340:	eb42 0106 	adc.w	r1, r2, r6
 8008344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008348:	bf08      	it	eq
 800834a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	f1c4 040c 	rsb	r4, r4, #12
 8008354:	f1c4 0520 	rsb	r5, r4, #32
 8008358:	fa00 f304 	lsl.w	r3, r0, r4
 800835c:	fa20 f005 	lsr.w	r0, r0, r5
 8008360:	fa01 f204 	lsl.w	r2, r1, r4
 8008364:	ea40 0002 	orr.w	r0, r0, r2
 8008368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800836c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008370:	f141 0100 	adc.w	r1, r1, #0
 8008374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008378:	bf08      	it	eq
 800837a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f1c4 0520 	rsb	r5, r4, #32
 8008384:	fa00 f205 	lsl.w	r2, r0, r5
 8008388:	ea4e 0e02 	orr.w	lr, lr, r2
 800838c:	fa20 f304 	lsr.w	r3, r0, r4
 8008390:	fa01 f205 	lsl.w	r2, r1, r5
 8008394:	ea43 0302 	orr.w	r3, r3, r2
 8008398:	fa21 f004 	lsr.w	r0, r1, r4
 800839c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80083a0:	fa21 f204 	lsr.w	r2, r1, r4
 80083a4:	ea20 0002 	bic.w	r0, r0, r2
 80083a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80083ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80083b0:	bf08      	it	eq
 80083b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	f094 0f00 	teq	r4, #0
 80083bc:	d10f      	bne.n	80083de <__aeabi_dmul+0x1c2>
 80083be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80083c2:	0040      	lsls	r0, r0, #1
 80083c4:	eb41 0101 	adc.w	r1, r1, r1
 80083c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083cc:	bf08      	it	eq
 80083ce:	3c01      	subeq	r4, #1
 80083d0:	d0f7      	beq.n	80083c2 <__aeabi_dmul+0x1a6>
 80083d2:	ea41 0106 	orr.w	r1, r1, r6
 80083d6:	f095 0f00 	teq	r5, #0
 80083da:	bf18      	it	ne
 80083dc:	4770      	bxne	lr
 80083de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80083e2:	0052      	lsls	r2, r2, #1
 80083e4:	eb43 0303 	adc.w	r3, r3, r3
 80083e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80083ec:	bf08      	it	eq
 80083ee:	3d01      	subeq	r5, #1
 80083f0:	d0f7      	beq.n	80083e2 <__aeabi_dmul+0x1c6>
 80083f2:	ea43 0306 	orr.w	r3, r3, r6
 80083f6:	4770      	bx	lr
 80083f8:	ea94 0f0c 	teq	r4, ip
 80083fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008400:	bf18      	it	ne
 8008402:	ea95 0f0c 	teqne	r5, ip
 8008406:	d00c      	beq.n	8008422 <__aeabi_dmul+0x206>
 8008408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800840c:	bf18      	it	ne
 800840e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008412:	d1d1      	bne.n	80083b8 <__aeabi_dmul+0x19c>
 8008414:	ea81 0103 	eor.w	r1, r1, r3
 8008418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800841c:	f04f 0000 	mov.w	r0, #0
 8008420:	bd70      	pop	{r4, r5, r6, pc}
 8008422:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008426:	bf06      	itte	eq
 8008428:	4610      	moveq	r0, r2
 800842a:	4619      	moveq	r1, r3
 800842c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008430:	d019      	beq.n	8008466 <__aeabi_dmul+0x24a>
 8008432:	ea94 0f0c 	teq	r4, ip
 8008436:	d102      	bne.n	800843e <__aeabi_dmul+0x222>
 8008438:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800843c:	d113      	bne.n	8008466 <__aeabi_dmul+0x24a>
 800843e:	ea95 0f0c 	teq	r5, ip
 8008442:	d105      	bne.n	8008450 <__aeabi_dmul+0x234>
 8008444:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008448:	bf1c      	itt	ne
 800844a:	4610      	movne	r0, r2
 800844c:	4619      	movne	r1, r3
 800844e:	d10a      	bne.n	8008466 <__aeabi_dmul+0x24a>
 8008450:	ea81 0103 	eor.w	r1, r1, r3
 8008454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008458:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800845c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008460:	f04f 0000 	mov.w	r0, #0
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800846a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800846e:	bd70      	pop	{r4, r5, r6, pc}

08008470 <__aeabi_ddiv>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008476:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800847a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800847e:	bf1d      	ittte	ne
 8008480:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008484:	ea94 0f0c 	teqne	r4, ip
 8008488:	ea95 0f0c 	teqne	r5, ip
 800848c:	f000 f8a7 	bleq	80085de <__aeabi_ddiv+0x16e>
 8008490:	eba4 0405 	sub.w	r4, r4, r5
 8008494:	ea81 0e03 	eor.w	lr, r1, r3
 8008498:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800849c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80084a0:	f000 8088 	beq.w	80085b4 <__aeabi_ddiv+0x144>
 80084a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80084a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80084ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80084b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80084b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80084b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80084bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80084c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80084c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80084c8:	429d      	cmp	r5, r3
 80084ca:	bf08      	it	eq
 80084cc:	4296      	cmpeq	r6, r2
 80084ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80084d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80084d6:	d202      	bcs.n	80084de <__aeabi_ddiv+0x6e>
 80084d8:	085b      	lsrs	r3, r3, #1
 80084da:	ea4f 0232 	mov.w	r2, r2, rrx
 80084de:	1ab6      	subs	r6, r6, r2
 80084e0:	eb65 0503 	sbc.w	r5, r5, r3
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80084ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80084f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80084f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084fa:	bf22      	ittt	cs
 80084fc:	1ab6      	subcs	r6, r6, r2
 80084fe:	4675      	movcs	r5, lr
 8008500:	ea40 000c 	orrcs.w	r0, r0, ip
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	ea4f 0232 	mov.w	r2, r2, rrx
 800850a:	ebb6 0e02 	subs.w	lr, r6, r2
 800850e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008512:	bf22      	ittt	cs
 8008514:	1ab6      	subcs	r6, r6, r2
 8008516:	4675      	movcs	r5, lr
 8008518:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008522:	ebb6 0e02 	subs.w	lr, r6, r2
 8008526:	eb75 0e03 	sbcs.w	lr, r5, r3
 800852a:	bf22      	ittt	cs
 800852c:	1ab6      	subcs	r6, r6, r2
 800852e:	4675      	movcs	r5, lr
 8008530:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	ea4f 0232 	mov.w	r2, r2, rrx
 800853a:	ebb6 0e02 	subs.w	lr, r6, r2
 800853e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008542:	bf22      	ittt	cs
 8008544:	1ab6      	subcs	r6, r6, r2
 8008546:	4675      	movcs	r5, lr
 8008548:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800854c:	ea55 0e06 	orrs.w	lr, r5, r6
 8008550:	d018      	beq.n	8008584 <__aeabi_ddiv+0x114>
 8008552:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008556:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800855a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800855e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008562:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008566:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800856a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800856e:	d1c0      	bne.n	80084f2 <__aeabi_ddiv+0x82>
 8008570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008574:	d10b      	bne.n	800858e <__aeabi_ddiv+0x11e>
 8008576:	ea41 0100 	orr.w	r1, r1, r0
 800857a:	f04f 0000 	mov.w	r0, #0
 800857e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008582:	e7b6      	b.n	80084f2 <__aeabi_ddiv+0x82>
 8008584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008588:	bf04      	itt	eq
 800858a:	4301      	orreq	r1, r0
 800858c:	2000      	moveq	r0, #0
 800858e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008592:	bf88      	it	hi
 8008594:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008598:	f63f aeaf 	bhi.w	80082fa <__aeabi_dmul+0xde>
 800859c:	ebb5 0c03 	subs.w	ip, r5, r3
 80085a0:	bf04      	itt	eq
 80085a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80085a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80085aa:	f150 0000 	adcs.w	r0, r0, #0
 80085ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80085b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80085bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80085c0:	bfc2      	ittt	gt
 80085c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085ca:	bd70      	popgt	{r4, r5, r6, pc}
 80085cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085d0:	f04f 0e00 	mov.w	lr, #0
 80085d4:	3c01      	subs	r4, #1
 80085d6:	e690      	b.n	80082fa <__aeabi_dmul+0xde>
 80085d8:	ea45 0e06 	orr.w	lr, r5, r6
 80085dc:	e68d      	b.n	80082fa <__aeabi_dmul+0xde>
 80085de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085e2:	ea94 0f0c 	teq	r4, ip
 80085e6:	bf08      	it	eq
 80085e8:	ea95 0f0c 	teqeq	r5, ip
 80085ec:	f43f af3b 	beq.w	8008466 <__aeabi_dmul+0x24a>
 80085f0:	ea94 0f0c 	teq	r4, ip
 80085f4:	d10a      	bne.n	800860c <__aeabi_ddiv+0x19c>
 80085f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085fa:	f47f af34 	bne.w	8008466 <__aeabi_dmul+0x24a>
 80085fe:	ea95 0f0c 	teq	r5, ip
 8008602:	f47f af25 	bne.w	8008450 <__aeabi_dmul+0x234>
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	e72c      	b.n	8008466 <__aeabi_dmul+0x24a>
 800860c:	ea95 0f0c 	teq	r5, ip
 8008610:	d106      	bne.n	8008620 <__aeabi_ddiv+0x1b0>
 8008612:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008616:	f43f aefd 	beq.w	8008414 <__aeabi_dmul+0x1f8>
 800861a:	4610      	mov	r0, r2
 800861c:	4619      	mov	r1, r3
 800861e:	e722      	b.n	8008466 <__aeabi_dmul+0x24a>
 8008620:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008624:	bf18      	it	ne
 8008626:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800862a:	f47f aec5 	bne.w	80083b8 <__aeabi_dmul+0x19c>
 800862e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008632:	f47f af0d 	bne.w	8008450 <__aeabi_dmul+0x234>
 8008636:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800863a:	f47f aeeb 	bne.w	8008414 <__aeabi_dmul+0x1f8>
 800863e:	e712      	b.n	8008466 <__aeabi_dmul+0x24a>

08008640 <__gedf2>:
 8008640:	f04f 3cff 	mov.w	ip, #4294967295
 8008644:	e006      	b.n	8008654 <__cmpdf2+0x4>
 8008646:	bf00      	nop

08008648 <__ledf2>:
 8008648:	f04f 0c01 	mov.w	ip, #1
 800864c:	e002      	b.n	8008654 <__cmpdf2+0x4>
 800864e:	bf00      	nop

08008650 <__cmpdf2>:
 8008650:	f04f 0c01 	mov.w	ip, #1
 8008654:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008658:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800865c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008664:	bf18      	it	ne
 8008666:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800866a:	d01b      	beq.n	80086a4 <__cmpdf2+0x54>
 800866c:	b001      	add	sp, #4
 800866e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008672:	bf0c      	ite	eq
 8008674:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008678:	ea91 0f03 	teqne	r1, r3
 800867c:	bf02      	ittt	eq
 800867e:	ea90 0f02 	teqeq	r0, r2
 8008682:	2000      	moveq	r0, #0
 8008684:	4770      	bxeq	lr
 8008686:	f110 0f00 	cmn.w	r0, #0
 800868a:	ea91 0f03 	teq	r1, r3
 800868e:	bf58      	it	pl
 8008690:	4299      	cmppl	r1, r3
 8008692:	bf08      	it	eq
 8008694:	4290      	cmpeq	r0, r2
 8008696:	bf2c      	ite	cs
 8008698:	17d8      	asrcs	r0, r3, #31
 800869a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800869e:	f040 0001 	orr.w	r0, r0, #1
 80086a2:	4770      	bx	lr
 80086a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80086a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086ac:	d102      	bne.n	80086b4 <__cmpdf2+0x64>
 80086ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80086b2:	d107      	bne.n	80086c4 <__cmpdf2+0x74>
 80086b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80086b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086bc:	d1d6      	bne.n	800866c <__cmpdf2+0x1c>
 80086be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80086c2:	d0d3      	beq.n	800866c <__cmpdf2+0x1c>
 80086c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop

080086cc <__aeabi_cdrcmple>:
 80086cc:	4684      	mov	ip, r0
 80086ce:	4610      	mov	r0, r2
 80086d0:	4662      	mov	r2, ip
 80086d2:	468c      	mov	ip, r1
 80086d4:	4619      	mov	r1, r3
 80086d6:	4663      	mov	r3, ip
 80086d8:	e000      	b.n	80086dc <__aeabi_cdcmpeq>
 80086da:	bf00      	nop

080086dc <__aeabi_cdcmpeq>:
 80086dc:	b501      	push	{r0, lr}
 80086de:	f7ff ffb7 	bl	8008650 <__cmpdf2>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	bf48      	it	mi
 80086e6:	f110 0f00 	cmnmi.w	r0, #0
 80086ea:	bd01      	pop	{r0, pc}

080086ec <__aeabi_dcmpeq>:
 80086ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086f0:	f7ff fff4 	bl	80086dc <__aeabi_cdcmpeq>
 80086f4:	bf0c      	ite	eq
 80086f6:	2001      	moveq	r0, #1
 80086f8:	2000      	movne	r0, #0
 80086fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80086fe:	bf00      	nop

08008700 <__aeabi_dcmplt>:
 8008700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008704:	f7ff ffea 	bl	80086dc <__aeabi_cdcmpeq>
 8008708:	bf34      	ite	cc
 800870a:	2001      	movcc	r0, #1
 800870c:	2000      	movcs	r0, #0
 800870e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008712:	bf00      	nop

08008714 <__aeabi_dcmple>:
 8008714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008718:	f7ff ffe0 	bl	80086dc <__aeabi_cdcmpeq>
 800871c:	bf94      	ite	ls
 800871e:	2001      	movls	r0, #1
 8008720:	2000      	movhi	r0, #0
 8008722:	f85d fb08 	ldr.w	pc, [sp], #8
 8008726:	bf00      	nop

08008728 <__aeabi_dcmpge>:
 8008728:	f84d ed08 	str.w	lr, [sp, #-8]!
 800872c:	f7ff ffce 	bl	80086cc <__aeabi_cdrcmple>
 8008730:	bf94      	ite	ls
 8008732:	2001      	movls	r0, #1
 8008734:	2000      	movhi	r0, #0
 8008736:	f85d fb08 	ldr.w	pc, [sp], #8
 800873a:	bf00      	nop

0800873c <__aeabi_dcmpgt>:
 800873c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008740:	f7ff ffc4 	bl	80086cc <__aeabi_cdrcmple>
 8008744:	bf34      	ite	cc
 8008746:	2001      	movcc	r0, #1
 8008748:	2000      	movcs	r0, #0
 800874a:	f85d fb08 	ldr.w	pc, [sp], #8
 800874e:	bf00      	nop

08008750 <__aeabi_d2iz>:
 8008750:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008754:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008758:	d215      	bcs.n	8008786 <__aeabi_d2iz+0x36>
 800875a:	d511      	bpl.n	8008780 <__aeabi_d2iz+0x30>
 800875c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008760:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008764:	d912      	bls.n	800878c <__aeabi_d2iz+0x3c>
 8008766:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800876a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800876e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008772:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008776:	fa23 f002 	lsr.w	r0, r3, r2
 800877a:	bf18      	it	ne
 800877c:	4240      	negne	r0, r0
 800877e:	4770      	bx	lr
 8008780:	f04f 0000 	mov.w	r0, #0
 8008784:	4770      	bx	lr
 8008786:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800878a:	d105      	bne.n	8008798 <__aeabi_d2iz+0x48>
 800878c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008790:	bf08      	it	eq
 8008792:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008796:	4770      	bx	lr
 8008798:	f04f 0000 	mov.w	r0, #0
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop

080087a0 <__aeabi_d2f>:
 80087a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80087a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80087a8:	bf24      	itt	cs
 80087aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80087ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80087b2:	d90d      	bls.n	80087d0 <__aeabi_d2f+0x30>
 80087b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80087b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80087bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80087c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80087c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80087c8:	bf08      	it	eq
 80087ca:	f020 0001 	biceq.w	r0, r0, #1
 80087ce:	4770      	bx	lr
 80087d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80087d4:	d121      	bne.n	800881a <__aeabi_d2f+0x7a>
 80087d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80087da:	bfbc      	itt	lt
 80087dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80087e0:	4770      	bxlt	lr
 80087e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80087ea:	f1c2 0218 	rsb	r2, r2, #24
 80087ee:	f1c2 0c20 	rsb	ip, r2, #32
 80087f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80087f6:	fa20 f002 	lsr.w	r0, r0, r2
 80087fa:	bf18      	it	ne
 80087fc:	f040 0001 	orrne.w	r0, r0, #1
 8008800:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008804:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008808:	fa03 fc0c 	lsl.w	ip, r3, ip
 800880c:	ea40 000c 	orr.w	r0, r0, ip
 8008810:	fa23 f302 	lsr.w	r3, r3, r2
 8008814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008818:	e7cc      	b.n	80087b4 <__aeabi_d2f+0x14>
 800881a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800881e:	d107      	bne.n	8008830 <__aeabi_d2f+0x90>
 8008820:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008824:	bf1e      	ittt	ne
 8008826:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800882a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800882e:	4770      	bxne	lr
 8008830:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	f649 1654 	movw	r6, #39252	; 0x9954
 8008846:	f649 1554 	movw	r5, #39252	; 0x9954
 800884a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800884e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8008852:	1b76      	subs	r6, r6, r5
 8008854:	10b6      	asrs	r6, r6, #2
 8008856:	d007      	beq.n	8008868 <__libc_init_array+0x28>
 8008858:	3d04      	subs	r5, #4
 800885a:	2400      	movs	r4, #0
 800885c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8008860:	3401      	adds	r4, #1
 8008862:	4798      	blx	r3
 8008864:	42a6      	cmp	r6, r4
 8008866:	d1f9      	bne.n	800885c <__libc_init_array+0x1c>
 8008868:	f649 1670 	movw	r6, #39280	; 0x9970
 800886c:	f649 1554 	movw	r5, #39252	; 0x9954
 8008870:	f6c0 0600 	movt	r6, #2048	; 0x800
 8008874:	f6c0 0500 	movt	r5, #2048	; 0x800
 8008878:	1b76      	subs	r6, r6, r5
 800887a:	f7ff f821 	bl	80078c0 <_defaultHandler>
 800887e:	10b6      	asrs	r6, r6, #2
 8008880:	d008      	beq.n	8008894 <__libc_init_array+0x54>
 8008882:	3d04      	subs	r5, #4
 8008884:	2400      	movs	r4, #0
 8008886:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800888a:	3401      	adds	r4, #1
 800888c:	4798      	blx	r3
 800888e:	42a6      	cmp	r6, r4
 8008890:	d1f9      	bne.n	8008886 <__libc_init_array+0x46>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	bd70      	pop	{r4, r5, r6, pc}
 8008896:	bf00      	nop

08008898 <malloc>:
 8008898:	f240 5370 	movw	r3, #1392	; 0x570
 800889c:	4601      	mov	r1, r0
 800889e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	f000 b808 	b.w	80088b8 <_malloc_r>

080088a8 <free>:
 80088a8:	f240 5370 	movw	r3, #1392	; 0x570
 80088ac:	4601      	mov	r1, r0
 80088ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	f000 bb22 	b.w	8008efc <_free_r>

080088b8 <_malloc_r>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	f101 040b 	add.w	r4, r1, #11
 80088c0:	2c16      	cmp	r4, #22
 80088c2:	b083      	sub	sp, #12
 80088c4:	4607      	mov	r7, r0
 80088c6:	d930      	bls.n	800892a <_malloc_r+0x72>
 80088c8:	f024 0407 	bic.w	r4, r4, #7
 80088cc:	0fe3      	lsrs	r3, r4, #31
 80088ce:	428c      	cmp	r4, r1
 80088d0:	bf2c      	ite	cs
 80088d2:	4619      	movcs	r1, r3
 80088d4:	f043 0101 	orrcc.w	r1, r3, #1
 80088d8:	2900      	cmp	r1, #0
 80088da:	d12f      	bne.n	800893c <_malloc_r+0x84>
 80088dc:	4638      	mov	r0, r7
 80088de:	f000 fab7 	bl	8008e50 <__malloc_lock>
 80088e2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80088e6:	d22e      	bcs.n	8008946 <_malloc_r+0x8e>
 80088e8:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 80088ec:	f240 1660 	movw	r6, #352	; 0x160
 80088f0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80088f4:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 80088f8:	68d3      	ldr	r3, [r2, #12]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	f000 8211 	beq.w	8008d22 <_malloc_r+0x46a>
 8008900:	6859      	ldr	r1, [r3, #4]
 8008902:	f103 0808 	add.w	r8, r3, #8
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	4638      	mov	r0, r7
 800890a:	f021 0403 	bic.w	r4, r1, #3
 800890e:	6899      	ldr	r1, [r3, #8]
 8008910:	191b      	adds	r3, r3, r4
 8008912:	685c      	ldr	r4, [r3, #4]
 8008914:	60ca      	str	r2, [r1, #12]
 8008916:	f044 0401 	orr.w	r4, r4, #1
 800891a:	6091      	str	r1, [r2, #8]
 800891c:	605c      	str	r4, [r3, #4]
 800891e:	f000 fa99 	bl	8008e54 <__malloc_unlock>
 8008922:	4640      	mov	r0, r8
 8008924:	b003      	add	sp, #12
 8008926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	2300      	movs	r3, #0
 800892c:	2410      	movs	r4, #16
 800892e:	428c      	cmp	r4, r1
 8008930:	bf2c      	ite	cs
 8008932:	4619      	movcs	r1, r3
 8008934:	f043 0101 	orrcc.w	r1, r3, #1
 8008938:	2900      	cmp	r1, #0
 800893a:	d0cf      	beq.n	80088dc <_malloc_r+0x24>
 800893c:	230c      	movs	r3, #12
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	e7ed      	b.n	8008922 <_malloc_r+0x6a>
 8008946:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 800894a:	bf04      	itt	eq
 800894c:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8008950:	ea4f 054c 	moveq.w	r5, ip, lsl #1
 8008954:	f040 808f 	bne.w	8008a76 <_malloc_r+0x1be>
 8008958:	f240 1660 	movw	r6, #352	; 0x160
 800895c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8008960:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8008964:	68eb      	ldr	r3, [r5, #12]
 8008966:	429d      	cmp	r5, r3
 8008968:	d106      	bne.n	8008978 <_malloc_r+0xc0>
 800896a:	e00d      	b.n	8008988 <_malloc_r+0xd0>
 800896c:	2a00      	cmp	r2, #0
 800896e:	f280 8155 	bge.w	8008c1c <_malloc_r+0x364>
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	429d      	cmp	r5, r3
 8008976:	d007      	beq.n	8008988 <_malloc_r+0xd0>
 8008978:	6859      	ldr	r1, [r3, #4]
 800897a:	f021 0103 	bic.w	r1, r1, #3
 800897e:	1b0a      	subs	r2, r1, r4
 8008980:	2a0f      	cmp	r2, #15
 8008982:	ddf3      	ble.n	800896c <_malloc_r+0xb4>
 8008984:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008988:	f10c 0c01 	add.w	ip, ip, #1
 800898c:	f240 1260 	movw	r2, #352	; 0x160
 8008990:	6933      	ldr	r3, [r6, #16]
 8008992:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008996:	f102 0e08 	add.w	lr, r2, #8
 800899a:	4573      	cmp	r3, lr
 800899c:	bf08      	it	eq
 800899e:	f8d2 9004 	ldreq.w	r9, [r2, #4]
 80089a2:	d022      	beq.n	80089ea <_malloc_r+0x132>
 80089a4:	6858      	ldr	r0, [r3, #4]
 80089a6:	f020 0003 	bic.w	r0, r0, #3
 80089aa:	1b01      	subs	r1, r0, r4
 80089ac:	290f      	cmp	r1, #15
 80089ae:	f300 8184 	bgt.w	8008cba <_malloc_r+0x402>
 80089b2:	2900      	cmp	r1, #0
 80089b4:	f8c2 e014 	str.w	lr, [r2, #20]
 80089b8:	f8c2 e010 	str.w	lr, [r2, #16]
 80089bc:	da66      	bge.n	8008a8c <_malloc_r+0x1d4>
 80089be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80089c2:	f080 814e 	bcs.w	8008c62 <_malloc_r+0x3aa>
 80089c6:	08c1      	lsrs	r1, r0, #3
 80089c8:	f04f 0801 	mov.w	r8, #1
 80089cc:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80089d0:	1089      	asrs	r1, r1, #2
 80089d2:	fa08 f801 	lsl.w	r8, r8, r1
 80089d6:	6851      	ldr	r1, [r2, #4]
 80089d8:	6885      	ldr	r5, [r0, #8]
 80089da:	60d8      	str	r0, [r3, #12]
 80089dc:	ea48 0901 	orr.w	r9, r8, r1
 80089e0:	f8c2 9004 	str.w	r9, [r2, #4]
 80089e4:	609d      	str	r5, [r3, #8]
 80089e6:	60eb      	str	r3, [r5, #12]
 80089e8:	6083      	str	r3, [r0, #8]
 80089ea:	2201      	movs	r2, #1
 80089ec:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	454b      	cmp	r3, r9
 80089f6:	d854      	bhi.n	8008aa2 <_malloc_r+0x1ea>
 80089f8:	ea19 0f03 	tst.w	r9, r3
 80089fc:	d10d      	bne.n	8008a1a <_malloc_r+0x162>
 80089fe:	4093      	lsls	r3, r2
 8008a00:	f02c 0c03 	bic.w	ip, ip, #3
 8008a04:	ea19 0f03 	tst.w	r9, r3
 8008a08:	f10c 0c04 	add.w	ip, ip, #4
 8008a0c:	d105      	bne.n	8008a1a <_malloc_r+0x162>
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	f10c 0c04 	add.w	ip, ip, #4
 8008a14:	ea19 0f03 	tst.w	r9, r3
 8008a18:	d0f9      	beq.n	8008a0e <_malloc_r+0x156>
 8008a1a:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 8008a1e:	46e0      	mov	r8, ip
 8008a20:	4648      	mov	r0, r9
 8008a22:	68c2      	ldr	r2, [r0, #12]
 8008a24:	4290      	cmp	r0, r2
 8008a26:	d107      	bne.n	8008a38 <_malloc_r+0x180>
 8008a28:	e15b      	b.n	8008ce2 <_malloc_r+0x42a>
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	f280 8183 	bge.w	8008d36 <_malloc_r+0x47e>
 8008a30:	68d2      	ldr	r2, [r2, #12]
 8008a32:	4290      	cmp	r0, r2
 8008a34:	f000 8155 	beq.w	8008ce2 <_malloc_r+0x42a>
 8008a38:	6855      	ldr	r5, [r2, #4]
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	1b29      	subs	r1, r5, r4
 8008a40:	290f      	cmp	r1, #15
 8008a42:	ddf2      	ble.n	8008a2a <_malloc_r+0x172>
 8008a44:	4690      	mov	r8, r2
 8008a46:	1913      	adds	r3, r2, r4
 8008a48:	68d5      	ldr	r5, [r2, #12]
 8008a4a:	f044 0001 	orr.w	r0, r4, #1
 8008a4e:	f858 4f08 	ldr.w	r4, [r8, #8]!
 8008a52:	f041 0c01 	orr.w	ip, r1, #1
 8008a56:	6050      	str	r0, [r2, #4]
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f8c3 c004 	str.w	ip, [r3, #4]
 8008a5e:	60e5      	str	r5, [r4, #12]
 8008a60:	60ac      	str	r4, [r5, #8]
 8008a62:	6173      	str	r3, [r6, #20]
 8008a64:	6133      	str	r3, [r6, #16]
 8008a66:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008a6a:	f8c3 e008 	str.w	lr, [r3, #8]
 8008a6e:	5059      	str	r1, [r3, r1]
 8008a70:	f000 f9f0 	bl	8008e54 <__malloc_unlock>
 8008a74:	e755      	b.n	8008922 <_malloc_r+0x6a>
 8008a76:	f1bc 0f04 	cmp.w	ip, #4
 8008a7a:	f200 80de 	bhi.w	8008c3a <_malloc_r+0x382>
 8008a7e:	ea4f 1c94 	mov.w	ip, r4, lsr #6
 8008a82:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8008a86:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8008a8a:	e765      	b.n	8008958 <_malloc_r+0xa0>
 8008a8c:	181a      	adds	r2, r3, r0
 8008a8e:	f103 0808 	add.w	r8, r3, #8
 8008a92:	4638      	mov	r0, r7
 8008a94:	6853      	ldr	r3, [r2, #4]
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	6053      	str	r3, [r2, #4]
 8008a9c:	f000 f9da 	bl	8008e54 <__malloc_unlock>
 8008aa0:	e73f      	b.n	8008922 <_malloc_r+0x6a>
 8008aa2:	68b5      	ldr	r5, [r6, #8]
 8008aa4:	686b      	ldr	r3, [r5, #4]
 8008aa6:	f023 0a03 	bic.w	sl, r3, #3
 8008aaa:	4554      	cmp	r4, sl
 8008aac:	d804      	bhi.n	8008ab8 <_malloc_r+0x200>
 8008aae:	ebc4 030a 	rsb	r3, r4, sl
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	f300 80a4 	bgt.w	8008c00 <_malloc_r+0x348>
 8008ab8:	f641 0964 	movw	r9, #6244	; 0x1864
 8008abc:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8008ac0:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8008ac4:	eb05 020a 	add.w	r2, r5, sl
 8008ac8:	3101      	adds	r1, #1
 8008aca:	f8d9 3000 	ldr.w	r3, [r9]
 8008ace:	4423      	add	r3, r4
 8008ad0:	bf08      	it	eq
 8008ad2:	f103 0b10 	addeq.w	fp, r3, #16
 8008ad6:	d006      	beq.n	8008ae6 <_malloc_r+0x22e>
 8008ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008adc:	330f      	adds	r3, #15
 8008ade:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008ae2:	f023 0b0f 	bic.w	fp, r3, #15
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	4659      	mov	r1, fp
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	f7fe fed6 	bl	800789c <_sbrk_r>
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	1c41      	adds	r1, r0, #1
 8008af4:	4680      	mov	r8, r0
 8008af6:	f000 8168 	beq.w	8008dca <_malloc_r+0x512>
 8008afa:	4282      	cmp	r2, r0
 8008afc:	f200 8131 	bhi.w	8008d62 <_malloc_r+0x4aa>
 8008b00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008b04:	4542      	cmp	r2, r8
 8008b06:	445b      	add	r3, fp
 8008b08:	f8c9 3004 	str.w	r3, [r9, #4]
 8008b0c:	f000 8166 	beq.w	8008ddc <_malloc_r+0x524>
 8008b10:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8008b14:	f240 1060 	movw	r0, #352	; 0x160
 8008b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	bf17      	itett	ne
 8008b20:	ebc2 0208 	rsbne	r2, r2, r8
 8008b24:	f8c0 8408 	streq.w	r8, [r0, #1032]	; 0x408
 8008b28:	189b      	addne	r3, r3, r2
 8008b2a:	f8c9 3004 	strne.w	r3, [r9, #4]
 8008b2e:	f018 0307 	ands.w	r3, r8, #7
 8008b32:	4638      	mov	r0, r7
 8008b34:	bf1f      	itttt	ne
 8008b36:	f1c3 0208 	rsbne	r2, r3, #8
 8008b3a:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8008b3e:	4490      	addne	r8, r2
 8008b40:	f103 0208 	addne.w	r2, r3, #8
 8008b44:	eb08 030b 	add.w	r3, r8, fp
 8008b48:	bf08      	it	eq
 8008b4a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8008b4e:	051b      	lsls	r3, r3, #20
 8008b50:	0d1b      	lsrs	r3, r3, #20
 8008b52:	ebc3 0b02 	rsb	fp, r3, r2
 8008b56:	4659      	mov	r1, fp
 8008b58:	f7fe fea0 	bl	800789c <_sbrk_r>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	f000 8149 	beq.w	8008df4 <_malloc_r+0x53c>
 8008b62:	ebc8 0100 	rsb	r1, r8, r0
 8008b66:	4459      	add	r1, fp
 8008b68:	f041 0101 	orr.w	r1, r1, #1
 8008b6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008b70:	42b5      	cmp	r5, r6
 8008b72:	f641 0264 	movw	r2, #6244	; 0x1864
 8008b76:	f8c6 8008 	str.w	r8, [r6, #8]
 8008b7a:	445b      	add	r3, fp
 8008b7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008b80:	f8c8 1004 	str.w	r1, [r8, #4]
 8008b84:	f8c9 3004 	str.w	r3, [r9, #4]
 8008b88:	d018      	beq.n	8008bbc <_malloc_r+0x304>
 8008b8a:	f1ba 0f0f 	cmp.w	sl, #15
 8008b8e:	f240 810b 	bls.w	8008da8 <_malloc_r+0x4f0>
 8008b92:	f1aa 000c 	sub.w	r0, sl, #12
 8008b96:	6869      	ldr	r1, [r5, #4]
 8008b98:	f020 0007 	bic.w	r0, r0, #7
 8008b9c:	f04f 0c05 	mov.w	ip, #5
 8008ba0:	eb05 0e00 	add.w	lr, r5, r0
 8008ba4:	280f      	cmp	r0, #15
 8008ba6:	f001 0101 	and.w	r1, r1, #1
 8008baa:	ea40 0101 	orr.w	r1, r0, r1
 8008bae:	6069      	str	r1, [r5, #4]
 8008bb0:	f8ce c004 	str.w	ip, [lr, #4]
 8008bb4:	f8ce c008 	str.w	ip, [lr, #8]
 8008bb8:	f200 8120 	bhi.w	8008dfc <_malloc_r+0x544>
 8008bbc:	f641 0264 	movw	r2, #6244	; 0x1864
 8008bc0:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8008bc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008bc8:	68b5      	ldr	r5, [r6, #8]
 8008bca:	428b      	cmp	r3, r1
 8008bcc:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8008bd0:	bf88      	it	hi
 8008bd2:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8008bd4:	f641 0264 	movw	r2, #6244	; 0x1864
 8008bd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf88      	it	hi
 8008be0:	6313      	strhi	r3, [r2, #48]	; 0x30
 8008be2:	686a      	ldr	r2, [r5, #4]
 8008be4:	f022 0203 	bic.w	r2, r2, #3
 8008be8:	4294      	cmp	r4, r2
 8008bea:	ebc4 0302 	rsb	r3, r4, r2
 8008bee:	d801      	bhi.n	8008bf4 <_malloc_r+0x33c>
 8008bf0:	2b0f      	cmp	r3, #15
 8008bf2:	dc05      	bgt.n	8008c00 <_malloc_r+0x348>
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f04f 0800 	mov.w	r8, #0
 8008bfa:	f000 f92b 	bl	8008e54 <__malloc_unlock>
 8008bfe:	e690      	b.n	8008922 <_malloc_r+0x6a>
 8008c00:	192a      	adds	r2, r5, r4
 8008c02:	f043 0301 	orr.w	r3, r3, #1
 8008c06:	f044 0401 	orr.w	r4, r4, #1
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	606c      	str	r4, [r5, #4]
 8008c0e:	f105 0808 	add.w	r8, r5, #8
 8008c12:	6053      	str	r3, [r2, #4]
 8008c14:	60b2      	str	r2, [r6, #8]
 8008c16:	f000 f91d 	bl	8008e54 <__malloc_unlock>
 8008c1a:	e682      	b.n	8008922 <_malloc_r+0x6a>
 8008c1c:	1859      	adds	r1, r3, r1
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	689c      	ldr	r4, [r3, #8]
 8008c22:	4638      	mov	r0, r7
 8008c24:	684d      	ldr	r5, [r1, #4]
 8008c26:	f103 0808 	add.w	r8, r3, #8
 8008c2a:	f045 0501 	orr.w	r5, r5, #1
 8008c2e:	60e2      	str	r2, [r4, #12]
 8008c30:	6094      	str	r4, [r2, #8]
 8008c32:	604d      	str	r5, [r1, #4]
 8008c34:	f000 f90e 	bl	8008e54 <__malloc_unlock>
 8008c38:	e673      	b.n	8008922 <_malloc_r+0x6a>
 8008c3a:	f1bc 0f14 	cmp.w	ip, #20
 8008c3e:	bf9c      	itt	ls
 8008c40:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8008c44:	ea4f 054c 	movls.w	r5, ip, lsl #1
 8008c48:	f67f ae86 	bls.w	8008958 <_malloc_r+0xa0>
 8008c4c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8008c50:	f200 8093 	bhi.w	8008d7a <_malloc_r+0x4c2>
 8008c54:	ea4f 3c14 	mov.w	ip, r4, lsr #12
 8008c58:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8008c5c:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8008c60:	e67a      	b.n	8008958 <_malloc_r+0xa0>
 8008c62:	0a42      	lsrs	r2, r0, #9
 8008c64:	2a04      	cmp	r2, #4
 8008c66:	d975      	bls.n	8008d54 <_malloc_r+0x49c>
 8008c68:	2a14      	cmp	r2, #20
 8008c6a:	bf9c      	itt	ls
 8008c6c:	f102 095b 	addls.w	r9, r2, #91	; 0x5b
 8008c70:	ea4f 0549 	movls.w	r5, r9, lsl #1
 8008c74:	d908      	bls.n	8008c88 <_malloc_r+0x3d0>
 8008c76:	2a54      	cmp	r2, #84	; 0x54
 8008c78:	f200 80c9 	bhi.w	8008e0e <_malloc_r+0x556>
 8008c7c:	ea4f 3910 	mov.w	r9, r0, lsr #12
 8008c80:	f109 096e 	add.w	r9, r9, #110	; 0x6e
 8008c84:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8008c88:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8008c8c:	f240 1860 	movw	r8, #352	; 0x160
 8008c90:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8008c94:	68aa      	ldr	r2, [r5, #8]
 8008c96:	42aa      	cmp	r2, r5
 8008c98:	d079      	beq.n	8008d8e <_malloc_r+0x4d6>
 8008c9a:	6851      	ldr	r1, [r2, #4]
 8008c9c:	f021 0103 	bic.w	r1, r1, #3
 8008ca0:	4288      	cmp	r0, r1
 8008ca2:	d202      	bcs.n	8008caa <_malloc_r+0x3f2>
 8008ca4:	6892      	ldr	r2, [r2, #8]
 8008ca6:	4295      	cmp	r5, r2
 8008ca8:	d1f7      	bne.n	8008c9a <_malloc_r+0x3e2>
 8008caa:	68d0      	ldr	r0, [r2, #12]
 8008cac:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8008cb0:	60d8      	str	r0, [r3, #12]
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	60d3      	str	r3, [r2, #12]
 8008cb6:	6083      	str	r3, [r0, #8]
 8008cb8:	e697      	b.n	80089ea <_malloc_r+0x132>
 8008cba:	191d      	adds	r5, r3, r4
 8008cbc:	f041 0601 	orr.w	r6, r1, #1
 8008cc0:	6155      	str	r5, [r2, #20]
 8008cc2:	f044 0401 	orr.w	r4, r4, #1
 8008cc6:	6115      	str	r5, [r2, #16]
 8008cc8:	4638      	mov	r0, r7
 8008cca:	605c      	str	r4, [r3, #4]
 8008ccc:	f103 0808 	add.w	r8, r3, #8
 8008cd0:	f8c5 e00c 	str.w	lr, [r5, #12]
 8008cd4:	f8c5 e008 	str.w	lr, [r5, #8]
 8008cd8:	606e      	str	r6, [r5, #4]
 8008cda:	5069      	str	r1, [r5, r1]
 8008cdc:	f000 f8ba 	bl	8008e54 <__malloc_unlock>
 8008ce0:	e61f      	b.n	8008922 <_malloc_r+0x6a>
 8008ce2:	f108 0801 	add.w	r8, r8, #1
 8008ce6:	3008      	adds	r0, #8
 8008ce8:	f018 0f03 	tst.w	r8, #3
 8008cec:	f47f ae99 	bne.w	8008a22 <_malloc_r+0x16a>
 8008cf0:	464a      	mov	r2, r9
 8008cf2:	f01c 0f03 	tst.w	ip, #3
 8008cf6:	f1a2 0108 	sub.w	r1, r2, #8
 8008cfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008cfe:	f000 809e 	beq.w	8008e3e <_malloc_r+0x586>
 8008d02:	6812      	ldr	r2, [r2, #0]
 8008d04:	428a      	cmp	r2, r1
 8008d06:	d0f4      	beq.n	8008cf2 <_malloc_r+0x43a>
 8008d08:	6872      	ldr	r2, [r6, #4]
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	f63f aec8 	bhi.w	8008aa2 <_malloc_r+0x1ea>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f43f aec5 	beq.w	8008aa2 <_malloc_r+0x1ea>
 8008d18:	421a      	tst	r2, r3
 8008d1a:	f000 8095 	beq.w	8008e48 <_malloc_r+0x590>
 8008d1e:	46c4      	mov	ip, r8
 8008d20:	e67b      	b.n	8008a1a <_malloc_r+0x162>
 8008d22:	f103 0208 	add.w	r2, r3, #8
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	f10c 0c02 	addeq.w	ip, ip, #2
 8008d30:	f43f ae2c 	beq.w	800898c <_malloc_r+0xd4>
 8008d34:	e5e4      	b.n	8008900 <_malloc_r+0x48>
 8008d36:	4690      	mov	r8, r2
 8008d38:	1955      	adds	r5, r2, r5
 8008d3a:	68d3      	ldr	r3, [r2, #12]
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f858 2f08 	ldr.w	r2, [r8, #8]!
 8008d42:	6869      	ldr	r1, [r5, #4]
 8008d44:	60d3      	str	r3, [r2, #12]
 8008d46:	f041 0101 	orr.w	r1, r1, #1
 8008d4a:	609a      	str	r2, [r3, #8]
 8008d4c:	6069      	str	r1, [r5, #4]
 8008d4e:	f000 f881 	bl	8008e54 <__malloc_unlock>
 8008d52:	e5e6      	b.n	8008922 <_malloc_r+0x6a>
 8008d54:	ea4f 1990 	mov.w	r9, r0, lsr #6
 8008d58:	f109 0938 	add.w	r9, r9, #56	; 0x38
 8008d5c:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8008d60:	e792      	b.n	8008c88 <_malloc_r+0x3d0>
 8008d62:	42b5      	cmp	r5, r6
 8008d64:	f240 1360 	movw	r3, #352	; 0x160
 8008d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008d6c:	f43f aec8 	beq.w	8008b00 <_malloc_r+0x248>
 8008d70:	689d      	ldr	r5, [r3, #8]
 8008d72:	686a      	ldr	r2, [r5, #4]
 8008d74:	f022 0203 	bic.w	r2, r2, #3
 8008d78:	e736      	b.n	8008be8 <_malloc_r+0x330>
 8008d7a:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8008d7e:	d819      	bhi.n	8008db4 <_malloc_r+0x4fc>
 8008d80:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
 8008d84:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8008d88:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8008d8c:	e5e4      	b.n	8008958 <_malloc_r+0xa0>
 8008d8e:	2501      	movs	r5, #1
 8008d90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d94:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8008d98:	4610      	mov	r0, r2
 8008d9a:	fa05 f509 	lsl.w	r5, r5, r9
 8008d9e:	ea45 0901 	orr.w	r9, r5, r1
 8008da2:	f8c8 9004 	str.w	r9, [r8, #4]
 8008da6:	e783      	b.n	8008cb0 <_malloc_r+0x3f8>
 8008da8:	2301      	movs	r3, #1
 8008daa:	4645      	mov	r5, r8
 8008dac:	f8c8 3004 	str.w	r3, [r8, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	e719      	b.n	8008be8 <_malloc_r+0x330>
 8008db4:	f240 5354 	movw	r3, #1364	; 0x554
 8008db8:	459c      	cmp	ip, r3
 8008dba:	d80b      	bhi.n	8008dd4 <_malloc_r+0x51c>
 8008dbc:	ea4f 4c94 	mov.w	ip, r4, lsr #18
 8008dc0:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 8008dc4:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8008dc8:	e5c6      	b.n	8008958 <_malloc_r+0xa0>
 8008dca:	68b5      	ldr	r5, [r6, #8]
 8008dcc:	686a      	ldr	r2, [r5, #4]
 8008dce:	f022 0203 	bic.w	r2, r2, #3
 8008dd2:	e709      	b.n	8008be8 <_malloc_r+0x330>
 8008dd4:	25fc      	movs	r5, #252	; 0xfc
 8008dd6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8008dda:	e5bd      	b.n	8008958 <_malloc_r+0xa0>
 8008ddc:	0511      	lsls	r1, r2, #20
 8008dde:	0d09      	lsrs	r1, r1, #20
 8008de0:	2900      	cmp	r1, #0
 8008de2:	f47f ae95 	bne.w	8008b10 <_malloc_r+0x258>
 8008de6:	68b2      	ldr	r2, [r6, #8]
 8008de8:	eb0b 010a 	add.w	r1, fp, sl
 8008dec:	f041 0101 	orr.w	r1, r1, #1
 8008df0:	6051      	str	r1, [r2, #4]
 8008df2:	e6e3      	b.n	8008bbc <_malloc_r+0x304>
 8008df4:	2101      	movs	r1, #1
 8008df6:	f04f 0b00 	mov.w	fp, #0
 8008dfa:	e6b7      	b.n	8008b6c <_malloc_r+0x2b4>
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f105 0108 	add.w	r1, r5, #8
 8008e02:	9201      	str	r2, [sp, #4]
 8008e04:	f000 f87a 	bl	8008efc <_free_r>
 8008e08:	9a01      	ldr	r2, [sp, #4]
 8008e0a:	6853      	ldr	r3, [r2, #4]
 8008e0c:	e6d6      	b.n	8008bbc <_malloc_r+0x304>
 8008e0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008e12:	d806      	bhi.n	8008e22 <_malloc_r+0x56a>
 8008e14:	ea4f 39d0 	mov.w	r9, r0, lsr #15
 8008e18:	f109 0977 	add.w	r9, r9, #119	; 0x77
 8008e1c:	ea4f 0549 	mov.w	r5, r9, lsl #1
 8008e20:	e732      	b.n	8008c88 <_malloc_r+0x3d0>
 8008e22:	f240 5154 	movw	r1, #1364	; 0x554
 8008e26:	25fc      	movs	r5, #252	; 0xfc
 8008e28:	428a      	cmp	r2, r1
 8008e2a:	f04f 097e 	mov.w	r9, #126	; 0x7e
 8008e2e:	bf9e      	ittt	ls
 8008e30:	ea4f 4990 	movls.w	r9, r0, lsr #18
 8008e34:	f109 097c 	addls.w	r9, r9, #124	; 0x7c
 8008e38:	ea4f 0549 	movls.w	r5, r9, lsl #1
 8008e3c:	e724      	b.n	8008c88 <_malloc_r+0x3d0>
 8008e3e:	6872      	ldr	r2, [r6, #4]
 8008e40:	ea22 0203 	bic.w	r2, r2, r3
 8008e44:	6072      	str	r2, [r6, #4]
 8008e46:	e760      	b.n	8008d0a <_malloc_r+0x452>
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	f108 0804 	add.w	r8, r8, #4
 8008e4e:	e763      	b.n	8008d18 <_malloc_r+0x460>

08008e50 <__malloc_lock>:
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop

08008e54 <__malloc_unlock>:
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <_malloc_trim_r>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	f240 1460 	movw	r4, #352	; 0x160
 8008e5e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008e62:	460f      	mov	r7, r1
 8008e64:	4605      	mov	r5, r0
 8008e66:	f7ff fff3 	bl	8008e50 <__malloc_lock>
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	685e      	ldr	r6, [r3, #4]
 8008e6e:	f026 0603 	bic.w	r6, r6, #3
 8008e72:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8008e76:	1bdf      	subs	r7, r3, r7
 8008e78:	0b3f      	lsrs	r7, r7, #12
 8008e7a:	3f01      	subs	r7, #1
 8008e7c:	033f      	lsls	r7, r7, #12
 8008e7e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8008e82:	db07      	blt.n	8008e94 <_malloc_trim_r+0x3c>
 8008e84:	2100      	movs	r1, #0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7fe fd08 	bl	800789c <_sbrk_r>
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	199b      	adds	r3, r3, r6
 8008e90:	4298      	cmp	r0, r3
 8008e92:	d004      	beq.n	8008e9e <_malloc_trim_r+0x46>
 8008e94:	4628      	mov	r0, r5
 8008e96:	f7ff ffdd 	bl	8008e54 <__malloc_unlock>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9e:	4279      	negs	r1, r7
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f7fe fcfb 	bl	800789c <_sbrk_r>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d010      	beq.n	8008ecc <_malloc_trim_r+0x74>
 8008eaa:	f641 0368 	movw	r3, #6248	; 0x1868
 8008eae:	68a1      	ldr	r1, [r4, #8]
 8008eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008eb4:	1bf6      	subs	r6, r6, r7
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f046 0601 	orr.w	r6, r6, #1
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	604e      	str	r6, [r1, #4]
 8008ec0:	1bd7      	subs	r7, r2, r7
 8008ec2:	601f      	str	r7, [r3, #0]
 8008ec4:	f7ff ffc6 	bl	8008e54 <__malloc_unlock>
 8008ec8:	2001      	movs	r0, #1
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f7fe fce4 	bl	800789c <_sbrk_r>
 8008ed4:	68a3      	ldr	r3, [r4, #8]
 8008ed6:	1ac2      	subs	r2, r0, r3
 8008ed8:	2a0f      	cmp	r2, #15
 8008eda:	dddb      	ble.n	8008e94 <_malloc_trim_r+0x3c>
 8008edc:	f240 5468 	movw	r4, #1384	; 0x568
 8008ee0:	f641 0168 	movw	r1, #6248	; 0x1868
 8008ee4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008ee8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008eec:	f042 0201 	orr.w	r2, r2, #1
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	1ac0      	subs	r0, r0, r3
 8008ef6:	6008      	str	r0, [r1, #0]
 8008ef8:	e7cc      	b.n	8008e94 <_malloc_trim_r+0x3c>
 8008efa:	bf00      	nop

08008efc <_free_r>:
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	460e      	mov	r6, r1
 8008f02:	4680      	mov	r8, r0
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d05c      	beq.n	8008fc2 <_free_r+0xc6>
 8008f08:	f7ff ffa2 	bl	8008e50 <__malloc_lock>
 8008f0c:	f240 1560 	movw	r5, #352	; 0x160
 8008f10:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8008f14:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8008f18:	f1a6 0408 	sub.w	r4, r6, #8
 8008f1c:	f021 0301 	bic.w	r3, r1, #1
 8008f20:	68af      	ldr	r7, [r5, #8]
 8008f22:	18e2      	adds	r2, r4, r3
 8008f24:	4297      	cmp	r7, r2
 8008f26:	6850      	ldr	r0, [r2, #4]
 8008f28:	f020 0003 	bic.w	r0, r0, #3
 8008f2c:	d067      	beq.n	8008ffe <_free_r+0x102>
 8008f2e:	f011 0101 	ands.w	r1, r1, #1
 8008f32:	6050      	str	r0, [r2, #4]
 8008f34:	d035      	beq.n	8008fa2 <_free_r+0xa6>
 8008f36:	2100      	movs	r1, #0
 8008f38:	1816      	adds	r6, r2, r0
 8008f3a:	6876      	ldr	r6, [r6, #4]
 8008f3c:	f016 0f01 	tst.w	r6, #1
 8008f40:	d106      	bne.n	8008f50 <_free_r+0x54>
 8008f42:	181b      	adds	r3, r3, r0
 8008f44:	6890      	ldr	r0, [r2, #8]
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d04d      	beq.n	8008fe6 <_free_r+0xea>
 8008f4a:	68d2      	ldr	r2, [r2, #12]
 8008f4c:	60c2      	str	r2, [r0, #12]
 8008f4e:	6090      	str	r0, [r2, #8]
 8008f50:	f043 0201 	orr.w	r2, r3, #1
 8008f54:	50e3      	str	r3, [r4, r3]
 8008f56:	6062      	str	r2, [r4, #4]
 8008f58:	b9f1      	cbnz	r1, 8008f98 <_free_r+0x9c>
 8008f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f5e:	d332      	bcc.n	8008fc6 <_free_r+0xca>
 8008f60:	0a5a      	lsrs	r2, r3, #9
 8008f62:	2a04      	cmp	r2, #4
 8008f64:	d86c      	bhi.n	8009040 <_free_r+0x144>
 8008f66:	0998      	lsrs	r0, r3, #6
 8008f68:	3038      	adds	r0, #56	; 0x38
 8008f6a:	0041      	lsls	r1, r0, #1
 8008f6c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8008f70:	f240 1160 	movw	r1, #352	; 0x160
 8008f74:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008f78:	68aa      	ldr	r2, [r5, #8]
 8008f7a:	42aa      	cmp	r2, r5
 8008f7c:	d06b      	beq.n	8009056 <_free_r+0x15a>
 8008f7e:	6851      	ldr	r1, [r2, #4]
 8008f80:	f021 0103 	bic.w	r1, r1, #3
 8008f84:	428b      	cmp	r3, r1
 8008f86:	d202      	bcs.n	8008f8e <_free_r+0x92>
 8008f88:	6892      	ldr	r2, [r2, #8]
 8008f8a:	4295      	cmp	r5, r2
 8008f8c:	d1f7      	bne.n	8008f7e <_free_r+0x82>
 8008f8e:	68d3      	ldr	r3, [r2, #12]
 8008f90:	60e3      	str	r3, [r4, #12]
 8008f92:	60a2      	str	r2, [r4, #8]
 8008f94:	60d4      	str	r4, [r2, #12]
 8008f96:	609c      	str	r4, [r3, #8]
 8008f98:	4640      	mov	r0, r8
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	f7ff bf59 	b.w	8008e54 <__malloc_unlock>
 8008fa2:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8008fa6:	f105 0c08 	add.w	ip, r5, #8
 8008faa:	1ba4      	subs	r4, r4, r6
 8008fac:	199b      	adds	r3, r3, r6
 8008fae:	68a6      	ldr	r6, [r4, #8]
 8008fb0:	4566      	cmp	r6, ip
 8008fb2:	d043      	beq.n	800903c <_free_r+0x140>
 8008fb4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008fb8:	f8c6 c00c 	str.w	ip, [r6, #12]
 8008fbc:	f8cc 6008 	str.w	r6, [ip, #8]
 8008fc0:	e7ba      	b.n	8008f38 <_free_r+0x3c>
 8008fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	2101      	movs	r1, #1
 8008fca:	6868      	ldr	r0, [r5, #4]
 8008fcc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8008fd0:	109b      	asrs	r3, r3, #2
 8008fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd6:	60e2      	str	r2, [r4, #12]
 8008fd8:	6891      	ldr	r1, [r2, #8]
 8008fda:	4318      	orrs	r0, r3
 8008fdc:	6068      	str	r0, [r5, #4]
 8008fde:	60a1      	str	r1, [r4, #8]
 8008fe0:	60cc      	str	r4, [r1, #12]
 8008fe2:	6094      	str	r4, [r2, #8]
 8008fe4:	e7d8      	b.n	8008f98 <_free_r+0x9c>
 8008fe6:	4e29      	ldr	r6, [pc, #164]	; (800908c <_free_r+0x190>)
 8008fe8:	42b0      	cmp	r0, r6
 8008fea:	d1ae      	bne.n	8008f4a <_free_r+0x4e>
 8008fec:	616c      	str	r4, [r5, #20]
 8008fee:	f043 0201 	orr.w	r2, r3, #1
 8008ff2:	612c      	str	r4, [r5, #16]
 8008ff4:	60e0      	str	r0, [r4, #12]
 8008ff6:	60a0      	str	r0, [r4, #8]
 8008ff8:	6062      	str	r2, [r4, #4]
 8008ffa:	50e3      	str	r3, [r4, r3]
 8008ffc:	e7cc      	b.n	8008f98 <_free_r+0x9c>
 8008ffe:	18c0      	adds	r0, r0, r3
 8009000:	07cb      	lsls	r3, r1, #31
 8009002:	d407      	bmi.n	8009014 <_free_r+0x118>
 8009004:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009008:	1ae4      	subs	r4, r4, r3
 800900a:	18c0      	adds	r0, r0, r3
 800900c:	68a2      	ldr	r2, [r4, #8]
 800900e:	68e3      	ldr	r3, [r4, #12]
 8009010:	60d3      	str	r3, [r2, #12]
 8009012:	609a      	str	r2, [r3, #8]
 8009014:	f240 526c 	movw	r2, #1388	; 0x56c
 8009018:	f040 0301 	orr.w	r3, r0, #1
 800901c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009020:	6063      	str	r3, [r4, #4]
 8009022:	60ac      	str	r4, [r5, #8]
 8009024:	6813      	ldr	r3, [r2, #0]
 8009026:	4298      	cmp	r0, r3
 8009028:	d3b6      	bcc.n	8008f98 <_free_r+0x9c>
 800902a:	f641 0364 	movw	r3, #6244	; 0x1864
 800902e:	4640      	mov	r0, r8
 8009030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	f7ff ff0f 	bl	8008e58 <_malloc_trim_r>
 800903a:	e7ad      	b.n	8008f98 <_free_r+0x9c>
 800903c:	2101      	movs	r1, #1
 800903e:	e77b      	b.n	8008f38 <_free_r+0x3c>
 8009040:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8009044:	0041      	lsls	r1, r0, #1
 8009046:	2a14      	cmp	r2, #20
 8009048:	d990      	bls.n	8008f6c <_free_r+0x70>
 800904a:	2a54      	cmp	r2, #84	; 0x54
 800904c:	d80c      	bhi.n	8009068 <_free_r+0x16c>
 800904e:	0b18      	lsrs	r0, r3, #12
 8009050:	306e      	adds	r0, #110	; 0x6e
 8009052:	0041      	lsls	r1, r0, #1
 8009054:	e78a      	b.n	8008f6c <_free_r+0x70>
 8009056:	2601      	movs	r6, #1
 8009058:	684d      	ldr	r5, [r1, #4]
 800905a:	1080      	asrs	r0, r0, #2
 800905c:	4613      	mov	r3, r2
 800905e:	fa06 f000 	lsl.w	r0, r6, r0
 8009062:	4305      	orrs	r5, r0
 8009064:	604d      	str	r5, [r1, #4]
 8009066:	e793      	b.n	8008f90 <_free_r+0x94>
 8009068:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800906c:	d803      	bhi.n	8009076 <_free_r+0x17a>
 800906e:	0bd8      	lsrs	r0, r3, #15
 8009070:	3077      	adds	r0, #119	; 0x77
 8009072:	0041      	lsls	r1, r0, #1
 8009074:	e77a      	b.n	8008f6c <_free_r+0x70>
 8009076:	f240 5154 	movw	r1, #1364	; 0x554
 800907a:	428a      	cmp	r2, r1
 800907c:	d803      	bhi.n	8009086 <_free_r+0x18a>
 800907e:	0c98      	lsrs	r0, r3, #18
 8009080:	307c      	adds	r0, #124	; 0x7c
 8009082:	0041      	lsls	r1, r0, #1
 8009084:	e772      	b.n	8008f6c <_free_r+0x70>
 8009086:	21fc      	movs	r1, #252	; 0xfc
 8009088:	207e      	movs	r0, #126	; 0x7e
 800908a:	e76f      	b.n	8008f6c <_free_r+0x70>
 800908c:	20000168 	.word	0x20000168
