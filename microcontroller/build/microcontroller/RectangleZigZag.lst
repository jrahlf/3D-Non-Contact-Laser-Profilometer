   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"RectangleZigZag.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN15RectangleZigZag7isAtEndEv,"ax",%progbits
  20              		.align	2
  21              		.global	_ZN15RectangleZigZag7isAtEndEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN15RectangleZigZag7isAtEndEv:
  26              	.LFB1015:
  27              		.file 1 "RectangleZigZag.cpp"
   1:RectangleZigZag.cpp **** /*
   2:RectangleZigZag.cpp ****  * RectangleZigZag.cpp
   3:RectangleZigZag.cpp ****  *
   4:RectangleZigZag.cpp ****  *  Created on: Jan 18, 2014
   5:RectangleZigZag.cpp ****  *      Author: jonas
   6:RectangleZigZag.cpp ****  */
   7:RectangleZigZag.cpp **** 
   8:RectangleZigZag.cpp **** #include "RectangleZigZag.h"
   9:RectangleZigZag.cpp **** #include "transform.h"
  10:RectangleZigZag.cpp **** 
  11:RectangleZigZag.cpp **** /**
  12:RectangleZigZag.cpp ****  * ^
  13:RectangleZigZag.cpp ****  * |
  14:RectangleZigZag.cpp ****  * |
  15:RectangleZigZag.cpp ****  * |
  16:RectangleZigZag.cpp ****  * |
  17:RectangleZigZag.cpp ****  * y x------>
  18:RectangleZigZag.cpp ****  *
  19:RectangleZigZag.cpp ****  *
  20:RectangleZigZag.cpp ****  * ^-> ->
  21:RectangleZigZag.cpp ****  * | | | |
  22:RectangleZigZag.cpp ****  * | | | |
  23:RectangleZigZag.cpp ****  * | | | |
  24:RectangleZigZag.cpp ****  * | | | |
  25:RectangleZigZag.cpp ****  * | | | |
  26:RectangleZigZag.cpp ****  * | -> ->
  27:RectangleZigZag.cpp ****  */
  28:RectangleZigZag.cpp **** 
  29:RectangleZigZag.cpp **** namespace{
  30:RectangleZigZag.cpp **** 
  31:RectangleZigZag.cpp **** inline int nextX(){
  32:RectangleZigZag.cpp **** 	return Control<X>::getShallPosition();
  33:RectangleZigZag.cpp **** }
  34:RectangleZigZag.cpp **** 
  35:RectangleZigZag.cpp **** inline int nextY(){
  36:RectangleZigZag.cpp **** 	return Control<Y>::getShallPosition();
  37:RectangleZigZag.cpp **** }
  38:RectangleZigZag.cpp **** bool approachingX;
  39:RectangleZigZag.cpp **** int yDirection;
  40:RectangleZigZag.cpp **** }
  41:RectangleZigZag.cpp **** 
  42:RectangleZigZag.cpp **** int RectangleZigZag::startX;
  43:RectangleZigZag.cpp **** int RectangleZigZag::stopX;
  44:RectangleZigZag.cpp **** int RectangleZigZag::startY;
  45:RectangleZigZag.cpp **** int RectangleZigZag::stopY;
  46:RectangleZigZag.cpp **** int RectangleZigZag::samplingResolution;
  47:RectangleZigZag.cpp **** 
  48:RectangleZigZag.cpp **** bool RectangleZigZag::isAtEnd(){
  28              		.loc 1 48 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LBB68:
  34              	.LBB69:
  35              	.LBB70:
  36              		.file 2 "control.h"
   1:control.h     **** /*
   2:control.h     ****  * control.h
   3:control.h     ****  *
   4:control.h     ****  *  Created on: Nov 24, 2013
   5:control.h     ****  *      Author: jonas
   6:control.h     ****  */
   7:control.h     **** 
   8:control.h     **** #ifndef CONTROL_H_
   9:control.h     **** #define CONTROL_H_
  10:control.h     **** 
  11:control.h     **** #include "project.h"
  12:control.h     **** #include <xpcc/math/filter/pid.hpp>
  13:control.h     **** 
  14:control.h     **** 
  15:control.h     **** template<Axis axis>
  16:control.h     **** class Control{
  17:control.h     **** 
  18:control.h     **** 	friend class Control<ALL>;
  19:control.h     **** 
  20:control.h     **** private:
  21:control.h     **** 	static volatile int pos_shall;
  22:control.h     **** 	static volatile int v_is; // velocity in pulses/s
  23:control.h     **** 	static volatile int v_shall;
  24:control.h     **** 
  25:control.h     **** 	static xpcc::Pid<float, 1> v_pid;
  26:control.h     **** 	static xpcc::Pid<float, 1> pos_pid;
  27:control.h     **** 	static int v_u; // speed controller output
  28:control.h     **** 	static int v_ureal;
  29:control.h     **** 	static int last_pos; //position when the last control loop was executed
  30:control.h     **** 
  31:control.h     **** 	static bool positionControlEnabled;
  32:control.h     **** 	static bool speedControlEnabled;
  33:control.h     **** 
  34:control.h     **** public:
  35:control.h     **** 
  36:control.h     **** 	static bool init();
  37:control.h     **** 	static void enablePositionControl(bool enable);
  38:control.h     **** 	static void enableSpeedControl(bool enable);
  39:control.h     **** 	static void setShallPosition(int x);
  40:control.h     **** 	/**
  41:control.h     **** 	 * Also disables the position controller
  42:control.h     **** 	 * @param speed [-1,1]
  43:control.h     **** 	 */
  44:control.h     **** 	static void setShallSpeed(double speed);
  45:control.h     **** 	static int getSpeedErrorSum();
  46:control.h     **** 	static int getPositionErrorSum();
  47:control.h     **** 	static int32_t getIsPosition();
  48:control.h     **** 	static inline int getShallSpeed(){ return v_shall; }
  49:control.h     **** 	static inline int getIsSpeed(){ return v_is; }
  50:control.h     **** 	static inline int getShallPosition(){ return pos_shall; }
  37              		.loc 2 50 0
  38 0000 0C4B     		ldr	r3, .L5
  39 0002 1A68     		ldr	r2, [r3, #0]
  40              	.LBE70:
  41              	.LBE69:
  42              	.LBE68:
  49:RectangleZigZag.cpp **** 	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
  43              		.loc 1 49 0
  44 0004 0C4B     		ldr	r3, .L5+4
  45 0006 1B68     		ldr	r3, [r3, #0]
  46 0008 D31A     		subs	r3, r2, r3
  47 000a 002B     		cmp	r3, #0
  48 000c B8BF     		it	lt
  49 000e 5B42     		rsblt	r3, r3, #0
  50:RectangleZigZag.cpp **** 			&& abs(nextY()-stopY) <= RECTANGLE_ZIGZAG_THRESHOLD;
  50              		.loc 1 50 0
  51 0010 062B     		cmp	r3, #6
  52 0012 0CDC     		bgt	.L3
  53              	.LBB71:
  54              	.LBB72:
  55              	.LBB73:
  56              		.loc 2 50 0
  57 0014 094B     		ldr	r3, .L5+8
  58 0016 1868     		ldr	r0, [r3, #0]
  59              	.LBE73:
  60              	.LBE72:
  61              	.LBE71:
  62              		.loc 1 50 0
  63 0018 094B     		ldr	r3, .L5+12
  64 001a 1B68     		ldr	r3, [r3, #0]
  65 001c C01A     		subs	r0, r0, r3
  66 001e 0028     		cmp	r0, #0
  67 0020 B8BF     		it	lt
  68 0022 4042     		rsblt	r0, r0, #0
  69              	.LBB76:
  70              	.LBB75:
  71              	.LBB74:
  72 0024 0628     		cmp	r0, #6
  73 0026 CCBF     		ite	gt
  74 0028 0020     		movgt	r0, #0
  75 002a 0120     		movle	r0, #1
  76 002c 7047     		bx	lr
  77              	.L3:
  78              	.LBE74:
  79              	.LBE75:
  80              	.LBE76:
  81 002e 0020     		movs	r0, #0
  51:RectangleZigZag.cpp **** }
  82              		.loc 1 51 0
  83 0030 7047     		bx	lr
  84              	.L6:
  85 0032 00BF     		.align	2
  86              	.L5:
  87 0034 00000000 		.word	_ZN7ControlIL4Axis0EE9pos_shallE
  88 0038 00000000 		.word	.LANCHOR0
  89 003c 00000000 		.word	_ZN7ControlIL4Axis2EE9pos_shallE
  90 0040 00000000 		.word	.LANCHOR1
  91              		.cfi_endproc
  92              	.LFE1015:
  94              		.section	.text._ZN15RectangleZigZag6sampleEv,"ax",%progbits
  95              		.align	2
  96              		.global	_ZN15RectangleZigZag6sampleEv
  97              		.thumb
  98              		.thumb_func
 100              	_ZN15RectangleZigZag6sampleEv:
 101              	.LFB1018:
  52:RectangleZigZag.cpp **** 
  53:RectangleZigZag.cpp **** static inline bool reachedPointX(int x){
  54:RectangleZigZag.cpp **** 	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
  55:RectangleZigZag.cpp **** }
  56:RectangleZigZag.cpp **** 
  57:RectangleZigZag.cpp **** static inline bool reachedPointY(int y){
  58:RectangleZigZag.cpp **** 	return abs(y-nextY()) <= RECTANGLE_ZIGZAG_THRESHOLD;
  59:RectangleZigZag.cpp **** }
  60:RectangleZigZag.cpp **** 
  61:RectangleZigZag.cpp **** void RectangleZigZag::sample(){
 102              		.loc 1 61 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106 0000 38B5     		push	{r3, r4, r5, lr}
 107              	.LCFI0:
 108              		.cfi_def_cfa_offset 16
 109              		.cfi_offset 3, -16
 110              		.cfi_offset 4, -12
 111              		.cfi_offset 5, -8
 112              		.cfi_offset 14, -4
 113              	.LBB113:
 114              	.LBB114:
 115              	.LBB115:
 116              	.LBB116:
 117              	.LBB117:
 118              	.LBB118:
 119              		.loc 2 50 0
 120 0002 374C     		ldr	r4, .L34
 121              	.LBE118:
 122              	.LBE117:
 123              	.LBE116:
  49:RectangleZigZag.cpp **** 	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
 124              		.loc 1 49 0
 125 0004 374B     		ldr	r3, .L34+4
 126              	.LBB121:
 127              	.LBB120:
 128              	.LBB119:
 129              		.loc 2 50 0
 130 0006 2268     		ldr	r2, [r4, #0]
 131              	.LBE119:
 132              	.LBE120:
 133              	.LBE121:
  49:RectangleZigZag.cpp **** 	return abs(nextX()-stopX) <= RECTANGLE_ZIGZAG_THRESHOLD
 134              		.loc 1 49 0
 135 0008 1B68     		ldr	r3, [r3, #0]
 136 000a D31A     		subs	r3, r2, r3
 137 000c 002B     		cmp	r3, #0
 138 000e B8BF     		it	lt
 139 0010 5B42     		rsblt	r3, r3, #0
  50:RectangleZigZag.cpp **** 			&& abs(nextY()-stopY) <= RECTANGLE_ZIGZAG_THRESHOLD;
 140              		.loc 1 50 0
 141 0012 062B     		cmp	r3, #6
 142 0014 09DC     		bgt	.L8
 143              	.LBB122:
 144              	.LBB123:
 145              	.LBB124:
 146              		.loc 2 50 0
 147 0016 344B     		ldr	r3, .L34+8
 148 0018 1A68     		ldr	r2, [r3, #0]
 149              	.LBE124:
 150              	.LBE123:
 151              	.LBE122:
  50:RectangleZigZag.cpp **** 			&& abs(nextY()-stopY) <= RECTANGLE_ZIGZAG_THRESHOLD;
 152              		.loc 1 50 0
 153 001a 344B     		ldr	r3, .L34+12
 154 001c 1B68     		ldr	r3, [r3, #0]
 155 001e D31A     		subs	r3, r2, r3
 156 0020 002B     		cmp	r3, #0
 157 0022 B8BF     		it	lt
 158 0024 5B42     		rsblt	r3, r3, #0
 159 0026 062B     		cmp	r3, #6
 160 0028 2CDD     		ble	.L9
 161              	.L8:
 162              	.LBE115:
 163              	.LBE114:
  62:RectangleZigZag.cpp **** 	if(isAtEnd() && Pattern::isRunning()){
  63:RectangleZigZag.cpp **** 		Pattern::done();
  64:RectangleZigZag.cpp **** 	}
  65:RectangleZigZag.cpp **** 
  66:RectangleZigZag.cpp **** 	int x = Control<X>::getIsPosition();
 164              		.loc 1 66 0
 165 002a 314B     		ldr	r3, .L34+16
 166 002c 9847     		blx	r3
 167              	.LVL0:
  67:RectangleZigZag.cpp **** 	int y = Control<Y>::getIsPosition();
 168              		.loc 1 67 0
 169 002e 314B     		ldr	r3, .L34+20
  66:RectangleZigZag.cpp **** 	int x = Control<X>::getIsPosition();
 170              		.loc 1 66 0
 171 0030 0546     		mov	r5, r0
 172              	.LVL1:
 173              		.loc 1 67 0
 174 0032 9847     		blx	r3
 175              	.LVL2:
 176              	.LBB125:
  68:RectangleZigZag.cpp **** 
  69:RectangleZigZag.cpp **** 	if(approachingX && reachedPointX(x)){
 177              		.loc 1 69 0
 178 0034 304B     		ldr	r3, .L34+24
 179 0036 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 180 0038 7AB9     		cbnz	r2, .L28
 181              	.LVL3:
 182              	.LBB126:
 183              	.LBB127:
 184              	.LBB128:
 185              	.LBB129:
 186              	.LBB130:
 187              		.loc 2 50 0
 188 003a 2B4A     		ldr	r2, .L34+8
 189 003c 1268     		ldr	r2, [r2, #0]
 190              	.LBE130:
 191              	.LBE129:
 192              	.LBE128:
  58:RectangleZigZag.cpp **** 	return abs(y-nextY()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 193              		.loc 1 58 0
 194 003e 801A     		subs	r0, r0, r2
 195              	.LVL4:
 196 0040 0028     		cmp	r0, #0
 197 0042 B8BF     		it	lt
 198 0044 4042     		rsblt	r0, r0, #0
 199              	.LBE127:
 200              	.LBE126:
  70:RectangleZigZag.cpp **** 		int nextPosY = yDirection == 1 ? stopY : startY;
  71:RectangleZigZag.cpp **** 		yDirection *= -1;
  72:RectangleZigZag.cpp **** 		//xpcc::delay_ms(1000);
  73:RectangleZigZag.cpp **** 		Control<Y>::setShallPosition(nextPosY);
  74:RectangleZigZag.cpp **** 		approachingX = false;
  75:RectangleZigZag.cpp **** 	}else if(!approachingX && reachedPointY(y)){
 201              		.loc 1 75 0
 202 0046 0628     		cmp	r0, #6
 203 0048 39DC     		bgt	.L29
  76:RectangleZigZag.cpp **** 		Control<X>::setShallPosition(nextX()+samplingResolution);
 204              		.loc 1 76 0
 205 004a 2C4A     		ldr	r2, .L34+28
 206              	.LBB131:
 207              	.LBB132:
 208              	.LBB133:
 209              		.loc 2 50 0
 210 004c 2168     		ldr	r1, [r4, #0]
 211              	.LBE133:
 212              	.LBE132:
 213              	.LBE131:
 214              		.loc 1 76 0
 215 004e 1268     		ldr	r2, [r2, #0]
 216 0050 8A18     		adds	r2, r1, r2
 217              	.LVL5:
 218              	.LBB134:
 219              	.LBB135:
 220              		.file 3 "control_impl.h"
   1:control_impl.h **** /*
   2:control_impl.h ****  * control.cpp
   3:control_impl.h ****  *
   4:control_impl.h ****  *  Created on: Nov 25, 2013
   5:control_impl.h ****  *      Author: jonas
   6:control_impl.h ****  */
   7:control_impl.h **** 
   8:control_impl.h **** 
   9:control_impl.h **** #include "project.h"
  10:control_impl.h **** #include "control.h"
  11:control_impl.h **** #include "motor.h"
  12:control_impl.h **** #include "hallSensor.h"
  13:control_impl.h **** #include "securityController.h"
  14:control_impl.h **** 
  15:control_impl.h **** template<Axis axis>
  16:control_impl.h **** class Motor;
  17:control_impl.h **** 
  18:control_impl.h **** 
  19:control_impl.h **** template<Axis axis>
  20:control_impl.h **** bool Control<axis>::init(){
  21:control_impl.h **** 	Control<axis>::v_is = 0;
  22:control_impl.h **** 	Control<axis>::v_shall = 0;
  23:control_impl.h **** 	Control<axis>::last_pos = 0;
  24:control_impl.h **** 	Control<axis>::positionControlEnabled = true;
  25:control_impl.h **** 	Control<axis>::speedControlEnabled = true;
  26:control_impl.h **** 	//param order: P, I, D, maxErrorSum, maxOutput
  27:control_impl.h **** 	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
  28:control_impl.h **** 			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
  29:control_impl.h **** 	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
  30:control_impl.h **** 			CONTROLV_MAX_ERRORSUM, CONTROLV_MAX_OUTPUT);
  31:control_impl.h **** 	return true;
  32:control_impl.h **** }
  33:control_impl.h **** 
  34:control_impl.h **** 
  35:control_impl.h **** template<Axis axis>
  36:control_impl.h **** void Control<axis>::update(bool externalLimitation){
  37:control_impl.h **** 	int enc = getIsPosition();
  38:control_impl.h **** 
  39:control_impl.h **** 	if(positionControlEnabled){
  40:control_impl.h **** 		pos_pid.update(pos_shall - enc, externalLimitation);
  41:control_impl.h **** 		v_shall = pos_pid.getValue();
  42:control_impl.h **** 		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
  43:control_impl.h **** 			v_shall = 0;
  44:control_impl.h **** 		}*/
  45:control_impl.h **** 	}
  46:control_impl.h **** 
  47:control_impl.h **** 	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
  48:control_impl.h **** 	last_pos = enc;
  49:control_impl.h **** 
  50:control_impl.h **** 	if(speedControlEnabled){
  51:control_impl.h **** 		v_pid.update(v_shall - v_is);
  52:control_impl.h **** 		v_u = v_pid.getValue();
  53:control_impl.h **** 		v_ureal = v_u;
  54:control_impl.h **** 		SecurityController<axis>::saturate(v_ureal);
  55:control_impl.h **** 		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
  56:control_impl.h **** 				|| (!positionControlEnabled && abs(v_shall - v_is) <= 1000)){
  57:control_impl.h **** 			v_ureal = 0;
  58:control_impl.h **** 		}
  59:control_impl.h **** 		Motor<axis>::setSpeed(v_ureal);
  60:control_impl.h **** 	}
  61:control_impl.h **** }
  62:control_impl.h **** 
  63:control_impl.h **** template<Axis axis>
  64:control_impl.h **** void Control<axis>::setShallPosition(int position){
  65:control_impl.h **** 	pos_shall = position;
 221              		.loc 3 65 0
 222 0052 2260     		str	r2, [r4, #0]
 223              	.LBE135:
 224              	.LBE134:
  77:RectangleZigZag.cpp **** 		approachingX = true;
 225              		.loc 1 77 0
 226 0054 0122     		movs	r2, #1
 227              	.LVL6:
 228 0056 1A70     		strb	r2, [r3, #0]
 229 0058 38BD     		pop	{r3, r4, r5, pc}
 230              	.LVL7:
 231              	.L28:
 232              	.LBB136:
 233              	.LBB137:
 234              	.LBB138:
 235              	.LBB139:
 236              	.LBB140:
 237              		.loc 2 50 0
 238 005a 2268     		ldr	r2, [r4, #0]
 239              	.LBE140:
 240              	.LBE139:
 241              	.LBE138:
  54:RectangleZigZag.cpp **** 	return abs(x-nextX()) <= RECTANGLE_ZIGZAG_THRESHOLD;
 242              		.loc 1 54 0
 243 005c AD1A     		subs	r5, r5, r2
 244              	.LVL8:
 245 005e 002D     		cmp	r5, #0
 246 0060 B8BF     		it	lt
 247 0062 6D42     		rsblt	r5, r5, #0
 248              	.LBE137:
 249              	.LBE136:
  69:RectangleZigZag.cpp **** 	if(approachingX && reachedPointX(x)){
 250              		.loc 1 69 0
 251 0064 062D     		cmp	r5, #6
 252 0066 0CDC     		bgt	.L30
 253              	.LBB141:
  70:RectangleZigZag.cpp **** 		int nextPosY = yDirection == 1 ? stopY : startY;
 254              		.loc 1 70 0
 255 0068 2549     		ldr	r1, .L34+32
 256 006a 0A68     		ldr	r2, [r1, #0]
 257 006c 012A     		cmp	r2, #1
 258 006e 27D0     		beq	.L31
  70:RectangleZigZag.cpp **** 		int nextPosY = yDirection == 1 ? stopY : startY;
 259              		.loc 1 70 0 is_stmt 0 discriminator 2
 260 0070 2448     		ldr	r0, .L34+36
 261              	.LVL9:
 262 0072 0068     		ldr	r0, [r0, #0]
 263              	.L17:
 264              	.LVL10:
  71:RectangleZigZag.cpp **** 		yDirection *= -1;
 265              		.loc 1 71 0 is_stmt 1 discriminator 3
 266 0074 5242     		negs	r2, r2
 267 0076 0A60     		str	r2, [r1, #0]
 268              	.LVL11:
 269              	.LBB142:
 270              	.LBB143:
 271              		.loc 3 65 0 discriminator 3
 272 0078 1B4A     		ldr	r2, .L34+8
 273 007a 1060     		str	r0, [r2, #0]
 274              	.LBE143:
 275              	.LBE142:
  74:RectangleZigZag.cpp **** 		approachingX = false;
 276              		.loc 1 74 0 discriminator 3
 277 007c 0022     		movs	r2, #0
 278 007e 1A70     		strb	r2, [r3, #0]
 279 0080 38BD     		pop	{r3, r4, r5, pc}
 280              	.LVL12:
 281              	.L30:
 282 0082 38BD     		pop	{r3, r4, r5, pc}
 283              	.LVL13:
 284              	.L9:
 285              	.LBE141:
 286              	.LBE125:
  62:RectangleZigZag.cpp **** 	if(isAtEnd() && Pattern::isRunning()){
 287              		.loc 1 62 0
 288 0084 204B     		ldr	r3, .L34+40
 289 0086 1A68     		ldr	r2, [r3, #0]
 290 0088 002A     		cmp	r2, #0
 291 008a CED0     		beq	.L8
 292              	.LBB145:
 293              	.LBB146:
 294              		.file 4 "pattern.h"
   1:pattern.h     **** /*
   2:pattern.h     ****  * pattern.h
   3:pattern.h     ****  *
   4:pattern.h     ****  *  Created on: Jan 18, 2014
   5:pattern.h     ****  *      Author: jonas
   6:pattern.h     ****  */
   7:pattern.h     **** 
   8:pattern.h     **** #ifndef PATTERN_H_
   9:pattern.h     **** #define PATTERN_H_
  10:pattern.h     **** 
  11:pattern.h     **** #include "control.h"
  12:pattern.h     **** #include "project.h"
  13:pattern.h     **** #include "state.h"
  14:pattern.h     **** 
  15:pattern.h     **** class Pattern{
  16:pattern.h     **** 	static void (*func)(void);
  17:pattern.h     **** 	static int running;
  18:pattern.h     **** public:
  19:pattern.h     **** 	template<class T>
  20:pattern.h     **** 	static void setPattern(T pattern, float maxSpeed = 1){
  21:pattern.h     **** 		(void)pattern;
  22:pattern.h     **** 		//Control<ALL>::setMaxSpeed(maxSpeed);
  23:pattern.h     **** 		func = &T::sample;
  24:pattern.h     **** 	}
  25:pattern.h     **** 	static void follow(){
  26:pattern.h     **** 		if(!running || func == 0){
  27:pattern.h     **** 			return;
  28:pattern.h     **** 		}
  29:pattern.h     **** 		func();
  30:pattern.h     **** 	}
  31:pattern.h     **** 	static void pause(){
  32:pattern.h     **** 		running = false;
  33:pattern.h     **** 	}
  34:pattern.h     **** 	static void start(){
  35:pattern.h     **** 		running = true;
  36:pattern.h     **** 		State::set(State::SCANNING_RECTANGLE);
  37:pattern.h     **** 		dout << "Pattern start" << endl;
  38:pattern.h     **** 	}
  39:pattern.h     **** 	static void done(){
  40:pattern.h     **** 		running = 0;
 295              		.loc 4 40 0
 296 008c 0022     		movs	r2, #0
 297              	.LBB147:
 298              	.LBB148:
 299              		.file 5 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp"
   1:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // coding: utf-8
   2:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // ----------------------------------------------------------------------------
   3:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** /* Copyright (c) 2009, Roboterclub Aachen e.V.
   4:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * All rights reserved.
   5:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *
   6:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * Redistribution and use in source and binary forms, with or without
   7:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * modification, are permitted provided that the following conditions are met:
   8:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * 
   9:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Redistributions of source code must retain the above copyright
  10:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       notice, this list of conditions and the following disclaimer.
  11:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Redistributions in binary form must reproduce the above copyright
  12:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       notice, this list of conditions and the following disclaimer in the
  13:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       documentation and/or other materials provided with the distribution.
  14:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Neither the name of the Roboterclub Aachen e.V. nor the
  15:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       names of its contributors may be used to endorse or promote products
  16:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       derived from this software without specific prior written permission.
  17:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *
  18:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
  19:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  20:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  21:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
  22:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  23:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  24:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  25:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  26:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  27:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  28:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  */
  29:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // ----------------------------------------------------------------------------
  30:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  31:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #ifndef XPCC__IOSTREAM_HPP
  32:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #define XPCC__IOSTREAM_HPP
  33:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  34:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include <xpcc/architecture/utils.hpp>
  35:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  36:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include "iodevice.hpp"
  37:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include "iodevice_wrapper.hpp"
  38:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  39:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** namespace xpcc
  40:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** {
  41:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	/**
  42:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \brief 	This Formats all primary types into a string stream for
  43:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * 			output or it reads values from a input and converts them to
  44:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * 			a given type;
  45:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 *
  46:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \ingroup io
  47:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \author	Martin Rosekeit <martin.rosekeit@rwth-aachen.de>
  48:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 */
  49:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	class IOStream
  50:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	{
  51:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	public :
  52:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/**
  53:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \brief	Constructor
  54:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * 
  55:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \param	device	device to write the stream to
  56:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * 
  57:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \code
  58:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 *	MyIODevice device;
  59:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 *	IOStream stream( device );
  60:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \endcode
  61:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 */
  62:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream(IODevice& device);
  63:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  64:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		inline IOStream&
  65:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		write(char c)
  66:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  67:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->device->write(c);
  68:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  69:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  70:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
  71:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		inline IOStream&
  72:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		flush()
  73:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  74:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->device->flush();
  75:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Ascii;
  76:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  77:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  78:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
  79:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Binary style for \c char and \c char*
  80:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  81:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		bin()
  82:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  83:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Binary;
  84:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  85:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  86:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  87:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Hexadecimal style for \c char and \c char*
  88:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  89:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		hex()
  90:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  91:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Hexadecimal;
  92:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  93:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  94:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  95:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Ascii style for \c char and \c char*
  96:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  97:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ascii()
  98:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  99:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Ascii;
 100:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 101:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 102:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 103:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 104:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 105:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const unsigned char& v)
 106:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 107:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 108:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(static_cast<uint16_t>(v));
 109:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 110:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 111:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 112:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 113:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 114:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 115:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 116:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 117:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 118:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 119:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 120:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const char& v)
 121:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 122:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 123:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(v);
 124:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 125:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 127:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 128:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 129:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 130:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 131:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 132:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 133:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 134:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 135:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint16_t& v)
 136:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 137:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 138:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 139:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 140:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 141:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 142:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 143:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 144:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 145:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 146:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 147:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 148:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 149:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 150:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 151:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 152:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int16_t& v)
 153:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 154:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 155:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 156:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 157:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 158:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 159:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 160:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 161:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 162:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 163:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 164:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 165:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 166:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 167:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 168:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 169:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint32_t& v)
 170:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 171:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 172:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 173:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 174:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 175:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 24));
 176:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 16));
 177:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 178:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 179:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 180:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 181:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 24));
 182:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 16));
 183:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 184:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 185:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 186:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 187:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 188:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 189:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 190:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int32_t& v)
 191:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 192:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 193:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 194:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 195:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 196:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 24));
 197:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 16));
 198:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 199:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 200:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 201:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 202:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 24));
 203:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 16));
 204:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 205:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 206:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 207:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 208:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 209:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 210:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__OS_OSX)
 211:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// For APPLE 'int64_t' is of type 'int'. Therefore there is no
 212:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// function here for the default type 'long int'. As 'long int' has the same
 213:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// width as 'int64_t' we just use a typedef here.
 214:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 215:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const long int& v)
 216:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 217:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<int64_t>(v));
 218:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 219:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 220:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 221:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 222:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const long unsigned int& v)
 223:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 224:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<uint64_t>(v));
 225:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 226:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 227:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 228:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 229:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__CPU_ARM) || defined(XPCC__CPU_AVR32)
 230:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// For ARM 'int32_t' is of type 'long'. Therefore there is no
 231:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// function here for the default type 'int'. As 'int' has the same
 232:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// width as 'int32_t' we just use a typedef here.
 233:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 234:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int& v)
 235:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 236:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<int32_t>(v));
 237:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 238:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 239:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 240:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 241:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const unsigned int& v)
 242:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 243:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<uint32_t>(v));
 244:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 245:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 246:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 247:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 248:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // The 64-bit types on the AVR are extremely slow and are
 249:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // therefore excluded here
 250:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if !defined(XPCC__CPU_AVR)
 251:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 252:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint64_t& v)
 253:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 254:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(v);
 255:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 256:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 257:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 258:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 259:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int64_t& v)
 260:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 261:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(v);
 262:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 263:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 264:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 265:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 266:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 267:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const float& v)
 268:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 269:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeFloat(v);
 270:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 271:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 272:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 273:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 274:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const double& v)
 275:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 276:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__CPU_AVR)
 277:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeFloat(static_cast<float>(v));
 278:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #else
 279:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeDouble(v);
 280:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 281:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 282:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 283:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 284:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 285:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const char* s)
 286:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 287:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if( this->mode == Mode::Ascii ) {
 300              		.loc 5 287 0
 301 008e 1F4D     		ldr	r5, .L34+44
 302              	.LBE148:
 303              	.LBE147:
 304              		.loc 4 40 0
 305 0090 1A60     		str	r2, [r3, #0]
  41:pattern.h     **** 		State::set(State::READY);
 306              		.loc 4 41 0
 307 0092 0120     		movs	r0, #1
 308 0094 1E4B     		ldr	r3, .L34+48
 309 0096 9847     		blx	r3
 310              	.LVL14:
 311              	.LBB151:
 312              	.LBB149:
 313              		.loc 5 287 0
 314 0098 6B68     		ldr	r3, [r5, #4]
 315 009a A3B1     		cbz	r3, .L32
 288:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(s);
 289:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 290:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if( this->mode == Mode::Binary ) {
 316              		.loc 5 290 0
 317 009c 022B     		cmp	r3, #2
 291:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(s);
 318              		.loc 5 291 0
 319 009e 2846     		mov	r0, r5
 320 00a0 1C49     		ldr	r1, .L34+52
 321 00a2 0CBF     		ite	eq
 322 00a4 1C4B     		ldreq	r3, .L34+56
 292:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 293:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 294:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(s);
 323              		.loc 5 294 0
 324 00a6 1D4B     		ldrne	r3, .L34+60
 325 00a8 9847     		blx	r3
 326              	.LVL15:
 327              	.L10:
 328              	.LBE149:
 329              	.LBE151:
 330              	.LBB152:
 331              	.LBB153:
 122:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 332              		.loc 5 122 0
 333 00aa 6B68     		ldr	r3, [r5, #4]
 334 00ac 1748     		ldr	r0, .L34+44
 335 00ae 83B1     		cbz	r3, .L33
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 336              		.loc 5 126 0
 337 00b0 0A21     		movs	r1, #10
 125:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 338              		.loc 5 125 0
 339 00b2 022B     		cmp	r3, #2
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 340              		.loc 5 126 0
 341 00b4 0CBF     		ite	eq
 342 00b6 1A4B     		ldreq	r3, .L34+64
 129:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 343              		.loc 5 129 0
 344 00b8 1A4B     		ldrne	r3, .L34+68
 345 00ba 9847     		blx	r3
 346              	.LVL16:
 347 00bc B5E7     		b	.L8
 348              	.LVL17:
 349              	.L29:
 350 00be 38BD     		pop	{r3, r4, r5, pc}
 351              	.LVL18:
 352              	.L31:
 353              	.LBE153:
 354              	.LBE152:
 355              	.LBE146:
 356              	.LBE145:
 357              	.LBB158:
 358              	.LBB144:
  70:RectangleZigZag.cpp **** 		int nextPosY = yDirection == 1 ? stopY : startY;
 359              		.loc 1 70 0 discriminator 1
 360 00c0 0A48     		ldr	r0, .L34+12
 361              	.LVL19:
 362 00c2 0068     		ldr	r0, [r0, #0]
 363 00c4 D6E7     		b	.L17
 364              	.LVL20:
 365              	.L32:
 366              	.LBE144:
 367              	.LBE158:
 368              	.LBB159:
 369              	.LBB157:
 370              	.LBB155:
 371              	.LBB150:
 288:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(s);
 372              		.loc 5 288 0
 373 00c6 2868     		ldr	r0, [r5, #0]
 374 00c8 1249     		ldr	r1, .L34+52
 375 00ca 0368     		ldr	r3, [r0, #0]
 376 00cc DB68     		ldr	r3, [r3, #12]
 377 00ce 9847     		blx	r3
 378              	.LVL21:
 379 00d0 EBE7     		b	.L10
 380              	.LVL22:
 381              	.L33:
 382              	.LBE150:
 383              	.LBE155:
 384              	.LBB156:
 385              	.LBB154:
 123:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(v);
 386              		.loc 5 123 0
 387 00d2 0068     		ldr	r0, [r0, #0]
 388 00d4 0368     		ldr	r3, [r0, #0]
 389 00d6 0A21     		movs	r1, #10
 390 00d8 9B68     		ldr	r3, [r3, #8]
 391 00da 9847     		blx	r3
 392              	.LVL23:
 393 00dc A5E7     		b	.L8
 394              	.L35:
 395 00de 00BF     		.align	2
 396              	.L34:
 397 00e0 00000000 		.word	_ZN7ControlIL4Axis0EE9pos_shallE
 398 00e4 00000000 		.word	.LANCHOR0
 399 00e8 00000000 		.word	_ZN7ControlIL4Axis2EE9pos_shallE
 400 00ec 00000000 		.word	.LANCHOR1
 401 00f0 00000000 		.word	_ZN7ControlIL4Axis0EE13getIsPositionEv
 402 00f4 00000000 		.word	_ZN7ControlIL4Axis2EE13getIsPositionEv
 403 00f8 00000000 		.word	.LANCHOR2
 404 00fc 00000000 		.word	.LANCHOR5
 405 0100 00000000 		.word	.LANCHOR4
 406 0104 00000000 		.word	.LANCHOR3
 407 0108 00000000 		.word	_ZN7Pattern7runningE
 408 010c 00000000 		.word	dout
 409 0110 00000000 		.word	_ZN5State3setEi
 410 0114 00000000 		.word	.LC0
 411 0118 00000000 		.word	_ZN4xpcc8IOStream8writeBinEPKc
 412 011c 00000000 		.word	_ZN4xpcc8IOStream8writeHexEPKc
 413 0120 00000000 		.word	_ZN4xpcc8IOStream8writeBinEh
 414 0124 00000000 		.word	_ZN4xpcc8IOStream8writeHexEh
 415              	.LBE154:
 416              	.LBE156:
 417              	.LBE157:
 418              	.LBE159:
 419              	.LBE113:
 420              		.cfi_endproc
 421              	.LFE1018:
 423              		.section	.text._ZN15RectangleZigZag9configureEiiiii,"ax",%progbits
 424              		.align	2
 425              		.global	_ZN15RectangleZigZag9configureEiiiii
 426              		.thumb
 427              		.thumb_func
 429              	_ZN15RectangleZigZag9configureEiiiii:
 430              	.LFB1019:
  78:RectangleZigZag.cpp **** 	}
  79:RectangleZigZag.cpp **** 
  80:RectangleZigZag.cpp **** 	//sit back and let control do its job
  81:RectangleZigZag.cpp **** }
  82:RectangleZigZag.cpp **** 
  83:RectangleZigZag.cpp **** void RectangleZigZag::configure(int x, int y, int width, int height, int samplingResolution){
 431              		.loc 1 83 0
 432              		.cfi_startproc
 433              		@ args = 4, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436              	.LVL24:
  84:RectangleZigZag.cpp **** 		RectangleZigZag::startX = Transform::mmToEncoder(x);
  85:RectangleZigZag.cpp **** 		RectangleZigZag::startY = Transform::mmToEncoder(y);
 437              		.loc 1 85 0
 438 0000 07EE901A 		fmsr	s15, r1	@ int
  84:RectangleZigZag.cpp **** 		RectangleZigZag::startX = Transform::mmToEncoder(x);
 439              		.loc 1 84 0
 440 0004 04EE900A 		fmsr	s9, r0	@ int
 441              		.loc 1 85 0
 442 0008 B8EEE76A 		fsitos	s12, s15
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
  87:RectangleZigZag.cpp **** 		RectangleZigZag::stopY = startY + Transform::mmToEncoder(height);
 443              		.loc 1 87 0
 444 000c 07EE903A 		fmsr	s15, r3	@ int
  84:RectangleZigZag.cpp **** 		RectangleZigZag::startX = Transform::mmToEncoder(x);
 445              		.loc 1 84 0
 446 0010 F8EEE45A 		fsitos	s11, s9
 447              	.LVL25:
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 448              		.loc 1 86 0
 449 0014 04EE902A 		fmsr	s9, r2	@ int
 450              	.LBB160:
 451              	.LBB161:
 452              		.file 6 "transform.h"
   1:transform.h   **** /*
   2:transform.h   ****  * transform.h
   3:transform.h   ****  *
   4:transform.h   ****  *  Created on: Jan 23, 2014
   5:transform.h   ****  *      Author: jonas
   6:transform.h   ****  */
   7:transform.h   **** 
   8:transform.h   **** #ifndef TRANSFORM_H_
   9:transform.h   **** #define TRANSFORM_H_
  10:transform.h   **** 
  11:transform.h   **** #include "project.h"
  12:transform.h   **** 
  13:transform.h   **** struct Transform{
  14:transform.h   **** 	static int mmToEncoder(float mm){
  15:transform.h   **** 		return int(MOTOR_ENC_PER_REV*MOTOR_GEAR_RATIO*mm + 0.5f);
 453              		.loc 6 15 0
 454 0018 9FED237A 		flds	s14, .L37
 455              	.LBE161:
 456              	.LBE160:
 457              		.loc 1 87 0
 458 001c B8EEE75A 		fsitos	s10, s15
 459              	.LBB167:
 460              	.LBB162:
 461              		.loc 6 15 0
 462 0020 F6EE007A 		fconsts	s15, #96
 463              	.LBE162:
 464              	.LBE167:
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 465              		.loc 1 86 0
 466 0024 F8EEE46A 		fsitos	s13, s9
 467              	.LBB168:
 468              	.LBB163:
 469              		.loc 6 15 0
 470 0028 F0EE674A 		fcpys	s9, s15
 471 002c 45EE874A 		fmacs	s9, s11, s14
 472              	.LBE163:
 473              	.LBE168:
  83:RectangleZigZag.cpp **** void RectangleZigZag::configure(int x, int y, int width, int height, int samplingResolution){
 474              		.loc 1 83 0
 475 0030 10B4     		push	{r4}
 476              	.LCFI1:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 4, -4
 479              	.LBB169:
 480              	.LBB164:
 481              		.loc 6 15 0
 482 0032 F0EE645A 		fcpys	s11, s9
 483              	.LVL26:
 484              	.LBE164:
 485              	.LBE169:
 486              	.LBB170:
 487              	.LBB171:
 488 0036 F0EE674A 		fcpys	s9, s15
 489 003a 46EE074A 		fmacs	s9, s12, s14
 490              	.LBE171:
 491              	.LBE170:
 492              	.LBB175:
 493              	.LBB165:
 494 003e FDEEE55A 		ftosizs	s11, s11
 495              	.LBE165:
 496              	.LBE175:
 497              	.LBB176:
 498              	.LBB172:
 499 0042 B0EE646A 		fcpys	s12, s9
 500              	.LBE172:
 501              	.LBE176:
 502              	.LBB177:
 503              	.LBB178:
 504 0046 F0EE674A 		fcpys	s9, s15
 505 004a 46EE874A 		fmacs	s9, s13, s14
 506              	.LBE178:
 507              	.LBE177:
 508              	.LBB181:
 509              	.LBB182:
 510 004e 45EE077A 		fmacs	s15, s10, s14
 511              	.LBE182:
 512              	.LBE181:
 513              	.LBB184:
 514              	.LBB179:
 515 0052 FDEEE46A 		ftosizs	s13, s9
 516              	.LBE179:
 517              	.LBE184:
 518              	.LBB185:
 519              	.LBB166:
 520 0056 15EE902A 		fmrs	r2, s11	@ int
 521              	.LVL27:
 522              	.LBE166:
 523              	.LBE185:
 524              	.LBB186:
 525              	.LBB180:
 526 005a 16EE900A 		fmrs	r0, s13	@ int
 527              	.LVL28:
 528              	.LBE180:
 529              	.LBE186:
 530              	.LBB187:
 531              	.LBB173:
 532 005e BDEEC66A 		ftosizs	s12, s12
 533              	.LBE173:
 534              	.LBE187:
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 535              		.loc 1 86 0
 536 0062 1018     		adds	r0, r2, r0
  85:RectangleZigZag.cpp **** 		RectangleZigZag::startY = Transform::mmToEncoder(y);
 537              		.loc 1 85 0
 538 0064 114A     		ldr	r2, .L37+4
 539              	.LBB188:
 540              	.LBB189:
 541              		.loc 3 65 0
 542 0066 124C     		ldr	r4, .L37+8
 543              	.LBE189:
 544              	.LBE188:
 545              	.LBB191:
 546              	.LBB183:
 547              		.loc 6 15 0
 548 0068 FDEEE77A 		ftosizs	s15, s15
 549              	.LBE183:
 550              	.LBE191:
  85:RectangleZigZag.cpp **** 		RectangleZigZag::startY = Transform::mmToEncoder(y);
 551              		.loc 1 85 0
 552 006c 82ED006A 		fsts	s12, [r2, #0]	@ int
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 553              		.loc 1 86 0
 554 0070 104A     		ldr	r2, .L37+12
 555              	.LBB192:
 556              	.LBB190:
 557              		.loc 3 65 0
 558 0072 C4ED005A 		fsts	s11, [r4, #0]	@ int
 559              	.LBE190:
 560              	.LBE192:
 561              	.LBB193:
 562              	.LBB174:
 563              		.loc 6 15 0
 564 0076 16EE103A 		fmrs	r3, s12	@ int
 565              	.LVL29:
 566              	.LBE174:
 567              	.LBE193:
 568              		.loc 1 87 0
 569 007a 17EE904A 		fmrs	r4, s15	@ int
  86:RectangleZigZag.cpp **** 		RectangleZigZag::stopX = startX + Transform::mmToEncoder(width);
 570              		.loc 1 86 0
 571 007e 1060     		str	r0, [r2, #0]
 572              		.loc 1 87 0
 573 0080 0D4A     		ldr	r2, .L37+16
 574 0082 1919     		adds	r1, r3, r4
 575              	.LVL30:
 576 0084 1160     		str	r1, [r2, #0]
  88:RectangleZigZag.cpp **** 		RectangleZigZag::samplingResolution = samplingResolution;
 577              		.loc 1 88 0
 578 0086 019A     		ldr	r2, [sp, #4]
 579 0088 0C49     		ldr	r1, .L37+20
  89:RectangleZigZag.cpp **** 
  90:RectangleZigZag.cpp **** 		Control<X>::setShallPosition(startX);
  91:RectangleZigZag.cpp **** 		Control<Y>::setShallPosition(startY);
  92:RectangleZigZag.cpp **** 		approachingX = false;
 580              		.loc 1 92 0
 581 008a 0D4B     		ldr	r3, .L37+24
  88:RectangleZigZag.cpp **** 		RectangleZigZag::samplingResolution = samplingResolution;
 582              		.loc 1 88 0
 583 008c 0A60     		str	r2, [r1, #0]
 584              	.LBB194:
 585              	.LBB195:
 586              		.loc 3 65 0
 587 008e 0D4A     		ldr	r2, .L37+28
 588              	.LBE195:
 589              	.LBE194:
  84:RectangleZigZag.cpp **** 		RectangleZigZag::startX = Transform::mmToEncoder(x);
 590              		.loc 1 84 0
 591 0090 0D4C     		ldr	r4, .L37+32
 592              	.LBB197:
 593              	.LBB196:
 594              		.loc 3 65 0
 595 0092 82ED006A 		fsts	s12, [r2, #0]	@ int
 596              	.LBE196:
 597              	.LBE197:
 598              		.loc 1 92 0
 599 0096 0022     		movs	r2, #0
 600 0098 1A70     		strb	r2, [r3, #0]
  93:RectangleZigZag.cpp **** 		yDirection = 1;
 601              		.loc 1 93 0
 602 009a 0C4B     		ldr	r3, .L37+36
 603 009c 0122     		movs	r2, #1
  84:RectangleZigZag.cpp **** 		RectangleZigZag::startX = Transform::mmToEncoder(x);
 604              		.loc 1 84 0
 605 009e C4ED005A 		fsts	s11, [r4, #0]	@ int
 606              	.LVL31:
 607              		.loc 1 93 0
 608 00a2 1A60     		str	r2, [r3, #0]
  94:RectangleZigZag.cpp **** 	}
 609              		.loc 1 94 0
 610 00a4 10BC     		pop	{r4}
 611 00a6 7047     		bx	lr
 612              	.L38:
 613              		.align	2
 614              	.L37:
 615 00a8 0000FA44 		.word	1157234688
 616 00ac 00000000 		.word	.LANCHOR3
 617 00b0 00000000 		.word	_ZN7ControlIL4Axis0EE9pos_shallE
 618 00b4 00000000 		.word	.LANCHOR0
 619 00b8 00000000 		.word	.LANCHOR1
 620 00bc 00000000 		.word	.LANCHOR5
 621 00c0 00000000 		.word	.LANCHOR2
 622 00c4 00000000 		.word	_ZN7ControlIL4Axis2EE9pos_shallE
 623 00c8 00000000 		.word	.LANCHOR6
 624 00cc 00000000 		.word	.LANCHOR4
 625              		.cfi_endproc
 626              	.LFE1019:
 628              		.weak	_ZN7ControlIL4Axis2EE9pos_shallE
 629              		.section	.bss._ZN7ControlIL4Axis2EE9pos_shallE,"awG",%nobits,_ZN7ControlIL4Axis2EE9pos_shallE,comd
 630              		.align	2
 633              	_ZN7ControlIL4Axis2EE9pos_shallE:
 634 0000 00000000 		.space	4
 635              		.weak	_ZN7ControlIL4Axis0EE9pos_shallE
 636              		.section	.bss._ZN7ControlIL4Axis0EE9pos_shallE,"awG",%nobits,_ZN7ControlIL4Axis0EE9pos_shallE,comd
 637              		.align	2
 640              	_ZN7ControlIL4Axis0EE9pos_shallE:
 641 0000 00000000 		.space	4
 642              		.global	_ZN15RectangleZigZag18samplingResolutionE
 643              		.global	_ZN15RectangleZigZag5stopYE
 644              		.global	_ZN15RectangleZigZag6startYE
 645              		.global	_ZN15RectangleZigZag5stopXE
 646              		.global	_ZN15RectangleZigZag6startXE
 647              		.section	.bss._ZN15RectangleZigZag5stopYE,"aw",%nobits
 648              		.align	2
 649              		.set	.LANCHOR1,. + 0
 652              	_ZN15RectangleZigZag5stopYE:
 653 0000 00000000 		.space	4
 654              		.section	.bss._ZN15RectangleZigZag18samplingResolutionE,"aw",%nobits
 655              		.align	2
 656              		.set	.LANCHOR5,. + 0
 659              	_ZN15RectangleZigZag18samplingResolutionE:
 660 0000 00000000 		.space	4
 661              		.section	.bss._ZN12_GLOBAL__N_110yDirectionE,"aw",%nobits
 662              		.align	2
 663              		.set	.LANCHOR4,. + 0
 666              	_ZN12_GLOBAL__N_110yDirectionE:
 667 0000 00000000 		.space	4
 668              		.section	.bss._ZN12_GLOBAL__N_112approachingXE,"aw",%nobits
 669              		.set	.LANCHOR2,. + 0
 672              	_ZN12_GLOBAL__N_112approachingXE:
 673 0000 00       		.space	1
 674              		.section	.bss._ZN15RectangleZigZag6startXE,"aw",%nobits
 675              		.align	2
 676              		.set	.LANCHOR6,. + 0
 679              	_ZN15RectangleZigZag6startXE:
 680 0000 00000000 		.space	4
 681              		.section	.rodata.str1.4,"aMS",%progbits,1
 682              		.align	2
 683              	.LC0:
 684 0000 50617474 		.ascii	"Pattern.h done\000"
 684      65726E2E 
 684      6820646F 
 684      6E6500
 685 000f 00       		.section	.bss._ZN15RectangleZigZag6startYE,"aw",%nobits
 686              		.align	2
 687              		.set	.LANCHOR3,. + 0
 690              	_ZN15RectangleZigZag6startYE:
 691 0000 00000000 		.space	4
 692              		.section	.bss._ZN15RectangleZigZag5stopXE,"aw",%nobits
 693              		.align	2
 694              		.set	.LANCHOR0,. + 0
 697              	_ZN15RectangleZigZag5stopXE:
 698 0000 00000000 		.space	4
 699              		.text
 700              	.Letext0:
 701              		.file 7 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/std
 702              		.file 8 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/co
 703              		.file 9 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/gpio.hpp"
 704              		.file 10 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/f
 705              		.file 11 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/driver/connectivity/i2c/constants.hpp"
 706              		.file 12 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/atomic.hpp"
 707              		.file 13 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iodevice.hpp"
 708              		.file 14 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/driver/connectivity/can/message.hpp"
 709              		.file 15 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/utils/template_metaprogramming.hpp"
 710              		.file 16 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/accessor/ram.hpp"
 711              		.file 17 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/include/stddef.h"
 712              		.file 18 "<built-in>"
 713              		.file 19 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 714              		.file 20 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 715              		.file 21 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 716              		.file 22 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 717              		.file 23 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 718              		.file 24 "RectangleZigZag.h"
 719              		.file 25 "/home/jonas/warwick/3dProfilometer/xpcc/ext/stm32f4xx_lib/CMSIS/Include/core_cm4.h"
 720              		.file 26 "project.h"
DEFINED SYMBOLS
                            *ABS*:00000000 RectangleZigZag.cpp
     /tmp/ccXYZPfy.s:20     .text._ZN15RectangleZigZag7isAtEndEv:00000000 $t
     /tmp/ccXYZPfy.s:25     .text._ZN15RectangleZigZag7isAtEndEv:00000000 _ZN15RectangleZigZag7isAtEndEv
     /tmp/ccXYZPfy.s:87     .text._ZN15RectangleZigZag7isAtEndEv:00000034 $d
     /tmp/ccXYZPfy.s:640    .bss._ZN7ControlIL4Axis0EE9pos_shallE:00000000 _ZN7ControlIL4Axis0EE9pos_shallE
     /tmp/ccXYZPfy.s:633    .bss._ZN7ControlIL4Axis2EE9pos_shallE:00000000 _ZN7ControlIL4Axis2EE9pos_shallE
     /tmp/ccXYZPfy.s:95     .text._ZN15RectangleZigZag6sampleEv:00000000 $t
     /tmp/ccXYZPfy.s:100    .text._ZN15RectangleZigZag6sampleEv:00000000 _ZN15RectangleZigZag6sampleEv
     /tmp/ccXYZPfy.s:397    .text._ZN15RectangleZigZag6sampleEv:000000e0 $d
     /tmp/ccXYZPfy.s:424    .text._ZN15RectangleZigZag9configureEiiiii:00000000 $t
     /tmp/ccXYZPfy.s:429    .text._ZN15RectangleZigZag9configureEiiiii:00000000 _ZN15RectangleZigZag9configureEiiiii
     /tmp/ccXYZPfy.s:615    .text._ZN15RectangleZigZag9configureEiiiii:000000a8 $d
     /tmp/ccXYZPfy.s:630    .bss._ZN7ControlIL4Axis2EE9pos_shallE:00000000 $d
     /tmp/ccXYZPfy.s:637    .bss._ZN7ControlIL4Axis0EE9pos_shallE:00000000 $d
     /tmp/ccXYZPfy.s:659    .bss._ZN15RectangleZigZag18samplingResolutionE:00000000 _ZN15RectangleZigZag18samplingResolutionE
     /tmp/ccXYZPfy.s:652    .bss._ZN15RectangleZigZag5stopYE:00000000 _ZN15RectangleZigZag5stopYE
     /tmp/ccXYZPfy.s:690    .bss._ZN15RectangleZigZag6startYE:00000000 _ZN15RectangleZigZag6startYE
     /tmp/ccXYZPfy.s:697    .bss._ZN15RectangleZigZag5stopXE:00000000 _ZN15RectangleZigZag5stopXE
     /tmp/ccXYZPfy.s:679    .bss._ZN15RectangleZigZag6startXE:00000000 _ZN15RectangleZigZag6startXE
     /tmp/ccXYZPfy.s:648    .bss._ZN15RectangleZigZag5stopYE:00000000 $d
     /tmp/ccXYZPfy.s:655    .bss._ZN15RectangleZigZag18samplingResolutionE:00000000 $d
     /tmp/ccXYZPfy.s:662    .bss._ZN12_GLOBAL__N_110yDirectionE:00000000 $d
     /tmp/ccXYZPfy.s:666    .bss._ZN12_GLOBAL__N_110yDirectionE:00000000 _ZN12_GLOBAL__N_110yDirectionE
     /tmp/ccXYZPfy.s:672    .bss._ZN12_GLOBAL__N_112approachingXE:00000000 _ZN12_GLOBAL__N_112approachingXE
     /tmp/ccXYZPfy.s:673    .bss._ZN12_GLOBAL__N_112approachingXE:00000000 $d
     /tmp/ccXYZPfy.s:675    .bss._ZN15RectangleZigZag6startXE:00000000 $d
     /tmp/ccXYZPfy.s:682    .rodata.str1.4:00000000 $d
     /tmp/ccXYZPfy.s:686    .bss._ZN15RectangleZigZag6startYE:00000000 $d
     /tmp/ccXYZPfy.s:693    .bss._ZN15RectangleZigZag5stopXE:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN7ControlIL4Axis0EE13getIsPositionEv
_ZN7ControlIL4Axis2EE13getIsPositionEv
_ZN7Pattern7runningE
dout
_ZN5State3setEi
_ZN4xpcc8IOStream8writeBinEPKc
_ZN4xpcc8IOStream8writeHexEPKc
_ZN4xpcc8IOStream8writeBinEh
_ZN4xpcc8IOStream8writeHexEh
