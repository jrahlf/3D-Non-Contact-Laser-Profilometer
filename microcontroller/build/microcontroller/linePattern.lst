   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"linePattern.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_f2d
  20              		.section	.text._ZN11LinePattern9configureEP5Point,"ax",%progbits
  21              		.align	2
  22              		.global	_ZN11LinePattern9configureEP5Point
  23              		.thumb
  24              		.thumb_func
  26              	_ZN11LinePattern9configureEP5Point:
  27              	.LFB1027:
  28              		.file 1 "linePattern.cpp"
   1:linePattern.cpp **** /*
   2:linePattern.cpp ****  * linePattern.cpp
   3:linePattern.cpp ****  *
   4:linePattern.cpp ****  *  Created on: Mar 7, 2014
   5:linePattern.cpp ****  *      Author: jonas
   6:linePattern.cpp ****  */
   7:linePattern.cpp **** 
   8:linePattern.cpp **** #include "linePattern.h"
   9:linePattern.cpp **** #include "transform.h"
  10:linePattern.cpp **** #include "control.h"
  11:linePattern.cpp **** #include "pattern.h"
  12:linePattern.cpp **** 
  13:linePattern.cpp **** namespace{
  14:linePattern.cpp **** int startX,stopX;
  15:linePattern.cpp **** int startY,stopY;
  16:linePattern.cpp **** double maxSpeed;
  17:linePattern.cpp **** 
  18:linePattern.cpp **** static inline bool reachedPointX(){
  19:linePattern.cpp **** 	return abs(Control<X>::getShallPosition() - Control<X>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
  20:linePattern.cpp **** }
  21:linePattern.cpp **** 
  22:linePattern.cpp **** static inline bool reachedPointY(){
  23:linePattern.cpp **** 	return abs(Control<Y>::getShallPosition() - Control<Y>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
  24:linePattern.cpp **** }
  25:linePattern.cpp **** 
  26:linePattern.cpp **** bool passedFirst;
  27:linePattern.cpp **** }
  28:linePattern.cpp **** 
  29:linePattern.cpp **** void LinePattern::configure(Point* points){
  29              		.loc 1 29 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 24
  37              		.cfi_offset 3, -24
  38              		.cfi_offset 4, -20
  39              		.cfi_offset 5, -16
  40              		.cfi_offset 6, -12
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  30:linePattern.cpp **** 	startX = (points[0].x);
  31:linePattern.cpp **** 	startY = (points[0].y);
  43              		.loc 1 31 0
  44 0002 4368     		ldr	r3, [r0, #4]
  45 0004 124E     		ldr	r6, .L2
  32:linePattern.cpp **** 	stopX = (points[1].x);
  46              		.loc 1 32 0
  47 0006 8168     		ldr	r1, [r0, #8]
  31:linePattern.cpp **** 	startY = (points[0].y);
  48              		.loc 1 31 0
  49 0008 3360     		str	r3, [r6, #0]
  50              		.loc 1 32 0
  51 000a 124B     		ldr	r3, .L2+4
  33:linePattern.cpp **** 	stopY = (points[1].y);
  52              		.loc 1 33 0
  53 000c C268     		ldr	r2, [r0, #12]
  30:linePattern.cpp **** 	startX = (points[0].x);
  54              		.loc 1 30 0
  55 000e 0468     		ldr	r4, [r0, #0]
  32:linePattern.cpp **** 	stopX = (points[1].x);
  56              		.loc 1 32 0
  57 0010 1960     		str	r1, [r3, #0]
  30:linePattern.cpp **** 	startX = (points[0].x);
  58              		.loc 1 30 0
  59 0012 114F     		ldr	r7, .L2+8
  60              		.loc 1 33 0
  61 0014 114B     		ldr	r3, .L2+12
  34:linePattern.cpp **** 
  35:linePattern.cpp **** 	//Control<X>::setShallPosition(Control<X>::getIsPosition());
  36:linePattern.cpp **** 	//Control<Y>::setShallPosition(Control<Y>::getIsPosition());
  37:linePattern.cpp **** 	maxSpeed = Control<ALL>::getMaxSpeed();
  62              		.loc 1 37 0
  63 0016 1248     		ldr	r0, .L2+16
  64              	.LVL1:
  33:linePattern.cpp **** 	stopY = (points[1].y);
  65              		.loc 1 33 0
  66 0018 1A60     		str	r2, [r3, #0]
  30:linePattern.cpp **** 	startX = (points[0].x);
  67              		.loc 1 30 0
  68 001a 3C60     		str	r4, [r7, #0]
  69              		.loc 1 37 0
  70 001c 0068     		ldr	r0, [r0, #0]	@ float
  71 001e 114B     		ldr	r3, .L2+20
  72              	.LBB17:
  73              	.LBB18:
  74              		.file 2 "control_impl.h"
   1:control_impl.h **** /*
   2:control_impl.h ****  * control.cpp
   3:control_impl.h ****  *
   4:control_impl.h ****  *  Created on: Nov 25, 2013
   5:control_impl.h ****  *      Author: jonas
   6:control_impl.h ****  */
   7:control_impl.h **** 
   8:control_impl.h **** 
   9:control_impl.h **** #include "project.h"
  10:control_impl.h **** #include "control.h"
  11:control_impl.h **** #include "motor.h"
  12:control_impl.h **** #include "hallSensor.h"
  13:control_impl.h **** #include "securityController.h"
  14:control_impl.h **** 
  15:control_impl.h **** template<Axis axis>
  16:control_impl.h **** class Motor;
  17:control_impl.h **** 
  18:control_impl.h **** 
  19:control_impl.h **** template<Axis axis>
  20:control_impl.h **** bool Control<axis>::init(){
  21:control_impl.h **** 	Control<axis>::v_is = 0;
  22:control_impl.h **** 	Control<axis>::v_shall = 0;
  23:control_impl.h **** 	Control<axis>::last_pos = 0;
  24:control_impl.h **** 	Control<axis>::positionControlEnabled = true;
  25:control_impl.h **** 	Control<axis>::speedControlEnabled = true;
  26:control_impl.h **** 	//param order: P, I, D, maxErrorSum, maxOutput
  27:control_impl.h **** 	Control<axis>::pos_pid = xpcc::Pid<float, 1>(CONTROLX_KP, CONTROLX_KI, CONTROLX_KD,
  28:control_impl.h **** 			CONTROLX_MAX_ERRORSUM, CONTROLX_MAX_OUTPUT);
  29:control_impl.h **** 	Control<axis>::v_pid = xpcc::Pid<float, 1>(CONTROLV_KP, CONTROLV_KI, CONTROLV_KD,
  30:control_impl.h **** 			CONTROLV_MAX_ERRORSUM, CONTROLV_MAX_OUTPUT);
  31:control_impl.h **** 	return true;
  32:control_impl.h **** }
  33:control_impl.h **** 
  34:control_impl.h **** 
  35:control_impl.h **** template<Axis axis>
  36:control_impl.h **** void Control<axis>::update(bool externalLimitation){
  37:control_impl.h **** 	int enc = getIsPosition();
  38:control_impl.h **** 
  39:control_impl.h **** 	if(positionControlEnabled){
  40:control_impl.h **** 		pos_pid.update(pos_shall - enc, externalLimitation);
  41:control_impl.h **** 		v_shall = pos_pid.getValue();
  42:control_impl.h **** 		/*if(abs(pos_shall - enc) <= CONTROLX_DEADBAND){
  43:control_impl.h **** 			v_shall = 0;
  44:control_impl.h **** 		}*/
  45:control_impl.h **** 	}
  46:control_impl.h **** 
  47:control_impl.h **** 	v_is = (enc - last_pos)*CONTROL_FREQUENCY;
  48:control_impl.h **** 	last_pos = enc;
  49:control_impl.h **** 
  50:control_impl.h **** 	if(speedControlEnabled){
  51:control_impl.h **** 		v_pid.update(v_shall - v_is);
  52:control_impl.h **** 		v_u = v_pid.getValue();
  53:control_impl.h **** 		v_ureal = v_u;
  54:control_impl.h **** 		SecurityController<axis>::saturate(v_ureal);
  55:control_impl.h **** 		if((abs(pos_shall - enc) <= CONTROLX_DEADBAND && positionControlEnabled)
  56:control_impl.h **** 				|| (!positionControlEnabled && abs(v_shall - v_is) < 1000)){
  57:control_impl.h **** 			v_ureal = 0;
  58:control_impl.h **** 			v_pid.reset();
  59:control_impl.h **** 			pos_pid.reset();
  60:control_impl.h **** 		}
  61:control_impl.h **** 		Motor<axis>::setSpeed(v_ureal);
  62:control_impl.h **** 	}
  63:control_impl.h **** }
  64:control_impl.h **** 
  65:control_impl.h **** template<Axis axis>
  66:control_impl.h **** void Control<axis>::setShallPosition(int position){
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
  75              		.loc 2 67 0
  76 0020 114D     		ldr	r5, .L2+24
  68:control_impl.h **** 	Control<ALL>::resetVPid();
  77              		.loc 2 68 0
  78 0022 124C     		ldr	r4, .L2+28
  79              	.LBE18:
  80              	.LBE17:
  81              		.loc 1 37 0
  82 0024 9847     		blx	r3
  83              	.LVL2:
  84 0026 124B     		ldr	r3, .L2+32
  85 0028 C3E90001 		strd	r0, [r3]
  38:linePattern.cpp **** 	Control<ALL>::setMaxSpeed(1);
  86              		.loc 1 38 0
  87 002c 4FF07E50 		mov	r0, #1065353216
  88 0030 104B     		ldr	r3, .L2+36
  89 0032 9847     		blx	r3
  90              	.LVL3:
  39:linePattern.cpp **** 	Control<X>::setShallPosition(startX);
  91              		.loc 1 39 0
  92 0034 3F68     		ldr	r7, [r7, #0]
  93              	.LVL4:
  94              	.LBB21:
  95              	.LBB19:
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
  96              		.loc 2 67 0
  97 0036 A847     		blx	r5
  98              	.LVL5:
  99              		.loc 2 68 0
 100 0038 A047     		blx	r4
 101              	.LVL6:
  69:control_impl.h **** 	pos_shall = position;
 102              		.loc 2 69 0
 103 003a 0F4B     		ldr	r3, .L2+40
 104              	.LBE19:
 105              	.LBE21:
  40:linePattern.cpp **** 	Control<Y>::setShallPosition(startY);
 106              		.loc 1 40 0
 107 003c 3668     		ldr	r6, [r6, #0]
 108              	.LVL7:
 109              	.LBB22:
 110              	.LBB20:
 111              		.loc 2 69 0
 112 003e 1F60     		str	r7, [r3, #0]
 113              	.LBE20:
 114              	.LBE22:
 115              	.LBB23:
 116              	.LBB24:
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
 117              		.loc 2 67 0
 118 0040 A847     		blx	r5
 119              	.LVL8:
  68:control_impl.h **** 	Control<ALL>::resetVPid();
 120              		.loc 2 68 0
 121 0042 A047     		blx	r4
 122              	.LVL9:
 123              		.loc 2 69 0
 124 0044 0D4B     		ldr	r3, .L2+44
 125 0046 1E60     		str	r6, [r3, #0]
 126              	.LBE24:
 127              	.LBE23:
  41:linePattern.cpp **** 	passedFirst = false;
 128              		.loc 1 41 0
 129 0048 0D4B     		ldr	r3, .L2+48
 130 004a 0022     		movs	r2, #0
 131 004c 1A70     		strb	r2, [r3, #0]
 132 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 133              	.L3:
 134              		.align	2
 135              	.L2:
 136 0050 00000000 		.word	.LANCHOR1
 137 0054 00000000 		.word	.LANCHOR2
 138 0058 00000000 		.word	.LANCHOR0
 139 005c 00000000 		.word	.LANCHOR3
 140 0060 00000000 		.word	_ZN7ControlIL4Axis5EE8maxSpeedE
 141 0064 00000000 		.word	__aeabi_f2d
 142 0068 00000000 		.word	_ZN7ControlIL4Axis5EE11resetPosPidEv
 143 006c 00000000 		.word	_ZN7ControlIL4Axis5EE9resetVPidEv
 144 0070 00000000 		.word	.LANCHOR4
 145 0074 00000000 		.word	_ZN7ControlIL4Axis5EE11setMaxSpeedEf
 146 0078 00000000 		.word	_ZN7ControlIL4Axis0EE9pos_shallE
 147 007c 00000000 		.word	_ZN7ControlIL4Axis2EE9pos_shallE
 148 0080 00000000 		.word	.LANCHOR5
 149              		.cfi_endproc
 150              	.LFE1027:
 152              		.global	__aeabi_d2f
 153              		.section	.text._ZN11LinePattern6sampleEv,"ax",%progbits
 154              		.align	2
 155              		.global	_ZN11LinePattern6sampleEv
 156              		.thumb
 157              		.thumb_func
 159              	_ZN11LinePattern6sampleEv:
 160              	.LFB1028:
  42:linePattern.cpp **** }
  43:linePattern.cpp **** 
  44:linePattern.cpp **** void LinePattern::sample(){
 161              		.loc 1 44 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 32
 168              		.cfi_offset 3, -32
 169              		.cfi_offset 4, -28
 170              		.cfi_offset 5, -24
 171              		.cfi_offset 6, -20
 172              		.cfi_offset 7, -16
 173              		.cfi_offset 8, -12
 174              		.cfi_offset 9, -8
 175              		.cfi_offset 14, -4
 176              	.LBB43:
 177              	.LBB44:
 178              	.LBB45:
 179              	.LBB46:
 180              		.file 3 "control.h"
   1:control.h     **** /*
   2:control.h     ****  * control.h
   3:control.h     ****  *
   4:control.h     ****  *  Created on: Nov 24, 2013
   5:control.h     ****  *      Author: jonas
   6:control.h     ****  */
   7:control.h     **** 
   8:control.h     **** #ifndef CONTROL_H_
   9:control.h     **** #define CONTROL_H_
  10:control.h     **** 
  11:control.h     **** #include "project.h"
  12:control.h     **** #include <xpcc/math/filter/pid.hpp>
  13:control.h     **** 
  14:control.h     **** 
  15:control.h     **** template<Axis axis>
  16:control.h     **** class Control{
  17:control.h     **** 
  18:control.h     **** 	friend class Control<ALL>;
  19:control.h     **** 
  20:control.h     **** private:
  21:control.h     **** 	static volatile int pos_shall;
  22:control.h     **** 	static volatile int v_is; // velocity in pulses/s
  23:control.h     **** 	static volatile int v_shall;
  24:control.h     **** 
  25:control.h     **** 	static float maxSpeed;
  26:control.h     **** 	static xpcc::Pid<float, 1> v_pid;
  27:control.h     **** 	static xpcc::Pid<float, 1> pos_pid;
  28:control.h     **** 	static int v_u; // speed controller output
  29:control.h     **** 	static int v_ureal;
  30:control.h     **** 	static int last_pos; //position when the last control loop was executed
  31:control.h     **** 
  32:control.h     **** 	static bool positionControlEnabled;
  33:control.h     **** 	static bool speedControlEnabled;
  34:control.h     **** 
  35:control.h     **** public:
  36:control.h     **** 
  37:control.h     **** 	static bool init();
  38:control.h     **** 	static void enablePositionControl(bool enable);
  39:control.h     **** 	static void enableSpeedControl(bool enable);
  40:control.h     **** 	static void setShallPosition(int x);
  41:control.h     **** 	/**
  42:control.h     **** 	 * Also disables the position controller
  43:control.h     **** 	 * @param speed [-1,1]
  44:control.h     **** 	 */
  45:control.h     **** 	static void setShallSpeed(double speed);
  46:control.h     **** 	static int getSpeedErrorSum();
  47:control.h     **** 	static int getPositionErrorSum();
  48:control.h     **** 	static int32_t getIsPosition();
  49:control.h     **** 	static inline int getShallSpeed(){ return v_shall; }
  50:control.h     **** 	static inline int getIsSpeed(){ return v_is; }
  51:control.h     **** 	static inline int getShallPosition(){ return pos_shall; }
 181              		.loc 3 51 0
 182 0004 2F4C     		ldr	r4, .L21
 183              	.LBE46:
 184              	.LBE45:
  19:linePattern.cpp **** 	return abs(Control<X>::getShallPosition() - Control<X>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
 185              		.loc 1 19 0
 186 0006 304B     		ldr	r3, .L21+4
 187              	.LBB48:
 188              	.LBB47:
 189              		.loc 3 51 0
 190 0008 2568     		ldr	r5, [r4, #0]
 191              	.LBE47:
 192              	.LBE48:
  19:linePattern.cpp **** 	return abs(Control<X>::getShallPosition() - Control<X>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
 193              		.loc 1 19 0
 194 000a 9847     		blx	r3
 195              	.LVL10:
 196 000c 281A     		subs	r0, r5, r0
 197 000e 80EAE075 		eor	r5, r0, r0, asr #31
 198 0012 A5EBE075 		sub	r5, r5, r0, asr #31
 199              	.LBE44:
 200              	.LBE43:
  45:linePattern.cpp **** 	if(reachedPointX() && reachedPointY()){
 201              		.loc 1 45 0
 202 0016 012D     		cmp	r5, #1
 203 0018 01DD     		ble	.L16
 204 001a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 205              	.L16:
 206              	.LBB49:
 207              	.LBB50:
 208              	.LBB51:
 209              	.LBB52:
 210              		.loc 3 51 0
 211 001e 2B4F     		ldr	r7, .L21+8
 212              	.LBE52:
 213              	.LBE51:
  23:linePattern.cpp **** 	return abs(Control<Y>::getShallPosition() - Control<Y>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
 214              		.loc 1 23 0
 215 0020 2B4B     		ldr	r3, .L21+12
 216              	.LBB54:
 217              	.LBB53:
 218              		.loc 3 51 0
 219 0022 3D68     		ldr	r5, [r7, #0]
 220              	.LBE53:
 221              	.LBE54:
  23:linePattern.cpp **** 	return abs(Control<Y>::getShallPosition() - Control<Y>::getIsPosition()) <= RECTANGLE_ZIGZAG_THRES
 222              		.loc 1 23 0
 223 0024 9847     		blx	r3
 224              	.LVL11:
 225 0026 281A     		subs	r0, r5, r0
 226 0028 80EAE075 		eor	r5, r0, r0, asr #31
 227 002c A5EBE075 		sub	r5, r5, r0, asr #31
 228              	.LBE50:
 229              	.LBE49:
 230              		.loc 1 45 0
 231 0030 012D     		cmp	r5, #1
 232 0032 1EDC     		bgt	.L17
  46:linePattern.cpp **** 		Control<ALL>::setMaxSpeed(maxSpeed);
 233              		.loc 1 46 0
 234 0034 274B     		ldr	r3, .L21+16
  47:linePattern.cpp **** 		if(passedFirst){
 235              		.loc 1 47 0
 236 0036 DFF8D890 		ldr	r9, .L21+76
  46:linePattern.cpp **** 		Control<ALL>::setMaxSpeed(maxSpeed);
 237              		.loc 1 46 0
 238 003a D3E90001 		ldrd	r0, [r3]
 239 003e 264B     		ldr	r3, .L21+20
 240 0040 9847     		blx	r3
 241              	.LVL12:
 242 0042 264B     		ldr	r3, .L21+24
 243 0044 9847     		blx	r3
 244              	.LVL13:
 245              		.loc 1 47 0
 246 0046 99F80030 		ldrb	r3, [r9, #0]	@ zero_extendqisi2
 247 004a A3B9     		cbnz	r3, .L18
 248              	.L11:
  48:linePattern.cpp **** 			Pattern::done();
  49:linePattern.cpp **** 		}
  50:linePattern.cpp **** 		passedFirst = true;
  51:linePattern.cpp **** 		Control<X>::setShallPosition(stopX);
 249              		.loc 1 51 0
 250 004c 244B     		ldr	r3, .L21+28
 251              	.LBB55:
 252              	.LBB56:
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
 253              		.loc 2 67 0
 254 004e 254E     		ldr	r6, .L21+32
 255              	.LBE56:
 256              	.LBE55:
 257              		.loc 1 51 0
 258 0050 D3F80080 		ldr	r8, [r3, #0]
 259              	.LVL14:
 260              	.LBB60:
 261              	.LBB57:
  68:control_impl.h **** 	Control<ALL>::resetVPid();
 262              		.loc 2 68 0
 263 0054 244D     		ldr	r5, .L21+36
 264              	.LBE57:
 265              	.LBE60:
  50:linePattern.cpp **** 		passedFirst = true;
 266              		.loc 1 50 0
 267 0056 0123     		movs	r3, #1
 268 0058 89F80030 		strb	r3, [r9, #0]
 269              	.LBB61:
 270              	.LBB58:
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
 271              		.loc 2 67 0
 272 005c B047     		blx	r6
 273              	.LVL15:
  68:control_impl.h **** 	Control<ALL>::resetVPid();
 274              		.loc 2 68 0
 275 005e A847     		blx	r5
 276              	.LVL16:
 277              	.LBE58:
 278              	.LBE61:
  52:linePattern.cpp **** 		Control<Y>::setShallPosition(stopY);
 279              		.loc 1 52 0
 280 0060 224B     		ldr	r3, .L21+40
 281              	.LBB62:
 282              	.LBB59:
 283              		.loc 2 69 0
 284 0062 C4F80080 		str	r8, [r4, #0]
 285              	.LBE59:
 286              	.LBE62:
 287              		.loc 1 52 0
 288 0066 1C68     		ldr	r4, [r3, #0]
 289              	.LVL17:
 290              	.LBB63:
 291              	.LBB64:
  67:control_impl.h **** 	Control<ALL>::resetPosPid();
 292              		.loc 2 67 0
 293 0068 B047     		blx	r6
 294              	.LVL18:
  68:control_impl.h **** 	Control<ALL>::resetVPid();
 295              		.loc 2 68 0
 296 006a A847     		blx	r5
 297              	.LVL19:
 298              		.loc 2 69 0
 299 006c 3C60     		str	r4, [r7, #0]
 300 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 301              	.LVL20:
 302              	.L17:
 303 0072 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 304              	.L18:
 305              	.LBE64:
 306              	.LBE63:
 307              	.LBB65:
 308              	.LBB66:
 309              		.file 4 "pattern.h"
   1:pattern.h     **** /*
   2:pattern.h     ****  * pattern.h
   3:pattern.h     ****  *
   4:pattern.h     ****  *  Created on: Jan 18, 2014
   5:pattern.h     ****  *      Author: jonas
   6:pattern.h     ****  */
   7:pattern.h     **** 
   8:pattern.h     **** #ifndef PATTERN_H_
   9:pattern.h     **** #define PATTERN_H_
  10:pattern.h     **** 
  11:pattern.h     **** #include "control.h"
  12:pattern.h     **** #include "project.h"
  13:pattern.h     **** #include "state.h"
  14:pattern.h     **** #include "pcInterface.h"
  15:pattern.h     **** 
  16:pattern.h     **** class QuadrangleZigZag;
  17:pattern.h     **** 
  18:pattern.h     **** class Pattern{
  19:pattern.h     **** 	static void (*func)(void);
  20:pattern.h     **** 	static bool running;
  21:pattern.h     **** 	static bool paused;
  22:pattern.h     **** public:
  23:pattern.h     **** 	template<class T>
  24:pattern.h     **** 	static void setPattern(T pattern, float maxSpeed = 1){
  25:pattern.h     **** 		(void)pattern;
  26:pattern.h     **** 		//Control<ALL>::setMaxSpeed(maxSpeed);
  27:pattern.h     **** 		func = &T::sample;
  28:pattern.h     **** 	}
  29:pattern.h     **** 	static void follow(){
  30:pattern.h     **** 		if(!running || func == 0){
  31:pattern.h     **** 			return;
  32:pattern.h     **** 		}
  33:pattern.h     **** 		func();
  34:pattern.h     **** 	}
  35:pattern.h     **** 	static void pause(){
  36:pattern.h     **** 		running = false;
  37:pattern.h     **** 		paused = true;
  38:pattern.h     **** 	}
  39:pattern.h     **** 	static void start(){
  40:pattern.h     **** 		running = true;
  41:pattern.h     **** 		paused = false;
  42:pattern.h     **** 		State::set(State::SCANNING_RECTANGLE);
  43:pattern.h     **** 		dout << "Pattern start" << endl;
  44:pattern.h     **** 		commandOut << PC::ucCommand::FLUSH_DATA << endl;
  45:pattern.h     **** 	}
  46:pattern.h     **** 	static void resume(){
  47:pattern.h     **** 		running = true;
  48:pattern.h     **** 		/*if(!paused){
  49:pattern.h     **** 			start();
  50:pattern.h     **** 		}*/
  51:pattern.h     **** 		paused = false;
  52:pattern.h     **** 	}
  53:pattern.h     **** 	static void done(){
  54:pattern.h     **** 		running = 0;
 310              		.loc 4 54 0
 311 0076 1E4B     		ldr	r3, .L21+44
 312              	.LBB67:
 313              	.LBB68:
 314              		.file 5 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp"
   1:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // coding: utf-8
   2:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // ----------------------------------------------------------------------------
   3:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** /* Copyright (c) 2009, Roboterclub Aachen e.V.
   4:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * All rights reserved.
   5:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *
   6:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * Redistribution and use in source and binary forms, with or without
   7:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * modification, are permitted provided that the following conditions are met:
   8:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * 
   9:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Redistributions of source code must retain the above copyright
  10:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       notice, this list of conditions and the following disclaimer.
  11:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Redistributions in binary form must reproduce the above copyright
  12:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       notice, this list of conditions and the following disclaimer in the
  13:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       documentation and/or other materials provided with the distribution.
  14:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *     * Neither the name of the Roboterclub Aachen e.V. nor the
  15:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       names of its contributors may be used to endorse or promote products
  16:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *       derived from this software without specific prior written permission.
  17:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  *
  18:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
  19:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  20:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  21:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
  22:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  23:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  24:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  25:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  26:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  27:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  28:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp ****  */
  29:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // ----------------------------------------------------------------------------
  30:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  31:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #ifndef XPCC__IOSTREAM_HPP
  32:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #define XPCC__IOSTREAM_HPP
  33:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  34:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include <xpcc/architecture/utils.hpp>
  35:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  36:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include "iodevice.hpp"
  37:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #include "iodevice_wrapper.hpp"
  38:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  39:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** namespace xpcc
  40:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** {
  41:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	/**
  42:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \brief 	This Formats all primary types into a string stream for
  43:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * 			output or it reads values from a input and converts them to
  44:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * 			a given type;
  45:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 *
  46:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \ingroup io
  47:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 * \author	Martin Rosekeit <martin.rosekeit@rwth-aachen.de>
  48:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	 */
  49:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	class IOStream
  50:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	{
  51:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 	public :
  52:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/**
  53:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \brief	Constructor
  54:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * 
  55:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \param	device	device to write the stream to
  56:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * 
  57:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \code
  58:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 *	MyIODevice device;
  59:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 *	IOStream stream( device );
  60:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 * \endcode
  61:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		 */
  62:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream(IODevice& device);
  63:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  64:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		inline IOStream&
  65:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		write(char c)
  66:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  67:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->device->write(c);
  68:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  69:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  70:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
  71:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		inline IOStream&
  72:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		flush()
  73:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  74:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->device->flush();
  75:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Ascii;
  76:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  77:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  78:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
  79:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Binary style for \c char and \c char*
  80:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  81:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		bin()
  82:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  83:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Binary;
  84:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  85:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  86:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  87:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Hexadecimal style for \c char and \c char*
  88:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  89:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		hex()
  90:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  91:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Hexadecimal;
  92:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
  93:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
  94:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
  95:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		/// set the output mode to Mode::Ascii style for \c char and \c char*
  96:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
  97:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ascii()
  98:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
  99:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->mode = Mode::Ascii;
 100:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 101:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 102:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 103:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 104:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 105:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const unsigned char& v)
 106:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 107:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 108:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(static_cast<uint16_t>(v));
 109:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 110:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 111:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 112:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 113:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 114:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 115:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 116:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 117:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 118:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 119:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 120:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const char& v)
 121:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 122:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 123:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(v);
 124:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 125:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 127:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 128:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 129:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 130:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 131:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 132:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 133:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 134:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 135:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint16_t& v)
 136:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 137:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 138:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 139:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 140:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 141:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 142:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 143:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 144:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 145:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 146:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 147:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 148:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 149:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 150:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 151:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 152:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int16_t& v)
 153:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 154:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 155:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 156:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 157:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 158:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 159:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 160:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 161:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 162:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 163:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 164:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 165:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 166:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 167:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 168:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 169:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint32_t& v)
 170:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 171:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 172:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 173:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 174:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 175:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 24));
 176:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 16));
 177:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 178:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 179:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 180:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 181:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 24));
 182:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 16));
 183:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 184:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 185:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 186:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 187:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 188:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 189:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 190:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int32_t& v)
 191:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 192:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 193:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeInteger(v);
 194:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 195:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 196:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 24));
 197:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 16));
 198:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v >> 8));
 199:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(static_cast<uint8_t>(v & 0xff));
 200:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 201:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 202:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 24));
 203:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 16));
 204:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v >> 8));
 205:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(static_cast<uint8_t>(v & 0xff));
 206:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 207:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 208:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 209:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 210:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__OS_OSX)
 211:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// For APPLE 'int64_t' is of type 'int'. Therefore there is no
 212:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// function here for the default type 'long int'. As 'long int' has the same
 213:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// width as 'int64_t' we just use a typedef here.
 214:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 215:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const long int& v)
 216:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 217:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<int64_t>(v));
 218:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 219:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 220:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 221:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 222:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const long unsigned int& v)
 223:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 224:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<uint64_t>(v));
 225:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 226:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 227:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 228:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 229:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__CPU_ARM) || defined(XPCC__CPU_AVR32)
 230:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// For ARM 'int32_t' is of type 'long'. Therefore there is no
 231:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// function here for the default type 'int'. As 'int' has the same
 232:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		// width as 'int32_t' we just use a typedef here.
 233:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 234:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int& v)
 235:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 236:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<int32_t>(v));
 237:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 238:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 239:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 240:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 241:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const unsigned int& v)
 242:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 243:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(static_cast<uint32_t>(v));
 244:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 245:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 246:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 247:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 248:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // The 64-bit types on the AVR are extremely slow and are
 249:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** // therefore excluded here
 250:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if !defined(XPCC__CPU_AVR)
 251:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 252:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const uint64_t& v)
 253:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 254:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(v);
 255:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 256:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 257:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 258:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 259:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const int64_t& v)
 260:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 261:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeInteger(v);
 262:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 263:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 264:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 265:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		
 266:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 267:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const float& v)
 268:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 269:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeFloat(v);
 270:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 271:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 272:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 273:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		ALWAYS_INLINE IOStream&
 274:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const double& v)
 275:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 276:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #if defined(XPCC__CPU_AVR)
 277:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeFloat(static_cast<float>(v));
 278:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #else
 279:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			this->writeDouble(v);
 280:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** #endif
 281:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			return *this;
 282:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		}
 283:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 
 284:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		IOStream&
 285:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		operator << (const char* s)
 286:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 		{
 287:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if( this->mode == Mode::Ascii ) {
 315              		.loc 5 287 0
 316 0078 1E4D     		ldr	r5, .L21+48
 317              	.LBE68:
 318              	.LBE67:
 319              		.loc 4 54 0
 320 007a 0022     		movs	r2, #0
 321 007c 1A70     		strb	r2, [r3, #0]
  55:pattern.h     **** 		State::set(State::READY);
 322              		.loc 4 55 0
 323 007e 0120     		movs	r0, #1
 324 0080 1D4B     		ldr	r3, .L21+52
 325 0082 9847     		blx	r3
 326              	.LVL21:
 327              	.LBB71:
 328              	.LBB69:
 329              		.loc 5 287 0
 330 0084 6B68     		ldr	r3, [r5, #4]
 331 0086 83B1     		cbz	r3, .L19
 288:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(s);
 289:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 290:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if( this->mode == Mode::Binary ) {
 332              		.loc 5 290 0
 333 0088 022B     		cmp	r3, #2
 291:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(s);
 334              		.loc 5 291 0
 335 008a 2846     		mov	r0, r5
 336 008c 1B49     		ldr	r1, .L21+56
 337 008e 0CBF     		ite	eq
 338 0090 1B4B     		ldreq	r3, .L21+60
 292:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			}
 293:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else {
 294:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(s);
 339              		.loc 5 294 0
 340 0092 1C4B     		ldrne	r3, .L21+64
 341 0094 9847     		blx	r3
 342              	.LVL22:
 343              	.L8:
 344              	.LBE69:
 345              	.LBE71:
 346              	.LBB72:
 347              	.LBB73:
 122:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			if (this->mode == Mode::Ascii) {
 348              		.loc 5 122 0
 349 0096 6B68     		ldr	r3, [r5, #4]
 350 0098 1648     		ldr	r0, .L21+48
 351 009a 63B1     		cbz	r3, .L20
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 352              		.loc 5 126 0
 353 009c 0A21     		movs	r1, #10
 125:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 			else if (this->mode == Mode::Binary) {
 354              		.loc 5 125 0
 355 009e 022B     		cmp	r3, #2
 126:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeBin(v);
 356              		.loc 5 126 0
 357 00a0 0CBF     		ite	eq
 358 00a2 194B     		ldreq	r3, .L21+68
 129:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->writeHex(v);
 359              		.loc 5 129 0
 360 00a4 194B     		ldrne	r3, .L21+72
 361 00a6 9847     		blx	r3
 362              	.LVL23:
 363 00a8 D0E7     		b	.L11
 364              	.LVL24:
 365              	.L19:
 366              	.LBE73:
 367              	.LBE72:
 368              	.LBB75:
 369              	.LBB70:
 288:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(s);
 370              		.loc 5 288 0
 371 00aa 2868     		ldr	r0, [r5, #0]
 372 00ac 1349     		ldr	r1, .L21+56
 373 00ae 0368     		ldr	r3, [r0, #0]
 374 00b0 DB68     		ldr	r3, [r3, #12]
 375 00b2 9847     		blx	r3
 376              	.LVL25:
 377 00b4 EFE7     		b	.L8
 378              	.LVL26:
 379              	.L20:
 380              	.LBE70:
 381              	.LBE75:
 382              	.LBB76:
 383              	.LBB74:
 123:/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iostream.hpp **** 				this->device->write(v);
 384              		.loc 5 123 0
 385 00b6 0068     		ldr	r0, [r0, #0]
 386 00b8 0368     		ldr	r3, [r0, #0]
 387 00ba 0A21     		movs	r1, #10
 388 00bc 9B68     		ldr	r3, [r3, #8]
 389 00be 9847     		blx	r3
 390              	.LVL27:
 391 00c0 C4E7     		b	.L11
 392              	.L22:
 393 00c2 00BF     		.align	2
 394              	.L21:
 395 00c4 00000000 		.word	_ZN7ControlIL4Axis0EE9pos_shallE
 396 00c8 00000000 		.word	_ZN7ControlIL4Axis0EE13getIsPositionEv
 397 00cc 00000000 		.word	_ZN7ControlIL4Axis2EE9pos_shallE
 398 00d0 00000000 		.word	_ZN7ControlIL4Axis2EE13getIsPositionEv
 399 00d4 00000000 		.word	.LANCHOR4
 400 00d8 00000000 		.word	__aeabi_d2f
 401 00dc 00000000 		.word	_ZN7ControlIL4Axis5EE11setMaxSpeedEf
 402 00e0 00000000 		.word	.LANCHOR2
 403 00e4 00000000 		.word	_ZN7ControlIL4Axis5EE11resetPosPidEv
 404 00e8 00000000 		.word	_ZN7ControlIL4Axis5EE9resetVPidEv
 405 00ec 00000000 		.word	.LANCHOR3
 406 00f0 00000000 		.word	_ZN7Pattern7runningE
 407 00f4 00000000 		.word	dout
 408 00f8 00000000 		.word	_ZN5State3setEi
 409 00fc 00000000 		.word	.LC0
 410 0100 00000000 		.word	_ZN4xpcc8IOStream8writeBinEPKc
 411 0104 00000000 		.word	_ZN4xpcc8IOStream8writeHexEPKc
 412 0108 00000000 		.word	_ZN4xpcc8IOStream8writeBinEh
 413 010c 00000000 		.word	_ZN4xpcc8IOStream8writeHexEh
 414 0110 00000000 		.word	.LANCHOR5
 415              	.LBE74:
 416              	.LBE76:
 417              	.LBE66:
 418              	.LBE65:
 419              		.cfi_endproc
 420              	.LFE1028:
 422              		.weak	_ZN7ControlIL4Axis2EE9pos_shallE
 423              		.section	.bss._ZN7ControlIL4Axis2EE9pos_shallE,"awG",%nobits,_ZN7ControlIL4Axis2EE9pos_shallE,comd
 424              		.align	2
 427              	_ZN7ControlIL4Axis2EE9pos_shallE:
 428 0000 00000000 		.space	4
 429              		.weak	_ZN7ControlIL4Axis0EE9pos_shallE
 430              		.section	.bss._ZN7ControlIL4Axis0EE9pos_shallE,"awG",%nobits,_ZN7ControlIL4Axis0EE9pos_shallE,comd
 431              		.align	2
 434              	_ZN7ControlIL4Axis0EE9pos_shallE:
 435 0000 00000000 		.space	4
 436              		.weak	_ZN7ControlIL4Axis5EE8maxSpeedE
 437              		.section	.bss._ZN7ControlIL4Axis5EE8maxSpeedE,"awG",%nobits,_ZN7ControlIL4Axis5EE8maxSpeedE,comdat
 438              		.align	2
 441              	_ZN7ControlIL4Axis5EE8maxSpeedE:
 442 0000 00000000 		.space	4
 443              		.section	.bss._ZN12_GLOBAL__N_15stopXE,"aw",%nobits
 444              		.align	2
 445              		.set	.LANCHOR2,. + 0
 448              	_ZN12_GLOBAL__N_15stopXE:
 449 0000 00000000 		.space	4
 450              		.section	.bss._ZN12_GLOBAL__N_15stopYE,"aw",%nobits
 451              		.align	2
 452              		.set	.LANCHOR3,. + 0
 455              	_ZN12_GLOBAL__N_15stopYE:
 456 0000 00000000 		.space	4
 457              		.section	.bss._ZN12_GLOBAL__N_16startXE,"aw",%nobits
 458              		.align	2
 459              		.set	.LANCHOR0,. + 0
 462              	_ZN12_GLOBAL__N_16startXE:
 463 0000 00000000 		.space	4
 464              		.section	.bss._ZN12_GLOBAL__N_16startYE,"aw",%nobits
 465              		.align	2
 466              		.set	.LANCHOR1,. + 0
 469              	_ZN12_GLOBAL__N_16startYE:
 470 0000 00000000 		.space	4
 471              		.section	.bss._ZN12_GLOBAL__N_18maxSpeedE,"aw",%nobits
 472              		.align	3
 473              		.set	.LANCHOR4,. + 0
 476              	_ZN12_GLOBAL__N_18maxSpeedE:
 477 0000 00000000 		.space	8
 477      00000000 
 478              		.section	.rodata.str1.4,"aMS",%progbits,1
 479              		.align	2
 480              	.LC0:
 481 0000 50617474 		.ascii	"Pattern done\000"
 481      65726E20 
 481      646F6E65 
 481      00
 482 000d 000000   		.section	.bss._ZN12_GLOBAL__N_111passedFirstE,"aw",%nobits
 483              		.set	.LANCHOR5,. + 0
 486              	_ZN12_GLOBAL__N_111passedFirstE:
 487 0000 00       		.space	1
 488              		.text
 489              	.Letext0:
 490              		.file 6 "project.h"
 491              		.file 7 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/std
 492              		.file 8 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/co
 493              		.file 9 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/ua
 494              		.file 10 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/u
 495              		.file 11 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/gpio.hpp"
 496              		.file 12 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/platform/cortex_m3/stm32/f
 497              		.file 13 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/driver/connectivity/i2c/constants.hpp"
 498              		.file 14 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/atomic.hpp"
 499              		.file 15 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/io/iodevice.hpp"
 500              		.file 16 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/driver/connectivity/can/message.hpp"
 501              		.file 17 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/utils/template_metaprogramming.hpp"
 502              		.file 18 "/home/jonas/warwick/3dProfilometer/xpcc/src/xpcc/architecture/driver/accessor/ram.hpp"
 503              		.file 19 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/include/stddef.h"
 504              		.file 20 "<built-in>"
 505              		.file 21 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 506              		.file 22 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 507              		.file 23 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 508              		.file 24 "linePattern.h"
 509              		.file 25 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/st
 510              		.file 26 "/opt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/c+
 511              		.file 27 "/home/jonas/warwick/3dProfilometer/xpcc/ext/stm32f4xx_lib/CMSIS/Include/core_cm4.h"
 512              		.file 28 "pcInterface.h"
DEFINED SYMBOLS
                            *ABS*:00000000 linePattern.cpp
     /tmp/ccIXCeaj.s:21     .text._ZN11LinePattern9configureEP5Point:00000000 $t
     /tmp/ccIXCeaj.s:26     .text._ZN11LinePattern9configureEP5Point:00000000 _ZN11LinePattern9configureEP5Point
     /tmp/ccIXCeaj.s:136    .text._ZN11LinePattern9configureEP5Point:00000050 $d
     /tmp/ccIXCeaj.s:441    .bss._ZN7ControlIL4Axis5EE8maxSpeedE:00000000 _ZN7ControlIL4Axis5EE8maxSpeedE
     /tmp/ccIXCeaj.s:434    .bss._ZN7ControlIL4Axis0EE9pos_shallE:00000000 _ZN7ControlIL4Axis0EE9pos_shallE
     /tmp/ccIXCeaj.s:427    .bss._ZN7ControlIL4Axis2EE9pos_shallE:00000000 _ZN7ControlIL4Axis2EE9pos_shallE
     /tmp/ccIXCeaj.s:154    .text._ZN11LinePattern6sampleEv:00000000 $t
     /tmp/ccIXCeaj.s:159    .text._ZN11LinePattern6sampleEv:00000000 _ZN11LinePattern6sampleEv
     /tmp/ccIXCeaj.s:395    .text._ZN11LinePattern6sampleEv:000000c4 $d
     /tmp/ccIXCeaj.s:424    .bss._ZN7ControlIL4Axis2EE9pos_shallE:00000000 $d
     /tmp/ccIXCeaj.s:431    .bss._ZN7ControlIL4Axis0EE9pos_shallE:00000000 $d
     /tmp/ccIXCeaj.s:438    .bss._ZN7ControlIL4Axis5EE8maxSpeedE:00000000 $d
     /tmp/ccIXCeaj.s:444    .bss._ZN12_GLOBAL__N_15stopXE:00000000 $d
     /tmp/ccIXCeaj.s:448    .bss._ZN12_GLOBAL__N_15stopXE:00000000 _ZN12_GLOBAL__N_15stopXE
     /tmp/ccIXCeaj.s:451    .bss._ZN12_GLOBAL__N_15stopYE:00000000 $d
     /tmp/ccIXCeaj.s:455    .bss._ZN12_GLOBAL__N_15stopYE:00000000 _ZN12_GLOBAL__N_15stopYE
     /tmp/ccIXCeaj.s:458    .bss._ZN12_GLOBAL__N_16startXE:00000000 $d
     /tmp/ccIXCeaj.s:462    .bss._ZN12_GLOBAL__N_16startXE:00000000 _ZN12_GLOBAL__N_16startXE
     /tmp/ccIXCeaj.s:465    .bss._ZN12_GLOBAL__N_16startYE:00000000 $d
     /tmp/ccIXCeaj.s:469    .bss._ZN12_GLOBAL__N_16startYE:00000000 _ZN12_GLOBAL__N_16startYE
     /tmp/ccIXCeaj.s:472    .bss._ZN12_GLOBAL__N_18maxSpeedE:00000000 $d
     /tmp/ccIXCeaj.s:476    .bss._ZN12_GLOBAL__N_18maxSpeedE:00000000 _ZN12_GLOBAL__N_18maxSpeedE
     /tmp/ccIXCeaj.s:479    .rodata.str1.4:00000000 $d
     /tmp/ccIXCeaj.s:486    .bss._ZN12_GLOBAL__N_111passedFirstE:00000000 _ZN12_GLOBAL__N_111passedFirstE
     /tmp/ccIXCeaj.s:487    .bss._ZN12_GLOBAL__N_111passedFirstE:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
_ZN7ControlIL4Axis5EE11resetPosPidEv
_ZN7ControlIL4Axis5EE9resetVPidEv
_ZN7ControlIL4Axis5EE11setMaxSpeedEf
__aeabi_d2f
_ZN7ControlIL4Axis0EE13getIsPositionEv
_ZN7ControlIL4Axis2EE13getIsPositionEv
_ZN7Pattern7runningE
dout
_ZN5State3setEi
_ZN4xpcc8IOStream8writeBinEPKc
_ZN4xpcc8IOStream8writeHexEPKc
_ZN4xpcc8IOStream8writeBinEh
_ZN4xpcc8IOStream8writeHexEh
