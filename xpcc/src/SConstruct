#!/usr/bin/env python
# 
# Copyright (c) 2009, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Roboterclub Aachen e.V. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
Help("""
DESCRIPTION

   This SConstruct file has two responsibilities: run the unittests or build
   the xpcc-library.

COMMANDLINE ARGUMENTS
 
   The default is to run the unittests for the PC with the configuration
   from the file 'unittest.cfg'.

   To achieve the same behaviour you can also run:

      $ scons run config=unittest.cfg

config=file
   Load a different configuration file. The path to 'file' must be relative
   to the current directory or an absolute path.
   To build the unittests for an ATxmega use for example:
   
      $ scons config=unitttest_atxmega.cfg
   
   Another example is when you don't want to change the original
   configuration files when building the library
   
build
   Build the unittests without running them.
 
run
   Run the unittests. This argument is only available when compiling for
   the PC target.

template=file
   Use a different template to create the runner file.
 
library
   Build only the library without running the tests. The result is a file
   named 'libxpcc.a' located in this directory. If no other configuration
   file is specified the file called 'library.cfg' will be used.

size
   Print the size of the program. This is especially useful for any AVR target
   because it shows the relative space used by the program.
 
symbols
   Print a list of symbols in the object files together with their size.
   Useful to check what occupy which amount of space.
""")

import os

# check which configuration-file to load
if 'library' in BUILD_TARGETS:
	defaultConfigfile = 'library.cfg'
else:
	target = ARGUMENTS.get('target', 'hosted')
	if target == 'atmega':
		defaultConfigfile = 'unittest_atmega.cfg'
	elif target == 'atxmega':
		defaultConfigfile = 'unittest_atxmega.cfg'
	elif target == 'stm32':
		defaultConfigfile = 'unittest_stm32.cfg'
	elif target == 'hosted':
		defaultConfigfile = 'unittest_hosted.cfg'
	else:
		print "Error: unknown target '%s'. Use 'hosted' (default), 'atmega', 'atxmega' or 'stm32'." % target
		exit(1)

# create the build environment
env = Environment(
		tools = ['xpcc'],
		toolpath = ['../scons/site_tools'],
		configfile = ARGUMENTS.get('config', defaultConfigfile))

# build the xpcc library
xpccLibrary = env.XpccLibrary()

if 'library' in BUILD_TARGETS:
	env.Clean('library', 'libxpcc.a')
	env.Alias('library', [xpccLibrary,
			Command('libxpcc.a', xpccLibrary, Copy("$TARGET", "$SOURCE"))])
else:
	# find only files located in 'test' folders
	files = env.FindFiles(path = '.', unittest=True)
	
	# declare a file which later runs all the tests
	template = ARGUMENTS.get('template', env['XPCC_CONFIG']['build']['template'])
	runner = env.UnittestRunner(target = env.Buildpath('runner.cpp'),
								source = files.header,
								template = template)
	
	sources = [runner] + files.sources
	
	# build the program
	program = env.Program(target = 'executable',
						  source = sources)
	
	env.Alias('build', program)
	env.Alias('size', env.Size(program))
	env.Alias('symbols', env.Symbols(program))
	env.Alias('defines', env.ShowDefines())
	
	if env.CheckArchitecture('hosted'):
		env.Alias('run', env.Run(program))
		env.Alias('all', ['build', 'run'])
	else:
		env.Alias('all', ['build', 'size'])
	
	env.Default('all')
