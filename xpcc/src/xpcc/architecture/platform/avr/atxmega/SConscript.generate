#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright (c) 2011, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the Roboterclub Aachen e.V. nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------

Import('env')

generator = env['TemplateGenerator'](env, 'uart')
for port in ['C', 'D', 'E', 'F']:
	for number in [0, 1]:
		id = "%s%i" % (port, number)
		substitutions = {
			'id': id,
			'number': int(number),
		}
		id = id.lower()
		
		generator.template('uart_%s.hpp' % id, 'uart.hpp.in', substitutions)
		generator.template('uart_%s.cpp' % id, 'uart.cpp.in', substitutions)
		generator.template('uart_buffered_%s.cpp' % id, 'uart_buffered.cpp.in', substitutions)
		generator.template('uart_flow_%s.cpp' % id, 'uart_flow.cpp.in', substitutions)

generator = env['TemplateGenerator'](env, 'spi')
for port in ['C', 'D', 'E', 'F']:
	env.Depends(generator.template('spi_%s.hpp' % port.lower(), 'spi.hpp.in', { 'port': port }), 'spi/uart_spi.hpp.macros')
	generator.template('spi_%s.cpp' % port.lower(), 'spi.cpp.in', { 'port': port })
	for number in [0, 1]:
		id = "%s%i" % (port, number)
		generator.template('uart_spi_%s.cpp' % id.lower(), 'uart_spi.cpp.in', { 'id': id, 'number': int(number) })

generator = env['TemplateGenerator'](env, 'adc')
for port in ['A', 'B']:
	generator.template('adc%s.hpp' % port.lower(), 'adc.hpp.in', { 'id': port })
	generator.template('adc%s.cpp' % port.lower(), 'adc.cpp.in', { 'id': port })
	for channel in [0,1,2,3]:
		generator.template('adc%s_channel%s.hpp' % (port.lower(), channel), 'adc_channel.hpp.in', { 'id': port, 'ch': channel })

generator = env['TemplateGenerator'](env, 'dma')
for channel in [0,1,2,3]:
	generator.template('dma_channel%s.hpp' % channel, 'dma_channel.hpp.in', { 'ch': channel })

generator = env['TemplateGenerator'](env, 'i2c')
for port in ['C', 'D', 'E', 'F']:
	generator.template('i2c_master_%s.hpp' % port.lower(), 'i2c_master.hpp.in', { 'id': port })
	generator.template('i2c_master_%s.cpp' % port.lower(), 'i2c_master.cpp.in', { 'id': port })

generator = env['TemplateGenerator'](env, 'timer')
for port in ['C', 'D', 'E', 'F']:
	generator.template('awex_%s.hpp' % port.lower(), 'awex.hpp.in', { 'id': port })
	generator.template('hires_%s.hpp' % port.lower(), 'hires.hpp.in', { 'id': port })
	for channel in [0,1]:
		generator.template('timer_%s%s.hpp' % (port.lower(), channel), 'timer.hpp.in', { 'id': port, 'ty': channel })
		generator.template('timer_%s%s.cpp' % (port.lower(), channel), 'timer.cpp.in', { 'id': port, 'ty': channel })
		generator.template('timer_interrupt_%s%s.hpp' % (port.lower(), channel), 'timer_interrupt.hpp.in', { 'id': port, 'ty': channel })
		generator.template('timer_interrupt_%s%s.cpp' % (port.lower(), channel), 'timer_interrupt.cpp.in', { 'id': port, 'ty': channel })
