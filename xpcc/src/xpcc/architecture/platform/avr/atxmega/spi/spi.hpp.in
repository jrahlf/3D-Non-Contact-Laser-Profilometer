// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}
{% import 'uart_spi.hpp.macros' as uart_spi %}

#ifndef XPCC_ATXMEGA__SPI_{{ port }}_HPP
#define XPCC_ATXMEGA__SPI_{{ port }}_HPP

#include <stdint.h>
#include <avr/io.h>
#include "spi.hpp"
#include <xpcc/driver/connectivity/spi/spi_master.hpp>
#include <xpcc/architecture/utils.hpp>

namespace xpcc
{
	namespace atxmega
	{
#if defined(SPI{{ port }}) || defined(__DOXYGEN__)
		/**
		 * \brief		SPI Master for Port {{ port }}
		 *
		 * This module only supports DMA read transfers in slave mode, however
		 * slave mode is not implemented here.
		 *
		 * \author		Niklas hauser
		 * \ingroup		atxmega_spi
		 */
		class SpiMaster{{ port }} : public SpiMaster
		{
		public:
			static void
			initialize(spi::Prescaler prescaler=spi::PRESCALER_16,
					   spi::Mode mode=spi::MODE_0);
			
			inline static void
			setDataOrder(bool lsbFirst=true)
			{
				SPI{{ port }}_CTRL = (SPI{{ port }}_CTRL & ~SPI_DORD_bm) | (lsbFirst ? SPI_DORD_bm : 0);
			}
			
			static uint8_t
			write(uint8_t data);
			
			static bool
			setBuffer(uint16_t length,
					  uint8_t* transmit=0, uint8_t* receive=0,
					  BufferIncrease bufferIncrease=BUFFER_INCR_BOTH);
			
			static bool
			transfer(TransferOptions options=TRANSFER_SEND_BUFFER_SAVE_RECEIVE);
			
			static ALWAYS_INLINE bool
			transferSync(TransferOptions options=TRANSFER_SEND_BUFFER_SAVE_RECEIVE);
			
			static bool
			isFinished();
			
			inline static SPI_t&
			getModuleBase()
			{
				return SPI{{ port }};
			}
		};
#endif // SPI{{ port }}
		
{{ uart_spi.master(port, 0) }}
		
{{ uart_spi.master(port, 1) }}
	}
}

#endif // XPCC_ATXMEGA__SPI_{{ port }}_HPP

