// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#include <xpcc/architecture/platform/arm7/at91.hpp>

#include "uart_{{ id }}.hpp"

namespace
{
#ifdef __ARM_AT91SAM7S__
{%- if id == 0 %}
	GPIO__INPUT(RXD, A, 5);
	GPIO__OUTPUT(TXD, A, 6);
{%- else %}
	GPIO__INPUT(RXD, A, 21);
	GPIO__OUTPUT(TXD, A, 22);
{%- endif %}
#else
{%- if id == 0 %}
	GPIO__INPUT(RXD, A, 0);
	GPIO__OUTPUT(TXD, A, 1);
{%- else %}
	GPIO__INPUT(RXD, A, 5);
	GPIO__OUTPUT(TXD, A, 6);
{%- endif %}
#endif
}

// ----------------------------------------------------------------------------
void
xpcc::at91::Uart{{ id }}::setBaudrate(uint32_t baudrate)
{
	AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, (1 << AT91C_ID_US{{ id }})) ;
	
	// enable Pins
	//*AT91C_PIOA_PDR = AT91C_PA5_RXD0 | AT91C_PA6_TXD0;
	
	// Reset and disable Receiver & Transmitter
	AT91C_BASE_US{{ id }}->US_CR =
			AT91C_US_RSTRX | AT91C_US_RSTTX |
			AT91C_US_RXDIS | AT91C_US_TXDIS;
	
	// Normal Mode, Clock = MCK, 8N1
	AT91C_BASE_US{{ id }}->US_MR =
			AT91C_US_USMODE_NORMAL |
			AT91C_US_CLKS_CLOCK    |
			AT91C_US_CHRL_8_BITS   |
			AT91C_US_PAR_NONE      |
			AT91C_US_NBSTOP_1_BIT;
	
	// Baud Rate Divisor
	AT91C_BASE_US{{ id }}->US_BRGR = (F_CPU / 16 / baudrate);
	
	// Receiver & Transmitter Enable
	AT91C_BASE_US{{ id }}->US_CR = AT91C_US_RXEN | AT91C_US_TXEN;
}

// ----------------------------------------------------------------------------
void
xpcc::at91::Uart{{ id }}::write(uint8_t data)
{
	while (!(AT91C_BASE_US{{ id }}->US_CSR & AT91C_US_TXRDY)) {
		// Wait for Empty Tx Buffer
	}
	
	// Transmit Character
	AT91C_BASE_US{{ id }}->US_THR = data;
}

// ----------------------------------------------------------------------------
bool
xpcc::at91::Uart{{ id }}::read(uint8_t& c)
{
	if (AT91C_BASE_US{{ id }}->US_CSR & AT91C_US_RXRDY)
	{
		c = AT91C_BASE_US{{ id }}->US_RHR;
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------------
uint8_t
xpcc::at91::Uart{{ id }}::read(uint8_t *buffer, uint8_t n)
{
	for (uint8_t i = 0; i < n; ++i)
	{
		if (read(*buffer++)) {
			return i;
		}
	}
	
	return n;
}
