// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#include "../../common/constants.h"
#include "../device.h"
	
	.text
	.arm
	.align	4
	
	.global	_lowLevelInit
	.func	_lowLevelInit
	.type	_lowLevelInit, %function
_lowLevelInit:
	// see http://www.mikrocontroller.net/topic/132103
	// 32 kHz clock, 500ms => 2^14 cycles
	mov		r0, #4096		// 2^14 / 4 = 2^12 = 4096
1:
	subs	r0, r0, #1
	bne		1b
	
	push	{lr}
	
	// set up vector table in RAM
	ldr		r8, =__ram_start
	ldr		r9, =_vectors
	ldmia	r9!, {r0-r7}
	stmia	r8!, {r0-r7}
	ldmia	r9!, {r0-r7}
	stmia	r8!, {r0-r7}
	
	// check if remap is already done
	mov		r0, #0
	ldr		r0, [r0, #0x14]
	ldr		r1, =MAGIC_MARKER
	cmp		r0, r1
	
	// otherwise remap RAM to address 0
	ldrne	r0, =AT91C_BASE_MC
	movne	r1, #AT91C_MC_RCB
	strne	r1, [r0, #MC_RCR]
	
	ldr		r0, =_at91Init
	mov		lr, pc
	bx		r0
	
	pop		{lr}
	bx		lr
	.endfunc
	
	.end
