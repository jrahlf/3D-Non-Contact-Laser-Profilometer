// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#include "../../common/constants.h"
//#include "../registers.h"

#define MEMMAP			0xE01FC040

#define	LPC_MAM_BASE	0xE01FC000
#define MAM_CR			0x0000
#define MAM_TIM			0x0004

#define LPC_SCS_BASE	0xE01FC1A0

	.text
	.arm
	
	.global	_lowLevelInit
	.func	_lowLevelInit
	.type	_lowLevelInit, %function
_lowLevelInit:
	// see http://www.mikrocontroller.net/topic/132103
	mov		r0, #(1 << 20)	// TODO choose right value
1:
	subs	r0, r0, #1
	bne		1b
	
	push	{lr}
	
	// In LPC23xx and LPC24xx use the 'fast' GPIOs for ports 0 and 1
	// Set GPIOM in SCS
#ifdef __ARM_LPC23_24__
	ldr		r0, =LPC_SCS_BASE
	ldr		r1, [r0, #0]
	orr		r1, r1, #1
	str		r1, [r0, #0]
#endif
	
	// From the Errata Sheet of the LPC2138:
	// For CPU clock frequencies slower than 20 MHz, set MAMTIM to 0x01.
	// For CPU clock frequencies between 20 MHz and 40 MHz, set MAMTIM to 0x02,
	// and for values above 40 MHz set MAMTIM to 0x03.
	//
	// From the User Manual for LPC23xx:
	// For CPU clock frequencies above 60 MHz set MAMTIM to 0x04. 
	ldr		r0, =LPC_MAM_BASE
#if F_CPU < 20000000UL
	mov		r1, #1
#elif F_CPU < 40000000UL
	mov		r1, #2
#elif F_CPU < 60000000UL
	mov		r1, #3
#else
	mov		r1, #4
#endif
	str		r1, [r0, #MAM_TIM]
	
	// fully enable MAM functions 
	mov		r1, #2
	str		r1, [r0, #MAM_CR]
	
	// set up vector table in RAM
	ldr		r8, =__ram_start
	ldr		r9, =_vectors
	ldmia	r9!, {r0-r7}
	stmia	r8!, {r0-r7}
	ldmia	r9!, {r0-r7}
	stmia	r8!, {r0-r7}
	
	// Memory Mapping (when Interrupt Vectors are in RAM)
	ldr		r0, =MEMMAP
	mov		r1, #2
	str		r1, [r0]
	
	ldr		r0, =_lpcInit
	mov		lr, pc
	bx		r0
	
	pop		{lr}
	bx		lr
	.endfunc
	
	.end
