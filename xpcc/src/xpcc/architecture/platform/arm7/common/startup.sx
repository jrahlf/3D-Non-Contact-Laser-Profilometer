// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#include "constants.h"
	
	/* The start-up code must be linked at the start of ROM, which is NOT
	 * necessarily address zero.
	 */
	.text
	.arm
	.align	4
	
	.global _startup
_startup:
	/* Vector table
	 * 
	 * These vectors can be read at address 0 or at RAM address
 	 * They ABSOLUTELY requires to be in relative addresssing mode in order to
 	 * guarantee a valid jump. For the moment, all are just looping.
 	 * 
	 * NOTE: used only very briefly until RAM is remapped to address zero.
	 * If an exception occurs before remap, this would result in an infinite loop.
	 */
	ldr		pc, _reset_addr		// Reset
	b		.					// Undefined Instruction
	b		.					// Software Interrupt
	b		.					// Prefetch Abort
	b		.					// Data Abort
	/* Checksum of the vector table (2er complement of the addition of all other entries)
	 * 
	 * See disassembler:
	 *   e59f f018
	 * + eaff fffe
	 * + eaff fffe
	 * + eaff fffe
	 * + eaff fffe
	 * + 0000 0000 <- checksum will be inserted here
	 * + eaff fffe
	 * + eaff fffe
	 *   ---------
	 *   679f f00c (truncated to 32-bit)
	 * 
	 * => -679f f00c = 9860 0ff4
	 */
	.word 0x98600ff4
	b		.					// IRQ
	b		.					// FIQ
	
_reset_addr:
	.word	__start
	
	// see abort.S for _undefined_instruction_handler, _prefetch_abort_handler
	// and _data_abort_handler
	
	.global	__start
__start:
	/* Call the platform-specific low-level initialization routines
	 * 
	 * These functions give the application a chance to perform early
	 * initializations of the hardware. They cannot rely on initialization of any
	 * static variables, because these have not yet been initialized in RAM.
	 */
	ldr		sp, =__stack_end		/* set the temporary stack pointer */
	
	ldr		r0, =_lowLevelInit
	mov		lr, pc
	bx		r0
	
_cstartup:
	/* Initialize stack pointers for all ARM modes */
	/* set Abort stack pointer (used for ABT and UND mode) */
	ldr		r0, =MAGIC_MARKER
	msr		CPSR_c, #ARM_MODE_ABT | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	ldr		sp, =__abort_stack_top
	stmfd	sp!, {r0}
	mov		r1, sp
	msr		CPSR_c, #ARM_MODE_UND | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	mov		sp, r1
	
	/* set the SVC stack pointer */
	msr		CPSR_c, #ARM_MODE_SVC | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	ldr		sp, =__svc_stack_top
	stmfd	sp!, {r0}
	
	/* set the FIQ stack pointer */
	msr		CPSR_c, #ARM_MODE_FIQ | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	ldr		sp, =__fiq_stack_top
	stmfd	sp!, {r0}
	/* Init the FIQ register (banked) */
	ldr		r8, =INTERRUPT_BASE_REGISTER
	
	/* set the IRQ stack pointer */
	msr		CPSR_c, #ARM_MODE_IRQ | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	ldr		sp, =__irq_stack_top
	stmfd	sp!, {r0}
	
	/* set the C stack pointer */
	msr		CPSR_c, #ARM_MODE_SYS | ARM_IRQ_DISABLE | ARM_FIQ_DISABLE
	ldr		sp, =__usr_stack_top
	stmfd	sp!, {r0}
	
	/* Relocate .fastcode section (copy from ROM to RAM) */
	ldr 	r0, =__fastcode_load
	ldr		r1, =__fastcode_start
	ldr		r2, =__fastcode_end
1:
	cmp		r1, r2
	ldmltia r0!, {r3}
	stmltia r1!, {r3}
	blt		1b
	
	/* Relocate the .data section (copy from ROM to RAM) */
	ldr		r0, =__data_load
	ldr		r1, =__data_start
	ldr		r2, =__data_end
1:
	cmp		r1, r2
	ldmltia r0!, {r3}
	stmltia r1!, {r3}
	blt		1b
	
	/* Clear the .bss section (zero init) */
	ldr		r1, =__bss_start
	ldr		r2, =__bss_end
	mov		r3, #0
1:
	cmp		r1, r2
	stmltia r1!, {r3}
	blt		1b
	
	/* Fill the .stack section with a marker to check the stack usage later on. */
	ldr		r1, =__stack_start
	ldr		r2, =__stack_end
	ldr		r3, =STACK_FILL
1:
	cmp		r1, r2
	stmltia r1!, {r3}
	blt		1b
	
	/* Invoke the static constructors */
	ldr		r12, =__libc_init_array
	mov		lr, pc			/* set the return address */
	bx		r12				/* the target code can be ARM or THUMB */
	
	/* End in SYSTEM mode with interrupts enabled */
    msr     CPSR_c, #ARM_MODE_SYS
	
	/* Call main() interwork-save => enter the C/C++ code */
	ldr		r12, =main
	ldr		lr, =exit		/* set the return address */
	bx		r12				/* the target code can be ARM or THUMB */
	
	.end
