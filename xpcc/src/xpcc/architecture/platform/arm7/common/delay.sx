// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *	 * Redistributions of source code must retain the above copyright
 *	   notice, this list of conditions and the following disclaimer.
 *	 * Redistributions in binary form must reproduce the above copyright
 *	   notice, this list of conditions and the following disclaimer in the
 *	   documentation and/or other materials provided with the distribution.
 *	 * Neither the name of the Roboterclub Aachen e.V. nor the
 *	   names of its contributors may be used to endorse or promote products
 *	   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

	.section .fastcode, "x"
	.arm
	
	// ------------------------------------------------------------------------
	/**
	 * @brief	Simple delay loop (in microseconds resolution)
	 * 
	 * Use Timer-Interrupts etc. for delays whenever possible. This delay-loop
	 * is very inaccurate when interrupts or DMA transfers occur at the same
	 * time. This is because only the number of cycles inside this loop are
	 * counted. External interruptions go unnoticed and will prolong the delay
	 * time.
	 * 
	 * C equivalent:
	 * @code
	 * extern "C" void _delay_us(uint32_t us);
	 * @endcode
	 * 
	 * The function is put into the .fastcode section which resides in RAM to
	 * be sure that it is executed without any waitstates etc. Otherwise
	 * the delay variables had to be adapted every ARM type.
	 * 
	 * An example are the AT91SAM types, which aren't able to run ARM code from
	 * Flash at above 20-30 Mhz without wait-states. Of course this changes
	 * the executing timing which we would like to avoid here to get
	 * at least an reasonably accurate delay. 
	 * 
	 * @author	Fabian Greif
	 */
	.global	_delay_us
	.type	_delay_us, %function
	.func	_delay_us
_delay_us:
	// 3 cycles for the call, 3 cylces preamble, 4 cycles per loop, 3 for the return
	// => 6 + 3 + 4 * i
	// 
	// F_CPU / 1000000 = cycles per us => 48,054,850 / 1,000,000 = 48
	// 48 / 4 cycles per loop = 12
	mov		r1, #(F_CPU / 1000000 / 4)	// +S
	muls	r1, r0, r1					// +S +mI (m = 1, because r1 has only one significant byte)
1:
	subnes	r1, r1, #1					// +S
	bne		1b							// +N +2S or +S if cond fails
	bx		lr							// +N +2S
	.size	_delay_us, . - _delay_us
	.endfunc
	
	// ------------------------------------------------------------------------
	/**
	 * @brief	Simple delay loop (in milliseconds resolution)
	 * 
	 * C equivalent:
	 * @code
	 * extern "C" void _delay_ms(uint32_t ms);
	 * @endcode
	 * 
	 * @see		_delay_us
	 * @author	Fabian Greif
	 */
	.global	_delay_ms
	.type	_delay_ms, %function
	.func	_delay_ms
_delay_ms:
	// F_CPU / 1000 = cycles per us => 48,054,850 / 1,000 = 48054
	// 48054 / 4 cycles per loop = 12013
	ldr		r1, =(F_CPU / 1000 / 4)		// +S
	muls	r1, r0, r1					// +S +mI (m = 2, because r1 has two significant bytes)
1:
	subnes	r1, r1, #1					// +S
	bne		1b							// +N +2S or +S if cond fails
	bx		lr							// +N +2S
	.size	_delay_ms, . - _delay_ms
	.endfunc
	
	.end
