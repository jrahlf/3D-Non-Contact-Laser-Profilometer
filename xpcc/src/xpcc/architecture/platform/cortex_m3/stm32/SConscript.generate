#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright (c) 2011, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the Roboterclub Aachen e.V. nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------

Import('env')

generator = env['TemplateGenerator'](env, 'adc')
for id in [1, 2, 3, 4]:
	if id < 3:
		generator.template('adc_%i.hpp' % id, 'adc.hpp.in', { 'id': id, 'id_common': '12', 'id_common_u': '1_2' })
		generator.template('adc_%i.cpp' % id, 'adc.cpp.in', { 'id': id, 'id_common': '12', 'id_common_u': '1_2' })
	else:
		generator.template('adc_%i.hpp' % id, 'adc.hpp.in', { 'id': id, 'id_common': '34', 'id_common_u': '3_4' })
		generator.template('adc_%i.cpp' % id, 'adc.cpp.in', { 'id': id, 'id_common': '34', 'id_common_u': '3_4' })

generator = env['TemplateGenerator'](env, 'spi')
for id in [1, 2, 3]:
	generator.template('spi_%i.hpp' % id, 'spi.hpp.in', { 'id': id })
	generator.template('spi_%i.cpp' % id, 'spi.cpp.in', { 'id': id })

generator = env['TemplateGenerator'](env, 'i2c')
for id in [1, 2, 3]:
	generator.template('i2c_master_%i.hpp' % id, 'i2c_master.hpp.in', { 'id': id })
	generator.template('i2c_master_%i.cpp' % id, 'i2c_master.cpp.in', { 'id': id })

generator = env['TemplateGenerator'](env, 'uart')
for id in [1, 2, 3, 6]:
	env.Depends(generator.template('usart_%i.hpp'               % id, 'usart.hpp.in',              { 'id': id, 'className' : 'Usart' }), 'uart/template.hpp.macros')
	env.Depends(generator.template('usart_%i.cpp'               % id, 'uart.cpp.in',               { 'id': id, 'className' : 'Usart' }), 'uart/template.cpp.macros')
	env.Depends(generator.template('usart_buffered_%i.cpp'      % id, 'uart_buffered.cpp.in',      { 'id': id, 'className' : 'Usart' }), 'uart/template.cpp.macros')
	env.Depends(generator.template('usart_buffered_flow_%i.cpp' % id, 'uart_buffered_flow.cpp.in', { 'id': id, 'className' : 'Usart' }), 'uart/template.cpp.macros')
	env.Depends(generator.template('usart_spi_%i.cpp'           % id, 'usart_spi.cpp.in',          { 'id': id, 'className' : 'Usart' }), 'uart/template.cpp.macros')
	env.Depends(generator.template('usart_hal_%i.hpp'               % id, 'uart_hal.hpp.in',              { 'id': id, 'className' : 'UsartHal', 'moduleName' : 'USART' }), 'uart/template.hpp.macros')
	env.Depends(generator.template('usart_hal_%i.cpp'               % id, 'uart_hal.cpp.in',               { 'id': id, 'className' : 'UsartHal', 'moduleName' : 'USART' }), 'uart/template.cpp.macros')
for id in [4, 5]:
	env.Depends(generator.template('uart_%i.hpp'                % id, 'uart.hpp.in',               { 'id': id, 'className' : 'Uart'  }), 'uart/template.hpp.macros')
	env.Depends(generator.template('uart_%i.cpp'                % id, 'uart.cpp.in',               { 'id': id, 'className' : 'Uart'  }), 'uart/template.cpp.macros')
	env.Depends(generator.template('uart_buffered_%i.cpp'       % id, 'uart_buffered.cpp.in',      { 'id': id, 'className' : 'Uart'  }), 'uart/template.cpp.macros')
	env.Depends(generator.template('uart_buffered_flow_%i.cpp'  % id, 'uart_buffered_flow.cpp.in', { 'id': id, 'className' : 'Uart'  }), 'uart/template.cpp.macros')
	env.Depends(generator.template('uart_hal_%i.hpp'                % id, 'uart_hal.hpp.in',               { 'id': id, 'className' : 'UartHal' , 'moduleName' : 'UART' }), 'uart/template.hpp.macros')
	env.Depends(generator.template('uart_hal_%i.cpp'                % id, 'uart_hal.cpp.in',               { 'id': id, 'className' : 'UartHal' , 'moduleName' : 'UART' }), 'uart/template.cpp.macros')

generator = env['TemplateGenerator'](env, 'timer')
for id in [1, 8]:
	generator.template('timer_%i.hpp' % id, 'advanced.hpp.in', { 'id': id })
	generator.template('timer_%i.cpp' % id, 'advanced.cpp.in', { 'id': id })
for id in [2, 3, 4, 5]:
	generator.template('timer_%i.hpp' % id, 'general_purpose.hpp.in', { 'id': id })
	generator.template('timer_%i.cpp' % id, 'general_purpose.cpp.in', { 'id': id })
for id in [6, 7]:
	generator.template('timer_%i.hpp' % id, 'basic.hpp.in', { 'id': id })
	generator.template('timer_%i.cpp' % id, 'basic.cpp.in', { 'id': id })
#for id in [9, 12]:
#	generator.template('timer_%i.hpp' % id, 'general_purpose_2.hpp.in', { 'id': id })
#	generator.template('timer_%i.cpp' % id, 'general_purpose_2.cpp.in', { 'id': id })
#for id in [10, 11, 13, 14]:
#	generator.template('timer_%i.hpp' % id, 'general_purpose_1.hpp.in', { 'id': id })
#	generator.template('timer_%i.cpp' % id, 'general_purpose_1.cpp.in', { 'id': id })

generator = env['TemplateGenerator'](env, 'can')
for id in [1, 2]:
	generator.template('can_%i.hpp' % id, 'can.hpp.in', { 'id': id })
	generator.template('can_%i.cpp' % id, 'can.cpp.in', { 'id': id })

generator = env['TemplateGenerator'](env, 'comp')
for id in [1, 2, 3, 4, 5, 6, 7]:
	generator.template('comp_%i.hpp' % id, 'comp.hpp.in', { 'id': id })
