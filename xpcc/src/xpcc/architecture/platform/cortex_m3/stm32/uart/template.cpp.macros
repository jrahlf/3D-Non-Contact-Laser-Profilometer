
{%- macro excludeDeclarationsStart(id) -%}
{%- if id == 6 %}
#if defined(STM32F2XX) || defined(STM32F4XX)
{% elif id == 5 -%}
#if defined(STM32F10X_HD) || defined(STM32F10X_XL) || defined(STM32F10X_CL) || \
	defined(STM32F2XX) || defined(STM32F3XXV) || defined(STM32F4XX)
// only devices with 100 pins have Port D and therefore UART5
{% elif id == 4 -%}
#if defined(STM32F10X_HD) || defined(STM32F10X_XL) || defined(STM32F10X_CL) || \
	defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
{%- endif %}
{%- endmacro -%}

{%- macro excludeDeclarationsEnd(id) -%}
{%- if id in [4, 5, 6] -%}
#endif
{%- endif %}
{%- endmacro -%}

{%- macro pinDefinitions(id) -%}
namespace
{
	{% if id == 1 -%}
	GPIO__OUTPUT(TxdA9, A, 9);
	GPIO__INPUT(RxdA10, A, 10);
	
	GPIO__OUTPUT(TxdB6, B, 6);
	GPIO__INPUT(RxdB7, B, 7);
	{%- elif id == 2 -%}
	GPIO__OUTPUT(TxdA2, A, 2);
	GPIO__INPUT(RxdA3, A, 3);
	
	GPIO__OUTPUT(TxdD5, D, 5);
	GPIO__INPUT(RxdD6, D, 6);

#if defined(STM32F3XX)
	GPIO__OUTPUT(TxdA14, A, 14);
	GPIO__INPUT(RxdA15, A, 15);

	GPIO__OUTPUT(TxdB3, B, 3);
	GPIO__INPUT(RxdB4, B, 4);
#endif

	{%- elif id == 3 -%}
	GPIO__OUTPUT(TxdB10, B, 10);
	GPIO__INPUT(RxdB11, B, 11);
	
	GPIO__OUTPUT(TxdD8, D, 8);
	GPIO__INPUT(RxdD9, D, 9);
	
	GPIO__OUTPUT(TxdC10, C, 10);
	GPIO__INPUT(RxdC11, C, 11);
	{%- elif id == 6 -%}
	GPIO__OUTPUT(TxdC6, C, 6);
	GPIO__INPUT(RxdC7, C, 7);
	
	GPIO__OUTPUT(TxdG14, G, 14);
	GPIO__INPUT(RxdG9, G, 9);
	{%- elif id == 4 -%}
#if defined(STM32F2XX) || defined(STM32F4XX)
	GPIO__OUTPUT(TxdA0, A, 0);
	GPIO__INPUT(RxdA1, A, 1);
#endif
	
	GPIO__OUTPUT(TxdC10, C, 10);
	GPIO__INPUT(RxdC11, C, 11);
	{%- elif id == 5 -%}
	GPIO__OUTPUT(TxdC12, C, 12);
	GPIO__INPUT(RxdD2, D, 2);
	{%- endif %}
}
{%- endmacro -%}

{%- macro pinDefinitionsFlowControl(className, id) -%}
namespace
{
	GPIO__OUTPUT(RTS, {{ className | upper}}{{ id }}_RTS_PORT, {{ className | upper}}{{ id }}_RTS_PIN);
	GPIO__INPUT (CTS, {{ className | upper}}{{ id }}_CTS_PORT, {{ className | upper}}{{ id }}_CTS_PIN);
}
{%- endmacro -%}

{%- macro apbClkDefinitions(id) -%}
namespace
{
	{% if id in [1, 6] -%}
	static const uint32_t apbClk = STM32_APB2_FREQUENCY;	// APB2
	{%- elif id in [2, 3, 4, 5] -%}
	static const uint32_t apbClk = STM32_APB1_FREQUENCY;	// APB1
	{%- endif %}
}
{%- endmacro -%}


{%- macro configurePins(className, id) -%}
{% if id in [4, 5] -%}
{{ uartConfigurePins(className, id) }}
{%- elif id in [1, 2, 3, 6] -%}
{{ usartConfigurePins(className, id) }}
{%- endif -%}
{%- endmacro -%}

{%- macro uartConfigurePins(className, id) -%}
void
xpcc::stm32::{{ className }}{{ id }}::configurePins(Mapping mapping)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_UART{{ id }}EN;
	
	// Initialize IO pins
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
	{% if id == 4 -%}
#if defined(STM32F3XX)
	(void) mapping;		// avoid compiler warning

	TxdC10::setAlternateFunction(AF_UART4, xpcc::stm32::PUSH_PULL);
	RxdC11::setAlternateFunction(AF_UART4);
#else
	if (mapping == REMAP_PA0_PA1) {
		TxdA0::setAlternateFunction(AF_UART4, xpcc::stm32::PUSH_PULL);
		RxdA1::setAlternateFunction(AF_UART4);
	}
	else {
		TxdC10::setAlternateFunction(AF_UART4, xpcc::stm32::PUSH_PULL);
		RxdC11::setAlternateFunction(AF_UART4);
	}
#endif
	{%- elif id == 5 -%}
	(void) mapping;		// avoid compiler warning
	
	TxdC12::setAlternateFunction(AF_UART5, xpcc::stm32::PUSH_PULL);
	RxdD2::setAlternateFunction(AF_UART5);
	{%- endif %}
#else
	(void) mapping;		// avoid compiler warning
	
	{% if id == 4 -%}
	TxdC10::setAlternateFunction(xpcc::stm32::PUSH_PULL);
	RxdC11::setInput();
	{%- elif id == 5 -%}
	TxdC12::setAlternateFunction(xpcc::stm32::PUSH_PULL);
	RxdD2::setInput();
	{%- endif %}
#endif
}
{%- endmacro -%}

{%- macro usartConfigurePins(className, id) -%}
void
xpcc::stm32::{{ className }}{{ id }}::configurePins(Mapping mapping)
{
	// Enable clock
	{% if id == 1 or id == 6 -%}
	RCC->APB2ENR |= RCC_APB2ENR_USART{{ id }}EN;
	{%- elif id == 2 or id == 3 -%}
	RCC->APB1ENR |= RCC_APB1ENR_USART{{ id }}EN;
	{%- endif %}
	
	// Initialize IO pins
#if defined(STM32F2XX) || defined(STM32F3XX) || defined(STM32F4XX)
	{% if id == 1 -%}
	if (mapping == REMAP_PA9_PA10) {
		TxdA9::setAlternateFunction(AF_USART1, xpcc::stm32::PUSH_PULL);
		RxdA10::setAlternateFunction(AF_USART1);
	}
	else {
		TxdB6::setAlternateFunction(AF_USART1, xpcc::stm32::PUSH_PULL);
		RxdB7::setAlternateFunction(AF_USART1);
	}
	{%- elif id == 2 -%}
	if (mapping == REMAP_PA2_PA3) {
		TxdA2::setAlternateFunction(AF_USART2, xpcc::stm32::PUSH_PULL);
		RxdA3::setAlternateFunction(AF_USART2);
	}
#if defined(STM32F3XX)
	else if(mapping == REMAP_PA14_PA15) {
		TxdA14::setAlternateFunction(AF_USART2, xpcc::stm32::PUSH_PULL);
		RxdA15::setAlternateFunction(AF_USART2);
	}
	else if(mapping == REMAP_PB3_PB4) {
		TxdB3::setAlternateFunction(AF_USART2, xpcc::stm32::PUSH_PULL);
		RxdB4::setAlternateFunction(AF_USART2);
	}
#endif
	else {
		TxdD5::setAlternateFunction(AF_USART2, xpcc::stm32::PUSH_PULL);
		RxdD6::setAlternateFunction(AF_USART2);
	}
	{%- elif id == 3 -%}
	if (mapping == REMAP_PB10_PB11) {
		TxdB10::setAlternateFunction(AF_USART3, xpcc::stm32::PUSH_PULL);
		RxdB11::setAlternateFunction(AF_USART3);
	}
	else if (mapping == REMAP_PC10_PC11) {
		TxdC10::setAlternateFunction(AF_USART3, xpcc::stm32::PUSH_PULL);
		RxdC11::setAlternateFunction(AF_USART3);
	}
	else {
		TxdD8::setAlternateFunction(AF_USART3, xpcc::stm32::PUSH_PULL);
		RxdD9::setAlternateFunction(AF_USART3);
	}
	{%- elif id == 6 -%}
	if (mapping == REMAP_PC6_PC7) {
		TxdC6::setAlternateFunction(AF_USART6, xpcc::stm32::PUSH_PULL);
		RxdC7::setAlternateFunction(AF_USART6);
	}
	else {
		TxdG14::setAlternateFunction(AF_USART6, xpcc::stm32::PUSH_PULL);
		RxdG9::setAlternateFunction(AF_USART6);
	}
	{%- endif %}
#elif defined(STM32F10X) || defined(STM32F10X_HD) || defined(STM32F10X_XL) \
	|| defined(STM32F10X_CL)
	AFIO->MAPR = (AFIO->MAPR & ~AFIO_MAPR_USART{{ id }}_REMAP) | mapping;
	{% if id == 1 -%}
	if (mapping == REMAP_PA9_PA10) {
		TxdA9::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdA10::setInput();
	}
	else {
		TxdB6::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdB7::setInput();
	}
	{%- elif id == 2 -%}
	if (mapping == REMAP_PA2_PA3) {
		TxdA2::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdA3::setInput();
	}
	else {
		TxdD5::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdD6::setInput();
	}
	{%- elif id == 3 -%}
	if (mapping == REMAP_PB10_PB11) {
		TxdB10::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdB11::setInput();
	}
	else if (mapping == REMAP_PC10_PC11) {
		TxdC10::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdC11::setInput();
	}
	else {
		TxdD8::setAlternateFunction(xpcc::stm32::PUSH_PULL);
		RxdD9::setInput();
	}
	{%- endif %}
#else
#  error "Unknown CPU Type. Please define STM32F10X_.., STM32F2XX, STM32F3XX or STM32F4XX"
#endif
}
{%- endmacro -%}

{%- macro setBaudrate(className, id, moduleName) -%}
void
xpcc::stm32::{{ className }}{{ id }}::setBaudrate(uint32_t baudrate)
{
	// Enable clock
	{% if id in [1, 6] -%}
	RCC->APB2ENR |= RCC_APB2ENR_USART{{ id }}EN;
	{%- elif id in [2, 3] -%}
	RCC->APB1ENR |= RCC_APB1ENR_USART{{ id }}EN;
	{%- elif id in [4, 5] -%}
	// FIXME: there seems to be a bug in the stm32f3xxlib which does not provide
	//        the necessary RCC_APB1ENR_UART5EN define and probably defines
	//        RCC_APB1ENR_UART4EN incorrectly (0x00100000 instead of 0x00080000)
	RCC->APB1ENR |= RCC_APB1ENR_UART{{ id }}EN;
	{%- endif %}
	
	{{ moduleName }}{{ id }}->CR1 = 0;
	
	// Set baudrate
	{{ moduleName }}{{ id }}->BRR = calculateBaudrateSettings(apbClk, baudrate);
	
	// Transmitter & Receiver-Enable, 8 Data Bits, 1 Stop Bit
	{{ moduleName }}{{ id }}->CR1 |= USART_CR1_TE | USART_CR1_RE;
	{{ moduleName }}{{ id }}->CR2 = 0;
	{{ moduleName }}{{ id }}->CR3 = 0;
	
	{{ moduleName }}{{ id }}->CR1 |= USART_CR1_UE;		// Uart Enable
}
{%- endmacro -%}

{%- macro write(className, id, moduleName) -%}
void
xpcc::stm32::{{ className }}{{ id }}::write(uint8_t data)
{
#if defined(STM32F3XX)
	while (!({{ moduleName }}{{ id }}->ISR & USART_ISR_TXE)) {
		// wait until the data register becomes empty
	}

	{{ moduleName }}{{ id }}->TDR = data;
#else
	while (!({{ moduleName }}{{ id }}->SR & USART_SR_TXE)) {
		// wait until the data register becomes empty
	}
	
	{{ moduleName }}{{ id }}->DR = data;
#endif
}
{%- endmacro -%}

{%- macro writeBlock(className, id) -%}
void
xpcc::stm32::{{ className }}{{ id }}::write(const uint8_t *s, uint8_t n)
{
	while (n-- != 0) {
		write(*s++);
	}
}
{%- endmacro -%}

{%- macro read(className, id, moduleName) -%}
bool
xpcc::stm32::{{ className }}{{ id }}::read(uint8_t& c)
{
#if defined(STM32F3XX)
	if ({{ moduleName }}{{ id }}->ISR & USART_ISR_RXNE)
	{
		c = {{ moduleName }}{{ id }}->RDR;
		return true;
	}
#else
	if ({{ moduleName }}{{ id }}->SR & USART_SR_RXNE)
	{
		c = {{ moduleName }}{{ id }}->DR;
		return true;
	}
#endif
	return false;
}
{%- endmacro -%}

{%- macro readBlock(className, id) -%}
uint8_t
xpcc::stm32::{{ className }}{{ id }}::read(uint8_t *buffer, uint8_t n)
{
	for (uint8_t i = 0; i < n; ++i)
	{
		if (read(*buffer++)) {
			return i;
		}
	}
	
	return n;
}
{%- endmacro -%}
