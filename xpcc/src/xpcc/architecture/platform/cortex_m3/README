
Debugging with OpenOCD
-------------------------------------------------------------------------------

## Befehle:

Register auslesen:
  > reg

RAM lesen (word/halfword/byte):
  > mdw addr
  > mdh addr
  > mdb addr

Example:
  > halt
  target state: halted
  target halted due to debug-request, current mode: Handler BusFault
  xPSR: 0x21000005 pc: 0x08001060 msp: 0x20002eac
  > mdb 0xe000ed29
  0xe000ed29: 04 


## Faults

Read the Bus Fault Status Register:
  > mdb 0xe000ed29
  0xe000ed29: 04 

=> Imprecise data access violation

Der Wert für lr gibt an wie zurückgesprungen werden soll und auf welchen
Stack die gespeicherten Werte liegen:
  0xfffffff9 -> Werte liegen auf dem Main Stack (msp = Handler Stack)
  0xfffffffd -> Werte liegen auf dem Process Stack (psp)

# From RM008:
# The SP is decremented by eight words by the completion of the stack push.
# Figure 5-1 shows the contents of the stack after an exception pre-empts the
# current program flow.
#
# Old SP--> <previous>
#           xPSR
#           PC
#           LR
#           r12
#           r3
#           r2
#           r1
#    SP-->  r0


Escape character is '^]'.
Open On-Chip Debugger
> halt
target state: halted
target halted due to debug-request, current mode: Handler BusFault
xPSR: 0x21000005 pc: 0x08001060 msp: 0x20002ecc
> reg
===== arm v7m registers
(0) r0 (/32): 0x00000000
(1) r1 (/32): 0x00000000
(2) r2 (/32): 0x08001061
(3) r3 (/32): 0x00000000
(4) r4 (/32): 0x20002ECC
(5) r5 (/32): 0x08000F4D
(6) r6 (/32): 0x08002841
(7) r7 (/32): 0x08001061
(8) r8 (/32): 0x00000000
(9) r9 (/32): 0x08002829
(10) r10 (/32): 0x00000000
(11) r11 (/32): 0xA5A5A5A5
(12) r12 (/32): 0xA5A5A5A5
(13) sp (/32): 0x20002ECC
(14) lr (/32): 0xFFFFFFFD
(15) pc (/32): 0x08001060
(16) xPSR (/32): 0x21000005
(17) msp (/32): 0x20002ECC
(18) psp (/32): 0x20000E40
(19) primask (/1): 0x00
(20) basepri (/8): 0xB0
(21) faultmask (/1): 0x00
(22) control (/2): 0x00
===== cortex-m3 dwt registers
...

# lr  = 0xFFFFFFFD => Werte liegen auf dem Process Stack (psp)
# psp = 0x20000E40

> mdw 0x20000E40
0x20000e40: 00000000 	-> r0
> mdw 0x20000E44
0x20000e44: 00000000  	-> r1
> mdw 0x20000E48
0x20000e48: 08001061  	-> r2
> mdw 0x20000E4C
0x20000e4c: 00000000  	-> r3
> mdw 0x20000E50
0x20000e50: a5a5a5a5  	-> r12
> mdw 0x20000E54
0x20000e54: 08001e2d  	-> lr
> mdw 0x20000E58
0x20000e58: 08001bae  	-> pc	-> prvCopyDataFromQueue
> 