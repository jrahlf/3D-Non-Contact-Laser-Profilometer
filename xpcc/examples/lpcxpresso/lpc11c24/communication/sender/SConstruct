# WARNING: This file is generated automatically, do not edit!

# path to the xpcc root directory
rootpath = '../../../../..'

env = Environment(tools = ['xpcc'], toolpath = [rootpath + '/scons/site_tools'])
env.Append(CPPPATH = ['.'])

# find all source files
files = env.FindFiles('.')

# build the xpcc library
env.XpccLibrary()

# generate communication stubs
files.sources += env.XpccCommunication('../xml/communication.xml', path='communication')

# build the program
program = env.Program(target = env['XPCC_CONFIG']['general']['name'], source=files.sources)

# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())

hexfile = env.Hex(program)
binfile = env.Bin(program)

# env.Alias('program', env.OpenOcd(program))
env.Alias('init', env.LpcLinkInit(program))
env.Alias('program', env.LpcLinkFlash(binfile))
env.Alias('debug', env.GdbDebug(program))
env.Alias('lpcdebug', env.LpcLinkDebug(program))
env.Alias('build', [hexfile, binfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('all')
