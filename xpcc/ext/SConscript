#!/usr/bin/env python
# 
# Copyright (c) 2011, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Roboterclub Aachen e.V. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os

Import('env')
Import('sources')
Import('defines')

# Paths which should be searched for compilable files
sourcePath = []

# Local include paths which are needed to build the files in the external libraries
buildIncludes = []

# These paths are used to build the local files but are also added to the
# global environment 
globalIncludes = []

# -----------------------------------------------------------------------------

# Add the STM32 Standard Peripheral Library
if env['ARCHITECTURE'].startswith('cortex-m3/stm32f10'):
	sourcePath += [
		'stm32f10x_lib/STM32F10x_StdPeriph_Driver/src']
	globalIncludes += [
		'stm32f10x_lib/CMSIS/CM3/CoreSupport',
		'stm32f10x_lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x',
		'stm32f10x_lib/STM32F10x_StdPeriph_Driver/inc']

if env['ARCHITECTURE'].startswith('cortex-m3/stm32f2'):
	sourcePath += [
		'stm32f2xx_lib/STM32F2xx_StdPeriph_Driver/src']
	globalIncludes += [
		'stm32f2xx_lib/CMSIS/CM3/CoreSupport',
		'stm32f2xx_lib/CMSIS/CM3/DeviceSupport/ST/STM32F2xx',
		'stm32f2xx_lib/STM32F2xx_StdPeriph_Driver/inc']

if env['ARCHITECTURE'].startswith('cortex-m4/stm32f3'):
	sourcePath += [
		'stm32f3xx_lib/STM32F3xx_StdPeriph_Driver/src',
		]
	globalIncludes += [
		'stm32f3xx_lib/CMSIS/Include',
		'stm32f3xx_lib/CMSIS/Device/ST/STM32F30x/Include',
		'stm32f3xx_lib/STM32F30x_StdPeriph_Driver/inc',
		]
if env['ARCHITECTURE'].startswith('cortex-m4/stm32f4'):
	sourcePath += [
		'stm32f4xx_lib/STM32F4xx_StdPeriph_Driver/src']
	globalIncludes += [
		'stm32f4xx_lib/CMSIS/Include',
		'stm32f4xx_lib/CMSIS/Device/ST/STM32F4xx/Include',
		'stm32f4xx_lib/STM32F4xx_StdPeriph_Driver/inc']

if 'stm32f' in env['ARCHITECTURE']:
	sourcePath += ['freertos']		# FreeRTOS for STM32
	sourcePath += ['fatfs']			# FatFS

if env['ARCHITECTURE'].startswith('cortex-m0/lpc11'):
	sourcePath += ['lpc11xx/cmsis', 'lpc11xx/driver']
	globalIncludes += [
		'lpc11xx/cmsis']

if env['ARCHITECTURE'].startswith('cortex-m3/lpc17'):
    sourcePath += ['lpc17xx/cmsis']
    globalIncludes += []

# Add portions of the Atmel ASF
if env['ARCHITECTURE'].startswith('avr32'):
	sourcePath += [
		'asf/avr32',
		'asf/common']
	globalIncludes += [
		'asf/avr32/boards',
		'asf/avr32/boards/evk1101',
		'asf/avr32/drivers/cpu',
		'asf/avr32/drivers/flashc',
		'asf/avr32/drivers/gpio',
		'asf/avr32/drivers/intc',
		'asf/avr32/drivers/pm',
		'asf/avr32/drivers/tc',
		'asf/avr32/drivers/usart',
		'asf/avr32/drivers/usbb',
		'asf/avr32/utils',
		'asf/avr32/utils/preprocessor',
		'asf/common/boards',
		'asf/common/services',
		'asf/common/services/clock',
		'asf/common/services/sleepmgr',
		'asf/common/services/usb',
		'asf/common/services/usb/class',
		'asf/common/services/usb/class/cdc',
		'asf/common/services/usb/class/cdc/device',
		'asf/common/services/usb/class/cdc/device/example',
		'asf/common/services/usb/class/cdc/device/example/at32uc3b0256_evk1101',
		'asf/common/services/usb/class/cdc/device/example/at32uc3b0256_evk1101/gcc',
		'asf/common/services/usb/udc',
		'asf/common/utils',
		'asf/common/utils/interrupt']

# -----------------------------------------------------------------------------
includes = buildIncludes + globalIncludes
for path in includes:
	env.AppendUnique(CPPPATH = os.path.join(env['XPCC_ROOTPATH'], 'ext', path))

for path in sourcePath:
	scan = env.FindFiles(path = path)
	
	sources.append(scan.sources)
	defines.update(scan.defines)

result = (sources, defines, globalIncludes)
Return('result')
